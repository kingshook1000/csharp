{
  "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "factoryName": {
      "type": "string",
      "metadata": "Data Factory name",
      "defaultValue": "control-msint-adf"
    },
    "CAToInvoice_properties_variables_IncludeTest_defaultValue": {
      "type": "string",
      "defaultValue": "true"
    },
    "CAToLedger_properties_variables_IncludeTest_defaultValue": {
      "type": "string",
      "defaultValue": "true"
    },
    "Copy CA Raw Json Data_properties_variables_SourceContainer_defaultValue": {
      "type": "string",
      "defaultValue": "invoicelineitems"
    },
    "Copy Crusher Billed-Ledger Data_properties_variables_SourceContainer_defaultValue": {
      "type": "string",
      "defaultValue": "billed"
    },
    "Copy Crusher Invoice Data_properties_variables_SourceContainer_defaultValue": {
      "type": "string",
      "defaultValue": "invoicing"
    },
    "Copy Crusher UnBilled-Ledger Data_properties_variables_SourceContainer_defaultValue": {
      "type": "string",
      "defaultValue": "unbilled"
    },
    "Copy Invoice Document Details Raw Json Data_properties_variables_SourceContainer_defaultValue": {
      "type": "string",
      "defaultValue": "documentlineitems"
    },
    "Copy Invoice Summary Raw Json Data_properties_variables_SourceContainer_defaultValue": {
      "type": "string",
      "defaultValue": "invoicingevents"
    },
    "Copy Ledger Raw Json data_properties_variables_SourceContainer_defaultValue": {
      "type": "string",
      "defaultValue": "ledger-aircapi-container"
    },
    "Copy RA Deferral Raw Json Data_properties_variables_SourceContainer_defaultValue": {
      "type": "string",
      "defaultValue": "pix-consumabledeferral-air"
    },
    "Copy RA MCommit Deferral Raw Json Data_properties_variables_SourceContainer_defaultValue": {
      "type": "string",
      "defaultValue": "pix-mcommitdeferral-air"
    },
    "InvoiceToCrusher_properties_variables_IncludeTest_defaultValue": {
      "type": "string",
      "defaultValue": "true"
    },
    "InvoiceToInvoice_properties_variables_IncludeTest_defaultValue": {
      "type": "string",
      "defaultValue": "true"
    },
    "LedgerToCrusher_properties_variables_IncludeTest_defaultValue": {
      "type": "string",
      "defaultValue": "true"
    },
    "LedgerToCrusherUnbilled_properties_variables_IncludeTest_defaultValue": {
      "type": "string",
      "defaultValue": "true"
    },
    "OrderToChargeAggregator_properties_variables_IncludeTest_defaultValue": {
      "type": "string",
      "defaultValue": "true"
    },
    "RAToLedger_properties_variables_IncludeTest_defaultValue": {
      "type": "string",
      "defaultValue": "true"
    },
    "RatingToLedger_properties_variables_IncludeTest_defaultValue": {
      "type": "string",
      "defaultValue": "true"
    },
    "TimelineToLedger_properties_variables_IncludeTest_defaultValue": {
      "type": "string",
      "defaultValue": "true"
    },
    "TimelineToLedger_properties_variables_PartnerStorageRootPath_defaultValue": {
      "type": "string",
      "defaultValue": "commercetszwcusintadls.azuredatalakestore.net"
    },
    "AZlogAdfPipelineFuncLS_properties_typeProperties_functionAppUrl": {
      "type": "string",
      "defaultValue": "https://control-centralus-pme-aircapi-fa.azurewebsites.net"
    },
    "AZLogReconAnalysisLS_properties_typeProperties_functionAppUrl": {
      "type": "string",
      "defaultValue": "https://control-centralus-pme-aircapi-fa.azurewebsites.net"
    },
    "AZlogControlStreamFuncLS_properties_typeProperties_functionAppUrl": {
      "type": "string",
      "defaultValue": "https://control-centralus-pme-aircapi-fa.azurewebsites.net"
    },
    "AzureDataLakeAnalytics_properties_typeProperties_accountName": {
      "type": "string",
      "defaultValue": "project-horizongen2"
    },
    "AzureDataLakeAnalytics_properties_typeProperties_servicePrincipalId": {
      "type": "string",
      "defaultValue": "463b2ebe-7769-40e3-8fa8-b0ec73fd6021"
    },
    "AzureDataLakeAnalytics_properties_typeProperties_tenant": {
      "type": "string",
      "defaultValue": "72f988bf-86f1-41af-91ab-2d7cd011db47"
    },
    "AzureDataLakeAnalytics_properties_typeProperties_subscriptionId": {
      "type": "string",
      "defaultValue": "25852a6f-384f-4690-9c35-131168a56858"
    },
    "AzureDataLakeAnalytics_properties_typeProperties_resourceGroupName": {
      "type": "string",
      "defaultValue": "jedi-aircapi"
    },
    "AzureDataLakeAnalytics_properties_typeProperties_azureCloudType": {
      "type": "string",
      "defaultValue": "AzureCloud"
    },
    "AzureDataLakeAnalytics_properties_typeProperties_dataLakeAnalyticsUri": {
      "type": "string",
      "defaultValue": "azuredatalakeanalytics.net"
    },
    "AzureDataLakeStorageGen2_properties_typeProperties_url": {
      "type": "string",
      "defaultValue": "https://reconcontrol2.dfs.core.windows.net"
    },
    "AzureDataLakeStorageGen2_properties_typeProperties_tenant": {
      "type": "string",
      "defaultValue": "72f988bf-86f1-41af-91ab-2d7cd011db47"
    },
    "AzureDataLakeStorageGen2_properties_typeProperties_servicePrincipalId": {
      "type": "string",
      "defaultValue": "463b2ebe-7769-40e3-8fa8-b0ec73fd6021"
    },
    "CARawDataSourceLinkService_properties_typeProperties_serviceEndpoint": {
      "type": "string",
      "defaultValue": "https://entriesezw3pgrwnmezi.blob.core.windows.net"
    },
    "CARawDataSourceLinkService_properties_typeProperties_tenant": {
      "type": "string",
      "defaultValue": "124edf19-b350-4797-aefc-3206115ffdb3"
    },
    "CARawDataSourceLinkService_properties_typeProperties_servicePrincipalId": {
      "type": "string",
      "defaultValue": "56de6601-e588-45c5-aec3-325937f3bcbd"
    },
    "CollectorLinkedService_properties_typeProperties_serviceEndpoint": {
      "type": "string",
      "defaultValue": "https://collectoraircapiwestus.blob.core.windows.net"
    },
    "CollectorLinkedService_properties_typeProperties_tenant": {
      "type": "string",
      "defaultValue": "124edf19-b350-4797-aefc-3206115ffdb3"
    },
    "CollectorLinkedService_properties_typeProperties_servicePrincipalId": {
      "type": "string",
      "defaultValue": "56de6601-e588-45c5-aec3-325937f3bcbd"
    },
    "CrusherDataSourceLinkedService_properties_typeProperties_serviceEndpoint": {
      "type": "string",
      "defaultValue": "https://crusheraircapiwestus.blob.core.windows.net"
    },
    "CrusherDataSourceLinkedService_properties_typeProperties_tenant": {
      "type": "string",
      "defaultValue": "124edf19-b350-4797-aefc-3206115ffdb3"
    },
    "CrusherDataSourceLinkedService_properties_typeProperties_servicePrincipalId": {
      "type": "string",
      "defaultValue": "56de6601-e588-45c5-aec3-325937f3bcbd"
    },
    "InvoiceLineItemDetailsRawDataLinkService_properties_typeProperties_serviceEndpoint": {
      "type": "string",
      "defaultValue": "https://docdetailsezw3pgrwnmezi.blob.core.windows.net"
    },
    "InvoiceLineItemDetailsRawDataLinkService_properties_typeProperties_tenant": {
      "type": "string",
      "defaultValue": "124edf19-b350-4797-aefc-3206115ffdb3"
    },
    "InvoiceLineItemDetailsRawDataLinkService_properties_typeProperties_servicePrincipalId": {
      "type": "string",
      "defaultValue": "56de6601-e588-45c5-aec3-325937f3bcbd"
    },
    "InvoiceSummaryRawDataLinkService_properties_typeProperties_serviceEndpoint": {
      "type": "string",
      "defaultValue": "https://invoicingezw3pgrwnmezi.blob.core.windows.net"
    },
    "InvoiceSummaryRawDataLinkService_properties_typeProperties_tenant": {
      "type": "string",
      "defaultValue": "124edf19-b350-4797-aefc-3206115ffdb3"
    },
    "InvoiceSummaryRawDataLinkService_properties_typeProperties_servicePrincipalId": {
      "type": "string",
      "defaultValue": "56de6601-e588-45c5-aec3-325937f3bcbd"
    },
    "LedgerRawDataLinkService_properties_typeProperties_serviceEndpoint": {
      "type": "string",
      "defaultValue": "https://ledgeraircapiwuseh.blob.core.windows.net/"
    },
    "LedgerRawDataLinkService_properties_typeProperties_tenant": {
      "type": "string",
      "defaultValue": "124edf19-b350-4797-aefc-3206115ffdb3"
    },
    "LedgerRawDataLinkService_properties_typeProperties_servicePrincipalId": {
      "type": "string",
      "defaultValue": "56de6601-e588-45c5-aec3-325937f3bcbd"
    },
    "OrderRawDataSourceLinkedService_properties_typeProperties_serviceEndpoint": {
      "type": "string",
      "defaultValue": "https://collectoraircapiwestus.blob.core.windows.net"
    },
    "OrderRawDataSourceLinkedService_properties_typeProperties_tenant": {
      "type": "string",
      "defaultValue": "124edf19-b350-4797-aefc-3206115ffdb3"
    },
    "OrderRawDataSourceLinkedService_properties_typeProperties_servicePrincipalId": {
      "type": "string",
      "defaultValue": "56de6601-e588-45c5-aec3-325937f3bcbd"
    },
    "RatingAdls_properties_typeProperties_dataLakeStoreUri": {
      "type": "string",
      "defaultValue": "adl://commercetszwcusintadls.azuredatalakestore.net"
    },
    "RatingAdls_properties_typeProperties_servicePrincipalId": {
      "type": "string",
      "defaultValue": "463b2ebe-7769-40e3-8fa8-b0ec73fd6021"
    },
    "RatingAdls_properties_typeProperties_tenant": {
      "type": "string",
      "defaultValue": "72f988bf-86f1-41af-91ab-2d7cd011db47"
    },
    "RatingAdls_properties_typeProperties_subscriptionId": {
      "type": "string",
      "defaultValue": ""
    },
    "RatingAdls_properties_typeProperties_resourceGroupName": {
      "type": "string",
      "defaultValue": ""
    },
    "Secrets_properties_typeProperties_baseUrl": {
      "type": "string",
      "defaultValue": "https://control-msint-kv.vault.azure.net/"
    },
    "Monitor-CAToInvoice-Pipeline_properties_LogLastControlRunTimestamp_parameters_ControlName": {
      "type": "string",
      "defaultValue": "CAToInvoice"
    },
    "Monitor-CAToLedger-Pipeline_properties_LogLastControlRunTimestamp_parameters_ControlName": {
      "type": "string",
      "defaultValue": "CAToLedger"
    },
    "Monitor-InvoiceToCrusher-Pipeline_properties_LogLastControlRunTimestamp_parameters_ControlName": {
      "type": "string",
      "defaultValue": "InvoiceToCrusher"
    },
    "Monitor-InvoiceToInvoice-Pipeline_properties_LogLastControlRunTimestamp_parameters_ControlName": {
      "type": "string",
      "defaultValue": "InvoiceToInvoice"
    },
    "Monitor-LedgerToCrusher-Pipeline_properties_LogLastControlRunTimestamp_parameters_ControlName": {
      "type": "string",
      "defaultValue": "LedgerToCrusher"
    },
    "Monitor-LedgerToCrusherUnbilled-Pipeline_properties_LogLastControlRunTimestamp_parameters_ControlName": {
      "type": "string",
      "defaultValue": "LedgerToCrusherUnbilled"
    },
    "Monitor-OrderToCA-Pipeline_properties_LogLastControlRunTimestamp_parameters_ControlName": {
      "type": "string",
      "defaultValue": "OrderToCA"
    },
    "Monitor-RAToLedger-Pipeline_properties_LogLastControlRunTimestamp_parameters_ControlName": {
      "type": "string",
      "defaultValue": "RAToLedger"
    },
    "Monitor-RatingToLedger-Pipeline_properties_LogLastControlRunTimestamp_parameters_ControlName": {
      "type": "string",
      "defaultValue": "RatingToLedger"
    },
    "Monitor-TimelineToLedger-Pipeline_properties_LogLastControlRunTimestamp_parameters_ControlName": {
      "type": "string",
      "defaultValue": "TimelineToLedger"
    },
    "Trigger-Control-CAToInvoice_properties_pipeline_parameters_RunDate": {
      "type": "string",
      "defaultValue": "@trigger().outputs.windowStartTime"
    },
    "Trigger-Control-CAToLedger_properties_pipeline_parameters_RunDate": {
      "type": "string",
      "defaultValue": "@trigger().outputs.windowStartTime"
    },
    "Trigger-Control-InvoiceToCrusher_properties_pipeline_parameters_RunDate": {
      "type": "string",
      "defaultValue": "@trigger().outputs.windowStartTime"
    },
    "Trigger-Control-InvoiceToInvoice_properties_pipeline_parameters_RunDate": {
      "type": "string",
      "defaultValue": "@trigger().outputs.windowStartTime"
    },
    "Trigger-Control-LedgerToCrusher_properties_pipeline_parameters_RunDate": {
      "type": "string",
      "defaultValue": "@trigger().outputs.windowStartTime"
    },
    "Trigger-Control-LedgerToCrusherUnbilled_properties_pipeline_parameters_RunDate": {
      "type": "string",
      "defaultValue": "@trigger().outputs.windowStartTime"
    },
    "Trigger-Control-OrderToCA_properties_pipeline_parameters_RunDate": {
      "type": "string",
      "defaultValue": "@trigger().outputs.windowStartTime"
    },
    "Trigger-Control-RAToLedger_properties_pipeline_parameters_RunDate": {
      "type": "string",
      "defaultValue": "@trigger().outputs.windowStartTime"
    },
    "Trigger-Control-RatingToLedger_properties_pipeline_parameters_RunDate": {
      "type": "string",
      "defaultValue": "@trigger().outputs.windowStartTime"
    },
    "Trigger-Control-TimelineToLedger_properties_pipeline_parameters_RunDate": {
      "type": "string",
      "defaultValue": "@trigger().outputs.windowStartTime"
    },
    "Trigger-Copy-ChargeAggregator_properties_pipeline_parameters_WindowStartTime": {
      "type": "string",
      "defaultValue": "@trigger().outputs.windowStartTime"
    },
    "Trigger-Copy-CrusherBilledLedger_properties_pipeline_parameters_WindowStartTime": {
      "type": "string",
      "defaultValue": "@trigger().outputs.windowStartTime"
    },
    "Trigger-Copy-CrusherInvoice_properties_pipeline_parameters_WindowStartTime": {
      "type": "string",
      "defaultValue": "@trigger().outputs.windowStartTime"
    },
    "Trigger-Copy-CrusherUnBilledLedger_properties_pipeline_parameters_WindowStartTime": {
      "type": "string",
      "defaultValue": "@trigger().outputs.windowStartTime"
    },
    "Trigger-Copy-InvoiceDocumentDetails_properties_pipeline_parameters_WindowStartTime": {
      "type": "string",
      "defaultValue": "@trigger().outputs.windowStartTime"
    },
    "Trigger-Copy-InvoiceDocumentSummary_properties_pipeline_parameters_WindowStartTime": {
      "type": "string",
      "defaultValue": "@trigger().outputs.windowStartTime"
    },
    "Trigger-Copy-Ledger_properties_pipeline_parameters_WindowStartTime": {
      "type": "string",
      "defaultValue": "@trigger().outputs.windowStartTime"
    },
    "Trigger-Copy-Order_properties_pipeline_parameters_WindowStartTime": {
      "type": "string",
      "defaultValue": "@trigger().outputs.windowStartTime"
    },
    "Trigger-Copy-RADeferral_properties_pipeline_parameters_WindowStartTime": {
      "type": "string",
      "defaultValue": "@trigger().outputs.windowStartTime"
    },
    "Trigger-Copy-RAMonetaryCommitDeferral_properties_pipeline_parameters_WindowStartTime": {
      "type": "string",
      "defaultValue": "@trigger().outputs.windowStartTime"
    },
    "Trigger-Transform-ChargeAggregator_properties_pipeline_parameters_ActivityName": {
      "type": "string",
      "defaultValue": "ChargeAggregator"
    },
    "Trigger-Transform-ChargeAggregator_properties_pipeline_parameters_WindowStartTime": {
      "type": "string",
      "defaultValue": "@trigger().outputs.windowStartTime"
    },
    "Trigger-Transform-DeferralConsumable_properties_pipeline_parameters_ActivityName": {
      "type": "string",
      "defaultValue": "DeferralConsumable"
    },
    "Trigger-Transform-DeferralConsumable_properties_pipeline_parameters_WindowStartTime": {
      "type": "string",
      "defaultValue": "@trigger().outputs.windowStartTime"
    },
    "Trigger-Transform-DeferralSpendable_properties_pipeline_parameters_ActivityName": {
      "type": "string",
      "defaultValue": "DeferralSpendable"
    },
    "Trigger-Transform-DeferralSpendable_properties_pipeline_parameters_WindowStartTime": {
      "type": "string",
      "defaultValue": "@trigger().outputs.windowStartTime"
    },
    "Trigger-Transform-InvoiceDocumentDetail_properties_pipeline_parameters_ActivityName": {
      "type": "string",
      "defaultValue": "InvoiceDocumentDetail"
    },
    "Trigger-Transform-InvoiceDocumentDetail_properties_pipeline_parameters_WindowStartTime": {
      "type": "string",
      "defaultValue": "@trigger().outputs.windowStartTime"
    },
    "Trigger-Transform-InvoiceDocumentSummary_properties_pipeline_parameters_ActivityName": {
      "type": "string",
      "defaultValue": "InvoiceDocumentSummary"
    },
    "Trigger-Transform-InvoiceDocumentSummary_properties_pipeline_parameters_WindowStartTime": {
      "type": "string",
      "defaultValue": "@trigger().outputs.windowStartTime"
    },
    "Trigger-Transform-Ledger_properties_pipeline_parameters_ActivityName": {
      "type": "string",
      "defaultValue": "Ledger"
    },
    "Trigger-Transform-Ledger_properties_pipeline_parameters_WindowStartTime": {
      "type": "string",
      "defaultValue": "@trigger().outputs.windowStartTime"
    },
    "Trigger-Transform-Order_properties_pipeline_parameters_ActivityName": {
      "type": "string",
      "defaultValue": "Order"
    },
    "Trigger-Transform-Order_properties_pipeline_parameters_WindowStartTime": {
      "type": "string",
      "defaultValue": "@trigger().outputs.windowStartTime"
    },
    "Trigger-Transform-OrderSeatCount_properties_pipeline_parameters_ActivityName": {
      "type": "string",
      "defaultValue": "OrderSeatCount"
    },
    "Trigger-Transform-OrderSeatCount_properties_pipeline_parameters_WindowStartTime": {
      "type": "string",
      "defaultValue": "@trigger().outputs.windowStartTime"
    },
    "Trigger-Transform-Rating_properties_pipeline_parameters_RunTime": {
      "type": "string",
      "defaultValue": "@trigger().outputs.windowStartTime"
    }
  },
  "variables": {
    "factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
  },
  "resources": [
    {
      "name": "[concat(parameters('factoryName'), '/CAToInvoice')]",
      "type": "Microsoft.DataFactory/factories/pipelines",
      "apiVersion": "2018-06-01",
      "properties": {
        "description": "Recon control between charge aggregator and Invoice",
        "activities": [
          {
            "name": "CAToInvoiceControl",
            "description": "Control between CA and Invoice",
            "type": "DataLakeAnalyticsScope",
            "dependsOn": [
              {
                "activity": "SetOutputRootPath",
                "dependencyConditions": [
                  "Succeeded"
                ]
              },
              {
                "activity": "SetDefaultIngestionStartDate",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "policy": {
              "timeout": "0.02:00:00",
              "retry": 3,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "scriptFolderPath": {
                "value": "@variables('ScriptRootPath')",
                "type": "Expression"
              },
              "scriptFileName": "CAToInvoiceRecon.script",
              "runtimeVersion": {
                "value": "@pipeline().globalParameters.ScopeRunTime",
                "type": "Expression"
              },
              "scriptLinkedService": {
                "referenceName": "AzureDataLakeStorageGen2",
                "type": "LinkedServiceReference"
              },
              "parameters": {
                "CAINPUTROOTPATH": {
                  "value": "@variables('IngestionRootPath')",
                  "type": "Expression"
                },
                "INVOICEINPUTROOTPATH": {
                  "value": "@variables('IngestionRootPath')",
                  "type": "Expression"
                },
                "COMMONINPUTROOTPATH": {
                  "value": "@variables('CommonRootPath')",
                  "type": "Expression"
                },
                "OUTPUTROOTPATH": {
                  "value": "@variables('ControlOutputRootPath')",
                  "type": "Expression"
                },
                "INGESTIONSTARTDATE": {
                  "value": "@concat('\"', variables('IngestionStartDate'), '\"')",
                  "type": "Expression"
                },
                "RUNDATE": {
                  "value": "@concat('\"', variables('OffsetedRunDate'), '\"')",
                  "type": "Expression"
                },
                "INCLUDETEST": {
                  "value": "@variables('IncludeTest')",
                  "type": "Expression"
                },
                "RESOURCEPATH": {
                  "value": "@variables('BinariesPath')",
                  "type": "Expression"
                },
                "CONTROLLATENCYROOTPATH": {
                  "value": "@variables('ControlLatencyRootPath')",
                  "type": "Expression"
                },
                "CONTROLNAME": {
                  "value": "@variables('ControlName')",
                  "type": "Expression"
                }
              }
            },
            "linkedServiceName": {
              "referenceName": "AzureDataLakeAnalytics",
              "type": "LinkedServiceReference"
            }
          },
          {
            "name": "CAToInvoiceAnalysis",
            "description": "Analysis script for CA to Invoice",
            "type": "DataLakeAnalyticsScope",
            "dependsOn": [
              {
                "activity": "SetAnalysisOutputRootPath",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "policy": {
              "timeout": "0.01:00:00",
              "retry": 3,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "scriptFolderPath": {
                "value": "@variables('ScriptRootPath')",
                "type": "Expression"
              },
              "scriptFileName": "ReconAnalysis.script",
              "runtimeVersion": {
                "value": "@pipeline().globalParameters.ScopeRunTime",
                "type": "Expression"
              },
              "scriptLinkedService": {
                "referenceName": "AzureDataLakeStorageGen2",
                "type": "LinkedServiceReference"
              },
              "parameters": {
                "CONTROLNAME": {
                  "value": "@variables('ControlName')",
                  "type": "Expression"
                },
                "RECONRESULTSTREAMPATH": {
                  "value": "@variables('AnalysisInputStreamPath')",
                  "type": "Expression"
                },
                "SLAINHOURS": "24",
                "OUTPUTROOTPATH": {
                  "value": "@variables('AnalysisOutputRootPath')",
                  "type": "Expression"
                },
                "ENGINEERINGTHRESHOLD": "100",
                "SOXTHRESHOLD": "1000000",
                "RUNDATE": {
                  "value": "@concat('\"', pipeline().parameters.RunDate, '\"')",
                  "type": "Expression"
                }
              }
            },
            "linkedServiceName": {
              "referenceName": "AzureDataLakeAnalytics",
              "type": "LinkedServiceReference"
            }
          },
          {
            "name": "LogEnggAnalysisResultsForCAToInvoice",
            "description": "Send Engineering Analysis results for CA to Invoice",
            "type": "AzureFunctionActivity",
            "dependsOn": [
              {
                "activity": "CAToInvoiceAnalysis",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "policy": {
              "timeout": "0.00:10:00",
              "retry": 3,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "functionName": "LogReconResult",
              "method": "POST",
              "headers": {},
              "body": {
                "ReconResultUri": "control/data/Recon/CAToInvoice@{variables('TestFolder')}/Analysis/EngineeringAnalysis_CAToInvoice.csv"
              }
            },
            "linkedServiceName": {
              "referenceName": "AZLogReconAnalysisLS",
              "type": "LinkedServiceReference"
            }
          },
          {
            "name": "CAToInvoiceAnalysisLogSuccess",
            "description": "Log success for CA to Invoice analysis",
            "type": "AzureFunctionActivity",
            "dependsOn": [
              {
                "activity": "CAToInvoiceAnalysis",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "policy": {
              "timeout": "0.00:10:00",
              "retry": 3,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "functionName": "LogAdfPipelineStatus",
              "method": "POST",
              "headers": {},
              "body": {
                "value": "{\"Activity\":\"CAToInvoiceAnalysis\", \"Status\":\"Success\", \"DataFactoryName\": \"@{pipeline().DataFactory}\", \"PipelineName\": \"@{pipeline().Pipeline}\", \"TriggeredBy\": \"@{pipeline().TriggerName}\", \"TriggerTime\":\"@{pipeline().TriggerTime}\",\"PipelineRunId\":\"@{pipeline().RunId}\"}",
                "type": "Expression"
              }
            },
            "linkedServiceName": {
              "referenceName": "AZlogAdfPipelineFuncLS",
              "type": "LinkedServiceReference"
            }
          },
          {
            "name": "CAToInvoiceControlLogFailure",
            "description": "Log failure for CA to Invoice control",
            "type": "AzureFunctionActivity",
            "dependsOn": [
              {
                "activity": "CAToInvoiceControl",
                "dependencyConditions": [
                  "Failed"
                ]
              }
            ],
            "policy": {
              "timeout": "0.00:10:00",
              "retry": 3,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "functionName": "LogAdfPipelineStatus",
              "method": "POST",
              "headers": {},
              "body": {
                "Activity": "CAToInvoiceControl",
                "Status": "Failed",
                "DataFactoryName": "@{pipeline().DataFactory}",
                "PipelineName": "@{pipeline().Pipeline}",
                "TriggeredBy": "@{pipeline().TriggerName}",
                "TriggerTime": "@{pipeline().TriggerTime}",
                "PipelineRunId": "@{pipeline().RunId}"
              }
            },
            "linkedServiceName": {
              "referenceName": "AZlogAdfPipelineFuncLS",
              "type": "LinkedServiceReference"
            }
          },
          {
            "name": "CAToInvoiceControlLogSuccess",
            "description": "Log success for CA to Invoice control",
            "type": "AzureFunctionActivity",
            "dependsOn": [
              {
                "activity": "CAToInvoiceControl",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "policy": {
              "timeout": "0.00:10:00",
              "retry": 3,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "functionName": "LogAdfPipelineStatus",
              "method": "POST",
              "headers": {},
              "body": {
                "Activity": "CAToInvoiceControl",
                "Status": "Success",
                "DataFactoryName": "@{pipeline().DataFactory}",
                "PipelineName": "@{pipeline().Pipeline}",
                "TriggeredBy": "@{pipeline().TriggerName}",
                "TriggerTime": "@{pipeline().TriggerTime}",
                "PipelineRunId": "@{pipeline().RunId}"
              }
            },
            "linkedServiceName": {
              "referenceName": "AZlogAdfPipelineFuncLS",
              "type": "LinkedServiceReference"
            }
          },
          {
            "name": "CAToInvoiceAnalysisLogFailure",
            "description": "log failure for CA to Invoice analysis",
            "type": "AzureFunctionActivity",
            "dependsOn": [
              {
                "activity": "CAToInvoiceAnalysis",
                "dependencyConditions": [
                  "Failed"
                ]
              }
            ],
            "policy": {
              "timeout": "0.00:10:00",
              "retry": 3,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "functionName": "LogAdfPipelineStatus",
              "method": "POST",
              "headers": {},
              "body": {
                "Activity": "CAToInvoiceAnalysis",
                "Status": "Failed",
                "DataFactoryName": "@{pipeline().DataFactory}",
                "PipelineName": "@{pipeline().Pipeline}",
                "TriggeredBy": "@{pipeline().TriggerName}",
                "TriggerTime": "@{pipeline().TriggerTime}",
                "PipelineRunId": "@{pipeline().RunId}"
              }
            },
            "linkedServiceName": {
              "referenceName": "AZlogAdfPipelineFuncLS",
              "type": "LinkedServiceReference"
            }
          },
          {
            "name": "SetIngestionRootPath",
            "description": "Set input root path for control",
            "type": "SetVariable",
            "dependsOn": [
              {
                "activity": "SetBinariesPath",
                "dependencyConditions": [
                  "Succeeded"
                ]
              },
              {
                "activity": "Set Test Folder If Running In Test Mode",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "userProperties": [],
            "typeProperties": {
              "variableName": "IngestionRootPath",
              "value": {
                "value": "@concat('\"', pipeline().globalParameters.ADLGen2StorageProtocolPrefix,  'transformation@', pipeline().globalParameters.ADLGen2StorageAccountName, pipeline().globalParameters.ADLGen2StoragePathSuffix, '/data/Ingestion', variables('TestFolder'), '\"')",
                "type": "Expression"
              }
            }
          },
          {
            "name": "SetOutputRootPath",
            "description": "set output root path for control",
            "type": "SetVariable",
            "dependsOn": [
              {
                "activity": "SetCommonRootPath",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "userProperties": [],
            "typeProperties": {
              "variableName": "ControlOutputRootPath",
              "value": {
                "value": "@concat('\"', pipeline().globalParameters.ADLGen2StorageProtocolPrefix,  'control@', pipeline().globalParameters.ADLGen2StorageAccountName, pipeline().globalParameters.ADLGen2StoragePathSuffix, '/data/Recon/', variables('ControlName'), variables('TestFolder'), '\"')",
                "type": "Expression"
              }
            }
          },
          {
            "name": "SetCommonRootPath",
            "description": "set common root path",
            "type": "SetVariable",
            "dependsOn": [
              {
                "activity": "SetIngestionRootPath",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "userProperties": [],
            "typeProperties": {
              "variableName": "CommonRootPath",
              "value": {
                "value": "@concat('\"', pipeline().globalParameters.ADLGen2StorageProtocolPrefix,  'transformation@', pipeline().globalParameters.ADLGen2StorageAccountName, pipeline().globalParameters.ADLGen2StoragePathSuffix, '/data/Ingestion\"')",
                "type": "Expression"
              }
            }
          },
          {
            "name": "SetBinariesPath",
            "description": "Set path for binary reosurces",
            "type": "SetVariable",
            "dependsOn": [],
            "userProperties": [],
            "typeProperties": {
              "variableName": "BinariesPath",
              "value": {
                "value": "@concat('\"', pipeline().globalParameters.ADLGen2StorageProtocolPrefix, 'resources@', \npipeline().globalParameters.ADLGen2StorageAccountName, pipeline().globalParameters.ADLGen2StoragePathSuffix, '/Binaries/\"')",
                "type": "Expression"
              }
            }
          },
          {
            "name": "SetAnalysisStreamInputPath",
            "description": "Set path for control stream that is input to Analysis script",
            "type": "SetVariable",
            "dependsOn": [
              {
                "activity": "CAToInvoiceControl",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "userProperties": [],
            "typeProperties": {
              "variableName": "AnalysisInputStreamPath",
              "value": {
                "value": "@concat('\"', pipeline().globalParameters.ADLGen2StorageProtocolPrefix,  'control@', pipeline().globalParameters.ADLGen2StorageAccountName, pipeline().globalParameters.ADLGen2StoragePathSuffix, '/data/Recon/', variables('ControlName'), variables('TestFolder'), '/Latest', variables('ControlName'), 'ReconResults.ss\"')",
                "type": "Expression"
              }
            }
          },
          {
            "name": "SetAnalysisOutputRootPath",
            "type": "SetVariable",
            "dependsOn": [
              {
                "activity": "SetAnalysisStreamInputPath",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "userProperties": [],
            "typeProperties": {
              "variableName": "AnalysisOutputRootPath",
              "value": {
                "value": "@concat('\"', pipeline().globalParameters.ADLGen2StorageProtocolPrefix,  'control@', pipeline().globalParameters.ADLGen2StorageAccountName, pipeline().globalParameters.ADLGen2StoragePathSuffix, '/data/Recon/', variables('ControlName'),variables('TestFolder'), '/Analysis', '\"')",
                "type": "Expression"
              }
            }
          },
          {
            "name": "LogSOXAnalysisResultsForCAToInvoice",
            "description": "Send SOX Analysis results for CA to Invoice",
            "type": "AzureFunctionActivity",
            "dependsOn": [
              {
                "activity": "CAToInvoiceAnalysis",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "policy": {
              "timeout": "0.00:10:00",
              "retry": 3,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "functionName": "LogReconResult",
              "method": "POST",
              "headers": {},
              "body": {
                "ReconResultUri": "control/data/Recon/CAToInvoice@{variables('TestFolder')}/Analysis/SOXAnalysis_CAToInvoice.csv"
              }
            },
            "linkedServiceName": {
              "referenceName": "AZLogReconAnalysisLS",
              "type": "LinkedServiceReference"
            }
          },
          {
            "name": "SetDefaultIngestionStartDate",
            "type": "SetVariable",
            "dependsOn": [
              {
                "activity": "SetControlLatencyRootPath",
                "dependencyConditions": [
                  "Succeeded"
                ]
              },
              {
                "activity": "SetOffsetedRunDate",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "userProperties": [],
            "typeProperties": {
              "variableName": "IngestionStartDate",
              "value": {
                "value": "@formatDateTime(addToTime(variables('OffsetedRunDate'), int(pipeline().parameters.ExtractionBackDays),'Day'), 'MM/dd/yyyy')",
                "type": "Expression"
              }
            }
          },
          {
            "name": "SetControlLatencyRootPath",
            "description": "Set path for control latency files",
            "type": "SetVariable",
            "dependsOn": [],
            "userProperties": [],
            "typeProperties": {
              "variableName": "ControlLatencyRootPath",
              "value": {
                "value": "@concat('\"', pipeline().globalParameters.ADLGen2StorageProtocolPrefix,  'control@', pipeline().globalParameters.ADLGen2StorageAccountName, pipeline().globalParameters.ADLGen2StoragePathSuffix, '/data/Recon/ControlLatency', '\"')",
                "type": "Expression"
              }
            }
          },
          {
            "name": "SetOffsetedRunDate",
            "type": "SetVariable",
            "dependsOn": [],
            "userProperties": [],
            "typeProperties": {
              "variableName": "OffsetedRunDate",
              "value": {
                "value": "@formatDateTime(addToTime(pipeline().parameters.RunDate, -1,'Day'), 'MM/dd/yyyy')",
                "type": "Expression"
              }
            }
          },
          {
            "name": "Set Test Folder If Running In Test Mode",
            "type": "IfCondition",
            "dependsOn": [],
            "userProperties": [],
            "typeProperties": {
              "expression": {
                "value": "@pipeline().parameters.RunInTestMode",
                "type": "Expression"
              },
              "ifTrueActivities": [
                {
                  "name": "Set Test Folder",
                  "description": "",
                  "type": "SetVariable",
                  "dependsOn": [],
                  "userProperties": [],
                  "typeProperties": {
                    "variableName": "TestFolder",
                    "value": {
                      "value": "/test",
                      "type": "Expression"
                    }
                  }
                }
              ]
            }
          }
        ],
        "concurrency": 1,
        "parameters": {
          "RunDate": {
            "type": "string",
            "defaultValue": "10/20/2020"
          },
          "ExtractionBackDays": {
            "type": "string",
            "defaultValue": "-1"
          },
          "RunInTestMode": {
            "type": "bool",
            "defaultValue": false
          }
        },
        "variables": {
          "ScriptRootPath": {
            "type": "String",
            "defaultValue": "resources/Scripts"
          },
          "IngestionRootPath": {
            "type": "String"
          },
          "CommonRootPath": {
            "type": "String"
          },
          "ControlOutputRootPath": {
            "type": "String"
          },
          "IncludeTest": {
            "type": "String",
            "defaultValue": "[parameters('CAToInvoice_properties_variables_IncludeTest_defaultValue')]"
          },
          "ControlName": {
            "type": "String",
            "defaultValue": "CAToInvoice"
          },
          "Container": {
            "type": "String",
            "defaultValue": "control"
          },
          "ErrorMessage": {
            "type": "String"
          },
          "BinariesPath": {
            "type": "String"
          },
          "IngestionStartDate": {
            "type": "String"
          },
          "AnalysisInputStreamPath": {
            "type": "String"
          },
          "AnalysisOutputRootPath": {
            "type": "String"
          },
          "ControlLatencyRootPath": {
            "type": "String"
          },
          "OffsetedRunDate": {
            "type": "String"
          },
          "TestFolder": {
            "type": "String"
          }
        },
        "folder": {
          "name": "Control"
        },
        "annotations": []
      },
      "dependsOn": [
        "[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorageGen2')]",
        "[concat(variables('factoryId'), '/linkedServices/AzureDataLakeAnalytics')]",
        "[concat(variables('factoryId'), '/linkedServices/AZLogReconAnalysisLS')]",
        "[concat(variables('factoryId'), '/linkedServices/AZlogAdfPipelineFuncLS')]"
      ]
    },
    {
      "name": "[concat(parameters('factoryName'), '/CAToLedger')]",
      "type": "Microsoft.DataFactory/factories/pipelines",
      "apiVersion": "2018-06-01",
      "properties": {
        "description": "Recon control between charge aggregator and ledger",
        "activities": [
          {
            "name": "CAToLedgerControl",
            "description": "Control between CA and Ledger",
            "type": "DataLakeAnalyticsScope",
            "dependsOn": [
              {
                "activity": "SetOutputRootPath",
                "dependencyConditions": [
                  "Succeeded"
                ]
              },
              {
                "activity": "SetDefaultIngestionStartDate",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "policy": {
              "timeout": "0.02:00:00",
              "retry": 3,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "scriptFolderPath": {
                "value": "@variables('ScriptRootPath')",
                "type": "Expression"
              },
              "scriptFileName": "CAToLedgerRecon.script",
              "runtimeVersion": {
                "value": "@pipeline().globalParameters.ScopeRunTime",
                "type": "Expression"
              },
              "scriptLinkedService": {
                "referenceName": "AzureDataLakeStorageGen2",
                "type": "LinkedServiceReference"
              },
              "parameters": {
                "CAINPUTROOTPATH": {
                  "value": "@variables('IngestionRootPath')",
                  "type": "Expression"
                },
                "REVRECINPUTROOTPATH": {
                  "value": "@variables('IngestionRootPath')",
                  "type": "Expression"
                },
                "COMMONINPUTROOTPATH": {
                  "value": "@variables('CommonRootPath')",
                  "type": "Expression"
                },
                "OUTPUTROOTPATH": {
                  "value": "@variables('ControlOutputRootPath')",
                  "type": "Expression"
                },
                "INGESTIONSTARTDATE": {
                  "value": "@concat('\"', variables('IngestionStartDate'), '\"')",
                  "type": "Expression"
                },
                "RUNDATE": {
                  "value": "@concat('\"', pipeline().parameters.RunDate, '\"')",
                  "type": "Expression"
                },
                "INCLUDETEST": {
                  "value": "@variables('IncludeTest')",
                  "type": "Expression"
                },
                "RESOURCEPATH": {
                  "value": "@variables('BinariesPath')",
                  "type": "Expression"
                },
                "CONTROLLATENCYROOTPATH": {
                  "value": "@variables('ControlLatencyRootPath')",
                  "type": "Expression"
                },
                "CONTROLNAME": {
                  "value": "@variables('ControlName')",
                  "type": "Expression"
                }
              }
            },
            "linkedServiceName": {
              "referenceName": "AzureDataLakeAnalytics",
              "type": "LinkedServiceReference"
            }
          },
          {
            "name": "CAToLedgerAnalysis",
            "description": "Analysis script for CA to ledger",
            "type": "DataLakeAnalyticsScope",
            "dependsOn": [
              {
                "activity": "SetAnalysisOutputRootPath",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "policy": {
              "timeout": "0.01:00:00",
              "retry": 3,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "scriptFolderPath": {
                "value": "@variables('ScriptRootPath')",
                "type": "Expression"
              },
              "scriptFileName": "ReconAnalysis.script",
              "runtimeVersion": {
                "value": "@pipeline().globalParameters.ScopeRunTime",
                "type": "Expression"
              },
              "scriptLinkedService": {
                "referenceName": "AzureDataLakeStorageGen2",
                "type": "LinkedServiceReference"
              },
              "parameters": {
                "CONTROLNAME": {
                  "value": "@variables('ControlName')",
                  "type": "Expression"
                },
                "RECONRESULTSTREAMPATH": {
                  "value": "@variables('AnalysisInputStreamPath')",
                  "type": "Expression"
                },
                "SLAINHOURS": "24",
                "OUTPUTROOTPATH": {
                  "value": "@variables('AnalysisOutputRootPath')",
                  "type": "Expression"
                },
                "ENGINEERINGTHRESHOLD": "100",
                "SOXTHRESHOLD": "1000000",
                "RUNDATE": {
                  "value": "@concat('\"', pipeline().parameters.RunDate, '\"')",
                  "type": "Expression"
                }
              }
            },
            "linkedServiceName": {
              "referenceName": "AzureDataLakeAnalytics",
              "type": "LinkedServiceReference"
            }
          },
          {
            "name": "LogEnggAnalysisResultsForCAToLedger",
            "description": "Send Engineering Analysis results for CA to ledger",
            "type": "AzureFunctionActivity",
            "dependsOn": [
              {
                "activity": "CAToLedgerAnalysis",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "policy": {
              "timeout": "0.00:10:00",
              "retry": 3,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "functionName": "LogReconResult",
              "method": "POST",
              "headers": {},
              "body": {
                "ReconResultUri": "control/data/Recon/CAToLedger/Analysis/EngineeringAnalysis_CAToLedger.csv"
              }
            },
            "linkedServiceName": {
              "referenceName": "AZLogReconAnalysisLS",
              "type": "LinkedServiceReference"
            }
          },
          {
            "name": "CAToLedgerAnalysisLogSuccess",
            "description": "Log success for CA to ledger analysis",
            "type": "AzureFunctionActivity",
            "dependsOn": [
              {
                "activity": "CAToLedgerAnalysis",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "policy": {
              "timeout": "0.00:10:00",
              "retry": 3,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "functionName": "LogAdfPipelineStatus",
              "method": "POST",
              "headers": {},
              "body": {
                "value": "{\"Activity\":\"CAToLedgerAnalysis\", \"Status\":\"Success\", \"DataFactoryName\": \"@{pipeline().DataFactory}\", \"PipelineName\": \"@{pipeline().Pipeline}\", \"TriggeredBy\": \"@{pipeline().TriggerName}\", \"TriggerTime\":\"@{pipeline().TriggerTime}\"}",
                "type": "Expression"
              }
            },
            "linkedServiceName": {
              "referenceName": "AZlogAdfPipelineFuncLS",
              "type": "LinkedServiceReference"
            }
          },
          {
            "name": "CAToLedgerControlLogFailure",
            "description": "Log failure for CA to ledger control",
            "type": "AzureFunctionActivity",
            "dependsOn": [
              {
                "activity": "CAToLedgerControl",
                "dependencyConditions": [
                  "Failed"
                ]
              }
            ],
            "policy": {
              "timeout": "0.00:10:00",
              "retry": 3,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "functionName": "LogAdfPipelineStatus",
              "method": "POST",
              "headers": {},
              "body": {
                "Activity": "CAToLedgerControl",
                "Status": "Failed",
                "DataFactoryName": "@{pipeline().DataFactory}",
                "PipelineName": "@{pipeline().Pipeline}",
                "TriggeredBy": "@{pipeline().TriggerName}",
                "TriggerTime": "@{pipeline().TriggerTime}"
              }
            },
            "linkedServiceName": {
              "referenceName": "AZlogAdfPipelineFuncLS",
              "type": "LinkedServiceReference"
            }
          },
          {
            "name": "CAToLedgerControlLogSuccess",
            "description": "Log success for CA to ledger control",
            "type": "AzureFunctionActivity",
            "dependsOn": [
              {
                "activity": "CAToLedgerControl",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "policy": {
              "timeout": "0.00:10:00",
              "retry": 3,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "functionName": "LogAdfPipelineStatus",
              "method": "POST",
              "headers": {},
              "body": {
                "Activity": "CAToLedgerControl",
                "Status": "Success",
                "DataFactoryName": "@{pipeline().DataFactory}",
                "PipelineName": "@{pipeline().Pipeline}",
                "TriggeredBy": "@{pipeline().TriggerName}",
                "TriggerTime": "@{pipeline().TriggerTime}"
              }
            },
            "linkedServiceName": {
              "referenceName": "AZlogAdfPipelineFuncLS",
              "type": "LinkedServiceReference"
            }
          },
          {
            "name": "CAToLedgerAnalysisLogFailure",
            "description": "log failure for CA to Ledger analysis",
            "type": "AzureFunctionActivity",
            "dependsOn": [
              {
                "activity": "CAToLedgerAnalysis",
                "dependencyConditions": [
                  "Failed"
                ]
              }
            ],
            "policy": {
              "timeout": "0.00:10:00",
              "retry": 3,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "functionName": "LogAdfPipelineStatus",
              "method": "POST",
              "headers": {},
              "body": {
                "Activity": "CAToLedgerAnalysis",
                "Status": "Failed",
                "DataFactoryName": "@{pipeline().DataFactory}",
                "PipelineName": "@{pipeline().Pipeline}",
                "TriggeredBy": "@{pipeline().TriggerName}",
                "TriggerTime": "@{pipeline().TriggerTime}"
              }
            },
            "linkedServiceName": {
              "referenceName": "AZlogAdfPipelineFuncLS",
              "type": "LinkedServiceReference"
            }
          },
          {
            "name": "SetIngestionRootPath",
            "description": "Set input root path for control",
            "type": "SetVariable",
            "dependsOn": [
              {
                "activity": "SetBinariesPath",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "userProperties": [],
            "typeProperties": {
              "variableName": "IngestionRootPath",
              "value": {
                "value": "@concat('\"', pipeline().globalParameters.ADLGen2StorageProtocolPrefix,  'transformation@', pipeline().globalParameters.ADLGen2StorageAccountName, pipeline().globalParameters.ADLGen2StoragePathSuffix, '/data/Ingestion\"')",
                "type": "Expression"
              }
            }
          },
          {
            "name": "SetOutputRootPath",
            "description": "set output root path for control",
            "type": "SetVariable",
            "dependsOn": [
              {
                "activity": "SetCommonRootPath",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "userProperties": [],
            "typeProperties": {
              "variableName": "ControlOutputRootPath",
              "value": {
                "value": "@concat('\"', pipeline().globalParameters.ADLGen2StorageProtocolPrefix,  'control@', pipeline().globalParameters.ADLGen2StorageAccountName, pipeline().globalParameters.ADLGen2StoragePathSuffix, '/data/Recon/', variables('ControlName'), '\"')",
                "type": "Expression"
              }
            }
          },
          {
            "name": "SetCommonRootPath",
            "description": "set common root path",
            "type": "SetVariable",
            "dependsOn": [
              {
                "activity": "SetIngestionRootPath",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "userProperties": [],
            "typeProperties": {
              "variableName": "CommonRootPath",
              "value": {
                "value": "@concat('\"', pipeline().globalParameters.ADLGen2StorageProtocolPrefix,  'transformation@', pipeline().globalParameters.ADLGen2StorageAccountName, pipeline().globalParameters.ADLGen2StoragePathSuffix, '/data/Ingestion\"')",
                "type": "Expression"
              }
            }
          },
          {
            "name": "SetBinariesPath",
            "description": "Set path for binary reosurces",
            "type": "SetVariable",
            "dependsOn": [],
            "userProperties": [],
            "typeProperties": {
              "variableName": "BinariesPath",
              "value": {
                "value": "@concat('\"', pipeline().globalParameters.ADLGen2StorageProtocolPrefix, 'resources@', \npipeline().globalParameters.ADLGen2StorageAccountName, pipeline().globalParameters.ADLGen2StoragePathSuffix, '/Binaries/\"')",
                "type": "Expression"
              }
            }
          },
          {
            "name": "SetAnalysisStreamInputPath",
            "description": "Set path for control stream that is input to Analysis script",
            "type": "SetVariable",
            "dependsOn": [
              {
                "activity": "CAToLedgerControl",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "userProperties": [],
            "typeProperties": {
              "variableName": "AnalysisInputStreamPath",
              "value": {
                "value": "@concat('\"', pipeline().globalParameters.ADLGen2StorageProtocolPrefix,  'control@', pipeline().globalParameters.ADLGen2StorageAccountName, pipeline().globalParameters.ADLGen2StoragePathSuffix, '/data/Recon/', variables('ControlName'), '/Latest', variables('ControlName'), 'ReconResults.ss\"')",
                "type": "Expression"
              }
            }
          },
          {
            "name": "SetAnalysisOutputRootPath",
            "type": "SetVariable",
            "dependsOn": [
              {
                "activity": "SetAnalysisStreamInputPath",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "userProperties": [],
            "typeProperties": {
              "variableName": "AnalysisOutputRootPath",
              "value": {
                "value": "@concat('\"', pipeline().globalParameters.ADLGen2StorageProtocolPrefix,  'control@', pipeline().globalParameters.ADLGen2StorageAccountName, pipeline().globalParameters.ADLGen2StoragePathSuffix, '/data/Recon/', variables('ControlName'), '/Analysis\"')",
                "type": "Expression"
              }
            }
          },
          {
            "name": "SetControlLatencyRootPath",
            "description": "Set path for control latency files",
            "type": "SetVariable",
            "dependsOn": [],
            "userProperties": [],
            "typeProperties": {
              "variableName": "ControlLatencyRootPath",
              "value": {
                "value": "@concat('\"', pipeline().globalParameters.ADLGen2StorageProtocolPrefix,  'control@', pipeline().globalParameters.ADLGen2StorageAccountName, pipeline().globalParameters.ADLGen2StoragePathSuffix, '/data/Recon/ControlLatency', '\"')",
                "type": "Expression"
              }
            }
          },
          {
            "name": "LogSOXAnalysisResultsForCAToLedger",
            "description": "Send SOX Analysis results for CA to ledger",
            "type": "AzureFunctionActivity",
            "dependsOn": [
              {
                "activity": "CAToLedgerAnalysis",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "policy": {
              "timeout": "0.00:10:00",
              "retry": 3,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "functionName": "LogReconResult",
              "method": "POST",
              "headers": {},
              "body": {
                "ReconResultUri": "control/data/Recon/CAToLedger/Analysis/SOXAnalysis_CAToLedger.csv"
              }
            },
            "linkedServiceName": {
              "referenceName": "AZLogReconAnalysisLS",
              "type": "LinkedServiceReference"
            }
          },
          {
            "name": "SetDefaultIngestionStartDate",
            "type": "SetVariable",
            "dependsOn": [
              {
                "activity": "SetControlLatencyRootPath",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "userProperties": [],
            "typeProperties": {
              "variableName": "IngestionStartDate",
              "value": {
                "value": "@formatDateTime(addToTime(pipeline().parameters.RunDate, int(pipeline().parameters.ExtractionBackDays),'Day'), 'MM/dd/yyyy')",
                "type": "Expression"
              }
            }
          }
        ],
        "concurrency": 1,
        "parameters": {
          "RunDate": {
            "type": "string",
            "defaultValue": "05/01/2020"
          },
          "ExtractionBackDays": {
            "type": "string",
            "defaultValue": "-4"
          }
        },
        "variables": {
          "ScriptRootPath": {
            "type": "String",
            "defaultValue": "resources/Scripts"
          },
          "IngestionRootPath": {
            "type": "String"
          },
          "CommonRootPath": {
            "type": "String"
          },
          "ControlOutputRootPath": {
            "type": "String"
          },
          "IncludeTest": {
            "type": "String",
            "defaultValue": "[parameters('CAToLedger_properties_variables_IncludeTest_defaultValue')]"
          },
          "ControlName": {
            "type": "String",
            "defaultValue": "CAToLedger"
          },
          "Container": {
            "type": "String",
            "defaultValue": "control"
          },
          "ErrorMessage": {
            "type": "String"
          },
          "BinariesPath": {
            "type": "String"
          },
          "IngestionStartDate": {
            "type": "String"
          },
          "AnalysisInputStreamPath": {
            "type": "String"
          },
          "AnalysisOutputRootPath": {
            "type": "String"
          },
          "ControlLatencyRootPath": {
            "type": "String"
          }
        },
        "folder": {
          "name": "Control"
        },
        "annotations": []
      },
      "dependsOn": [
        "[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorageGen2')]",
        "[concat(variables('factoryId'), '/linkedServices/AzureDataLakeAnalytics')]",
        "[concat(variables('factoryId'), '/linkedServices/AZLogReconAnalysisLS')]",
        "[concat(variables('factoryId'), '/linkedServices/AZlogAdfPipelineFuncLS')]"
      ]
    },
    {
      "name": "[concat(parameters('factoryName'), '/Copy CA Raw Json Data')]",
      "type": "Microsoft.DataFactory/factories/pipelines",
      "apiVersion": "2018-06-01",
      "properties": {
        "description": "Copy job to ingest Charge Aggregator raw data from CA partner data source",
        "activities": [
          {
            "name": "CopyCARawJsonData",
            "type": "Copy",
            "dependsOn": [
              {
                "activity": "Set SourceRootPath variable",
                "dependencyConditions": [
                  "Succeeded"
                ]
              },
              {
                "activity": "Set DestinationRootPath variable",
                "dependencyConditions": [
                  "Succeeded"
                ]
              },
              {
                "activity": "SetMergedFileName",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "policy": {
              "timeout": "0.2:00:00",
              "retry": 3,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "source": {
                "type": "BinarySource",
                "storeSettings": {
                  "type": "AzureBlobStorageReadSettings",
                  "recursive": true,
                  "wildcardFolderPath": {
                    "value": "@variables('SourceRootPath')",
                    "type": "Expression"
                  },
                  "wildcardFileName": "*"
                },
                "formatSettings": {
                  "type": "BinaryReadSettings"
                }
              },
              "sink": {
                "type": "BinarySink",
                "storeSettings": {
                  "type": "AzureBlobFSWriteSettings"
                }
              },
              "enableStaging": false,
              "skipErrorFile": {
                "fileMissing": true,
                "fileForbidden": false
              },
              "validateDataConsistency": false
            },
            "inputs": [
              {
                "referenceName": "CARawDataSet",
                "type": "DatasetReference",
                "parameters": {
                  "container": {
                    "value": "@variables('SourceContainer')",
                    "type": "Expression"
                  }
                }
              }
            ],
            "outputs": [
              {
                "referenceName": "ReconControlSourceRawDataSetGen2",
                "type": "DatasetReference",
                "parameters": {
                  "container": {
                    "value": "@variables('DestContainer')",
                    "type": "Expression"
                  },
                  "path": {
                    "value": "@variables('DestRootPath')",
                    "type": "Expression"
                  }
                }
              }
            ]
          },
          {
            "name": "Set SourceRootPath variable",
            "type": "SetVariable",
            "dependsOn": [],
            "userProperties": [],
            "typeProperties": {
              "variableName": "SourceRootPath",
              "value": {
                "value": "@formatDateTime(pipeline().parameters.WindowStartTime,'yyyy/MM/dd/HH')",
                "type": "Expression"
              }
            }
          },
          {
            "name": "Set DestinationRootPath variable",
            "type": "SetVariable",
            "dependsOn": [],
            "userProperties": [],
            "typeProperties": {
              "variableName": "DestRootPath",
              "value": {
                "value": "@concat('ca-journal/',formatDateTime(pipeline().parameters.WindowStartTime, 'yyyy/MM/dd/HH'))",
                "type": "Expression"
              }
            }
          },
          {
            "name": "Copy CA Data Log Success",
            "description": "Copy CA Data Log Success",
            "type": "AzureFunctionActivity",
            "dependsOn": [
              {
                "activity": "CopyCARawJsonData",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "policy": {
              "timeout": "0.00:10:00",
              "retry": 3,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "functionName": "LogAdfPipelineStatus",
              "method": "POST",
              "headers": {},
              "body": {
                "Activity": "CopyCARawJsonData",
                "Status": "Success",
                "DataFactoryName": "@{pipeline().DataFactory}",
                "PipelineName": "@{pipeline().Pipeline}",
                "TriggeredBy": "@{pipeline().TriggerName}",
                "TriggerTime": "@{pipeline().TriggerTime}"
              }
            },
            "linkedServiceName": {
              "referenceName": "AZlogAdfPipelineFuncLS",
              "type": "LinkedServiceReference"
            }
          },
          {
            "name": "Copy CA Data Log Failure",
            "description": "Copy CA Data Log Failure",
            "type": "AzureFunctionActivity",
            "dependsOn": [
              {
                "activity": "CopyCARawJsonData",
                "dependencyConditions": [
                  "Failed"
                ]
              }
            ],
            "policy": {
              "timeout": "0.00:10:00",
              "retry": 3,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "functionName": "LogAdfPipelineStatus",
              "method": "POST",
              "headers": {},
              "body": {
                "Activity": "CopyCARawJsonData",
                "Status": "Failed",
                "DataFactoryName": "@{pipeline().DataFactory}",
                "PipelineName": "@{pipeline().Pipeline}",
                "TriggeredBy": "@{pipeline().TriggerName}",
                "TriggerTime": "@{pipeline().TriggerTime}"
              }
            },
            "linkedServiceName": {
              "referenceName": "AZlogAdfPipelineFuncLS",
              "type": "LinkedServiceReference"
            }
          },
          {
            "name": "MergeCaJournals",
            "description": "CaJournals",
            "type": "Copy",
            "dependsOn": [
              {
                "activity": "CopyCARawJsonData",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "policy": {
              "timeout": "01:00:00",
              "retry": 3,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "source": {
                "type": "JsonSource",
                "storeSettings": {
                  "type": "AzureBlobFSReadSettings",
                  "recursive": true,
                  "wildcardFolderPath": {
                    "value": "@concat(variables('DestRootPath'),'/**')",
                    "type": "Expression"
                  },
                  "wildcardFileName": {
                    "value": "@pipeline().parameters.SourceFilePattern",
                    "type": "Expression"
                  },
                  "enablePartitionDiscovery": false
                },
                "formatSettings": {
                  "type": "JsonReadSettings"
                }
              },
              "sink": {
                "type": "JsonSink",
                "storeSettings": {
                  "type": "AzureBlobFSWriteSettings",
                  "copyBehavior": "MergeFiles"
                },
                "formatSettings": {
                  "type": "JsonWriteSettings",
                  "filePattern": "setOfObjects"
                }
              },
              "enableStaging": false
            },
            "inputs": [
              {
                "referenceName": "JsonDataSet",
                "type": "DatasetReference",
                "parameters": {
                  "Container": {
                    "value": "@variables('DestContainer')",
                    "type": "Expression"
                  },
                  "Directory": {
                    "value": "@concat(variables('DestRootPath'),'/**')",
                    "type": "Expression"
                  },
                  "File": {
                    "value": "@pipeline().parameters.SourceFilePattern",
                    "type": "Expression"
                  }
                }
              }
            ],
            "outputs": [
              {
                "referenceName": "JsonDataSet",
                "type": "DatasetReference",
                "parameters": {
                  "Container": {
                    "value": "@variables('DestContainer')",
                    "type": "Expression"
                  },
                  "Directory": {
                    "value": "@variables('DestRootPath')",
                    "type": "Expression"
                  },
                  "File": {
                    "value": "@variables('MergedOutputFile')",
                    "type": "Expression"
                  }
                }
              }
            ]
          },
          {
            "name": "Fail-If-Merge-Fails",
            "type": "IfCondition",
            "dependsOn": [
              {
                "activity": "MergeCaJournals",
                "dependencyConditions": [
                  "Failed"
                ]
              }
            ],
            "userProperties": [],
            "typeProperties": {
              "expression": {
                "value": "@startswith(activity('MergeCaJournals').output.errors[0].Message, 'ErrorCode=UserErrorFileNotFound')",
                "type": "Expression"
              },
              "ifFalseActivities": [
                {
                  "name": "Merge CA Journals Summary Data Log Failure",
                  "description": "Merge CA Journals Data Log Failure",
                  "type": "AzureFunctionActivity",
                  "dependsOn": [],
                  "policy": {
                    "timeout": "0.00:10:00",
                    "retry": 3,
                    "retryIntervalInSeconds": 30,
                    "secureOutput": false,
                    "secureInput": false
                  },
                  "userProperties": [],
                  "typeProperties": {
                    "functionName": "LogAdfPipelineStatus",
                    "method": "POST",
                    "headers": {},
                    "body": {
                      "Activity": "MergeCaJournals",
                      "Status": "Failed",
                      "DataFactoryName": "@{pipeline().DataFactory}",
                      "PipelineName": "@{pipeline().Pipeline}",
                      "TriggeredBy": "@{pipeline().TriggerName}",
                      "TriggerTime": "@{pipeline().TriggerTime}",
                      "Error": "@{activity('MergeCaJournals').output.errors[0].Message}"
                    }
                  },
                  "linkedServiceName": {
                    "referenceName": "AZlogAdfPipelineFuncLS",
                    "type": "LinkedServiceReference"
                  }
                }
              ],
              "ifTrueActivities": [
                {
                  "name": "Merge CA Journals Data Log Success with error",
                  "description": "Merge CA Journals",
                  "type": "AzureFunctionActivity",
                  "dependsOn": [],
                  "policy": {
                    "timeout": "0.00:10:00",
                    "retry": 3,
                    "retryIntervalInSeconds": 30,
                    "secureOutput": false,
                    "secureInput": false
                  },
                  "userProperties": [],
                  "typeProperties": {
                    "functionName": "LogAdfPipelineStatus",
                    "method": "POST",
                    "headers": {},
                    "body": {
                      "Activity": "MergeCaJournals",
                      "Status": "Success",
                      "DataFactoryName": "@{pipeline().DataFactory}",
                      "PipelineName": "@{pipeline().Pipeline}",
                      "TriggeredBy": "@{pipeline().TriggerName}",
                      "TriggerTime": "@{pipeline().TriggerTime}",
                      "Error": "@{activity('MergeCaJournals').output.errors[0].Message}"
                    }
                  },
                  "linkedServiceName": {
                    "referenceName": "AZlogAdfPipelineFuncLS",
                    "type": "LinkedServiceReference"
                  }
                }
              ]
            }
          },
          {
            "name": "Merge CA Journals Data Log Success",
            "description": "Merge CA Journals Data Log Success",
            "type": "AzureFunctionActivity",
            "dependsOn": [
              {
                "activity": "MergeCaJournals",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "policy": {
              "timeout": "0.00:10:00",
              "retry": 3,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "functionName": "LogAdfPipelineStatus",
              "method": "POST",
              "headers": {},
              "body": {
                "Activity": "MergeCaJournals",
                "Status": "Success",
                "DataFactoryName": "@{pipeline().DataFactory}",
                "PipelineName": "@{pipeline().Pipeline}",
                "TriggeredBy": "@{pipeline().TriggerName}",
                "TriggerTime": "@{pipeline().TriggerTime}"
              }
            },
            "linkedServiceName": {
              "referenceName": "AZlogAdfPipelineFuncLS",
              "type": "LinkedServiceReference"
            }
          },
          {
            "name": "SetMergedFileName",
            "description": "SetMergedFileName",
            "type": "SetVariable",
            "dependsOn": [],
            "userProperties": [],
            "typeProperties": {
              "variableName": "MergedOutputFile",
              "value": {
                "value": "@concat(formatDateTime(pipeline().parameters.WindowStartTime, 'yyyyMMddHH'),'.txt')",
                "type": "Expression"
              }
            }
          },
          {
            "name": "Execute CA Stream Validation",
            "type": "ExecutePipeline",
            "dependsOn": [
              {
                "activity": "MergeCaJournals",
                "dependencyConditions": [
                  "Completed"
                ]
              }
            ],
            "userProperties": [],
            "typeProperties": {
              "pipeline": {
                "referenceName": "MonitorJsonStream",
                "type": "PipelineReference"
              },
              "waitOnCompletion": true,
              "parameters": {
                "Container": {
                  "value": "@variables('DestContainer')",
                  "type": "Expression"
                },
                "Directory": {
                  "value": "@variables('DestRootPath')",
                  "type": "Expression"
                },
                "File": {
                  "value": "@variables('MergedOutputFile')",
                  "type": "Expression"
                },
                "MinimumRowCount": "1",
                "Control": "Control Related To Charge Aggregator",
                "PipelineName": {
                  "value": "@pipeline().Pipeline",
                  "type": "Expression"
                },
                "Activity": "Copy Charge Aggregator"
              }
            }
          },
          {
            "name": "Execute CA Stream Validation In case of Copy Failure",
            "type": "ExecutePipeline",
            "dependsOn": [
              {
                "activity": "CopyCARawJsonData",
                "dependencyConditions": [
                  "Failed"
                ]
              }
            ],
            "userProperties": [],
            "typeProperties": {
              "pipeline": {
                "referenceName": "MonitorJsonStream",
                "type": "PipelineReference"
              },
              "waitOnCompletion": true,
              "parameters": {
                "Container": {
                  "value": "@variables('DestContainer')",
                  "type": "Expression"
                },
                "Directory": {
                  "value": "@variables('DestRootPath')",
                  "type": "Expression"
                },
                "File": {
                  "value": "@variables('MergedOutputFile')",
                  "type": "Expression"
                },
                "MinimumRowCount": "1",
                "Control": "Control Related To Charge Aggregator",
                "PipelineName": {
                  "value": "@pipeline().Pipeline",
                  "type": "Expression"
                },
                "Activity": "Copy Charge Aggregator"
              }
            }
          }
        ],
        "parameters": {
          "WindowStartTime": {
            "type": "string",
            "defaultValue": "2020-08-12T00:00:00"
          },
          "SourceFilePattern": {
            "type": "string",
            "defaultValue": "*"
          }
        },
        "variables": {
          "SourceRootPath": {
            "type": "String",
            "defaultValue": "2020/05/01/00"
          },
          "SourceContainer": {
            "type": "String",
            "defaultValue": "[parameters('Copy CA Raw Json Data_properties_variables_SourceContainer_defaultValue')]"
          },
          "DestRootPath": {
            "type": "String"
          },
          "DestContainer": {
            "type": "String",
            "defaultValue": "chargeaggregator"
          },
          "MergedOutputFile": {
            "type": "String"
          }
        },
        "folder": {
          "name": "Copy"
        },
        "annotations": []
      },
      "dependsOn": [
        "[concat(variables('factoryId'), '/datasets/CARawDataSet')]",
        "[concat(variables('factoryId'), '/datasets/ReconControlSourceRawDataSetGen2')]",
        "[concat(variables('factoryId'), '/linkedServices/AZlogAdfPipelineFuncLS')]",
        "[concat(variables('factoryId'), '/datasets/JsonDataSet')]",
        "[concat(variables('factoryId'), '/pipelines/MonitorJsonStream')]"
      ]
    },
    {
      "name": "[concat(parameters('factoryName'), '/Copy Crusher Billed-Ledger Data')]",
      "type": "Microsoft.DataFactory/factories/pipelines",
      "apiVersion": "2018-06-01",
      "properties": {
        "description": "Copy-Crusher-Billed-Xml-Data",
        "activities": [
          {
            "name": "CopyCrusherBilledLedgerData",
            "type": "Copy",
            "dependsOn": [],
            "policy": {
              "timeout": "0.02:00:00",
              "retry": 3,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "source": {
                "type": "BinarySource",
                "storeSettings": {
                  "type": "AzureBlobStorageReadSettings",
                  "recursive": true
                },
                "formatSettings": {
                  "type": "BinaryReadSettings"
                }
              },
              "sink": {
                "type": "BinarySink",
                "storeSettings": {
                  "type": "AzureBlobFSWriteSettings"
                }
              },
              "enableStaging": false,
              "skipErrorFile": {
                "fileMissing": true,
                "fileForbidden": false
              },
              "validateDataConsistency": false
            },
            "inputs": [
              {
                "referenceName": "CrusherBilledDataSet",
                "type": "DatasetReference",
                "parameters": {
                  "container": {
                    "value": "@variables('SourceContainer')",
                    "type": "Expression"
                  }
                }
              }
            ],
            "outputs": [
              {
                "referenceName": "ReconControlSourceRawDataSetGen2",
                "type": "DatasetReference",
                "parameters": {
                  "container": {
                    "value": "@variables('DestCrusherContainer')",
                    "type": "Expression"
                  },
                  "path": {
                    "value": "@variables('DestRootPath')",
                    "type": "Expression"
                  }
                }
              }
            ]
          },
          {
            "name": "Copy Crusher Billed Ledger Data Log Success",
            "description": "Copy Crusher Billed Ledger Data Log Success",
            "type": "AzureFunctionActivity",
            "dependsOn": [
              {
                "activity": "CopyCrusherBilledLedgerData",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "policy": {
              "timeout": "0.00:10:00",
              "retry": 3,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "functionName": "LogAdfPipelineStatus",
              "method": "POST",
              "headers": {},
              "body": {
                "Activity": "CopyCrusherBilledLedgerData",
                "Status": "Success",
                "DataFactoryName": "@{pipeline().DataFactory}",
                "PipelineName": "@{pipeline().Pipeline}",
                "TriggeredBy": "@{pipeline().TriggerName}",
                "TriggerTime": "@{pipeline().TriggerTime}"
              }
            },
            "linkedServiceName": {
              "referenceName": "AZlogAdfPipelineFuncLS",
              "type": "LinkedServiceReference"
            }
          },
          {
            "name": "Copy Crusher Billed Ledger Data Log Failure",
            "description": "Copy Crusher Billed Ledger Data Log Failure",
            "type": "AzureFunctionActivity",
            "dependsOn": [
              {
                "activity": "CopyCrusherBilledLedgerData",
                "dependencyConditions": [
                  "Failed"
                ]
              }
            ],
            "policy": {
              "timeout": "0.00:10:00",
              "retry": 3,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "functionName": "LogAdfPipelineStatus",
              "method": "POST",
              "headers": {},
              "body": {
                "Activity": "CopyCrusherBilledLedgerData",
                "Status": "Failed",
                "DataFactoryName": "@{pipeline().DataFactory}",
                "PipelineName": "@{pipeline().Pipeline}",
                "TriggeredBy": "@{pipeline().TriggerName}",
                "TriggerTime": "@{pipeline().TriggerTime}"
              }
            },
            "linkedServiceName": {
              "referenceName": "AZlogAdfPipelineFuncLS",
              "type": "LinkedServiceReference"
            }
          }
        ],
        "parameters": {
          "WindowStartTime": {
            "type": "string",
            "defaultValue": "5/1/2020 12:00:00 AM"
          }
        },
        "variables": {
          "SourceContainer": {
            "type": "String",
            "defaultValue": "[parameters('Copy Crusher Billed-Ledger Data_properties_variables_SourceContainer_defaultValue')]"
          },
          "DestRootPath": {
            "type": "String",
            "defaultValue": "billed"
          },
          "DestCrusherContainer": {
            "type": "String",
            "defaultValue": "crusher"
          }
        },
        "folder": {
          "name": "Copy"
        },
        "annotations": []
      },
      "dependsOn": [
        "[concat(variables('factoryId'), '/datasets/CrusherBilledDataSet')]",
        "[concat(variables('factoryId'), '/datasets/ReconControlSourceRawDataSetGen2')]",
        "[concat(variables('factoryId'), '/linkedServices/AZlogAdfPipelineFuncLS')]"
      ]
    },
    {
      "name": "[concat(parameters('factoryName'), '/Copy Crusher Invoice Data')]",
      "type": "Microsoft.DataFactory/factories/pipelines",
      "apiVersion": "2018-06-01",
      "properties": {
        "description": "Copy Crusher Invoice Xml Data",
        "activities": [
          {
            "name": "CopyCrusherInvoiceData",
            "type": "Copy",
            "dependsOn": [],
            "policy": {
              "timeout": "0.02:00:00",
              "retry": 3,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "source": {
                "type": "BinarySource",
                "storeSettings": {
                  "type": "AzureBlobStorageReadSettings",
                  "recursive": true
                },
                "formatSettings": {
                  "type": "BinaryReadSettings"
                }
              },
              "sink": {
                "type": "BinarySink",
                "storeSettings": {
                  "type": "AzureBlobFSWriteSettings"
                }
              },
              "enableStaging": false,
              "skipErrorFile": {
                "fileMissing": true,
                "fileForbidden": false
              },
              "validateDataConsistency": false
            },
            "inputs": [
              {
                "referenceName": "CrusherInvoiceDataSet",
                "type": "DatasetReference",
                "parameters": {
                  "container": {
                    "value": "@variables('SourceContainer')",
                    "type": "Expression"
                  }
                }
              }
            ],
            "outputs": [
              {
                "referenceName": "ReconControlSourceRawDataSetGen2",
                "type": "DatasetReference",
                "parameters": {
                  "container": {
                    "value": "@variables('DestCrusherContainer')",
                    "type": "Expression"
                  },
                  "path": {
                    "value": "@variables('DestRootPath')",
                    "type": "Expression"
                  }
                }
              }
            ]
          },
          {
            "name": "Copy Crusher Invoice Data Log Success",
            "description": "Copy Crusher Invoice Data Log Success",
            "type": "AzureFunctionActivity",
            "dependsOn": [
              {
                "activity": "CopyCrusherInvoiceData",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "policy": {
              "timeout": "0.00:10:00",
              "retry": 3,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "functionName": "LogAdfPipelineStatus",
              "method": "POST",
              "headers": {},
              "body": {
                "Activity": "CopyCrusherInvoiceData",
                "Status": "Success",
                "DataFactoryName": "@{pipeline().DataFactory}",
                "PipelineName": "@{pipeline().Pipeline}",
                "TriggeredBy": "@{pipeline().TriggerName}",
                "TriggerTime": "@{pipeline().TriggerTime}"
              }
            },
            "linkedServiceName": {
              "referenceName": "AZlogAdfPipelineFuncLS",
              "type": "LinkedServiceReference"
            }
          },
          {
            "name": "Copy Crusher Billed Ledger Data Log Failure",
            "description": "Copy Crusher Billed Ledger Data Log Failure",
            "type": "AzureFunctionActivity",
            "dependsOn": [
              {
                "activity": "CopyCrusherInvoiceData",
                "dependencyConditions": [
                  "Failed"
                ]
              }
            ],
            "policy": {
              "timeout": "0.00:10:00",
              "retry": 3,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "functionName": "LogAdfPipelineStatus",
              "method": "POST",
              "headers": {},
              "body": {
                "Activity": "CopyCrusherInvoiceData",
                "Status": "Failed",
                "DataFactoryName": "@{pipeline().DataFactory}",
                "PipelineName": "@{pipeline().Pipeline}",
                "TriggeredBy": "@{pipeline().TriggerName}",
                "TriggerTime": "@{pipeline().TriggerTime}"
              }
            },
            "linkedServiceName": {
              "referenceName": "AZlogAdfPipelineFuncLS",
              "type": "LinkedServiceReference"
            }
          }
        ],
        "parameters": {
          "WindowStartTime": {
            "type": "string",
            "defaultValue": "5/1/2020 12:00:00 AM"
          }
        },
        "variables": {
          "SourceContainer": {
            "type": "String",
            "defaultValue": "[parameters('Copy Crusher Invoice Data_properties_variables_SourceContainer_defaultValue')]"
          },
          "DestRootPath": {
            "type": "String",
            "defaultValue": "invoicing"
          },
          "DestCrusherContainer": {
            "type": "String",
            "defaultValue": "crusher"
          }
        },
        "folder": {
          "name": "Copy"
        },
        "annotations": []
      },
      "dependsOn": [
        "[concat(variables('factoryId'), '/datasets/CrusherInvoiceDataSet')]",
        "[concat(variables('factoryId'), '/datasets/ReconControlSourceRawDataSetGen2')]",
        "[concat(variables('factoryId'), '/linkedServices/AZlogAdfPipelineFuncLS')]"
      ]
    },
    {
      "name": "[concat(parameters('factoryName'), '/Copy Crusher UnBilled-Ledger Data')]",
      "type": "Microsoft.DataFactory/factories/pipelines",
      "apiVersion": "2018-06-01",
      "properties": {
        "description": "Copy-Crusher-UnBilled-Xml-Data",
        "activities": [
          {
            "name": "CopyCrusherUnBilledLedgerData",
            "type": "Copy",
            "dependsOn": [],
            "policy": {
              "timeout": "0.02:00:00",
              "retry": 3,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "source": {
                "type": "BinarySource",
                "storeSettings": {
                  "type": "AzureBlobStorageReadSettings",
                  "recursive": true
                },
                "formatSettings": {
                  "type": "BinaryReadSettings"
                }
              },
              "sink": {
                "type": "BinarySink",
                "storeSettings": {
                  "type": "AzureBlobFSWriteSettings"
                }
              },
              "enableStaging": false,
              "skipErrorFile": {
                "fileMissing": true,
                "fileForbidden": false
              },
              "validateDataConsistency": false
            },
            "inputs": [
              {
                "referenceName": "CrusherUnBilledDataSet",
                "type": "DatasetReference",
                "parameters": {
                  "container": {
                    "value": "@variables('SourceContainer')",
                    "type": "Expression"
                  }
                }
              }
            ],
            "outputs": [
              {
                "referenceName": "ReconControlSourceRawDataSetGen2",
                "type": "DatasetReference",
                "parameters": {
                  "container": {
                    "value": "@variables('DestCrusherContainer')",
                    "type": "Expression"
                  },
                  "path": {
                    "value": "@variables('DestRootPath')",
                    "type": "Expression"
                  }
                }
              }
            ]
          },
          {
            "name": "Copy Crusher UnBilled Ledger Data Log Success",
            "description": "Copy Crusher UnBilled Ledger Data Log Success",
            "type": "AzureFunctionActivity",
            "dependsOn": [
              {
                "activity": "CopyCrusherUnBilledLedgerData",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "policy": {
              "timeout": "0.00:10:00",
              "retry": 3,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "functionName": "LogAdfPipelineStatus",
              "method": "POST",
              "headers": {},
              "body": {
                "Activity": "CopyCrusherUnBilledLedgerData",
                "Status": "Success",
                "DataFactoryName": "@{pipeline().DataFactory}",
                "PipelineName": "@{pipeline().Pipeline}",
                "TriggeredBy": "@{pipeline().TriggerName}",
                "TriggerTime": "@{pipeline().TriggerTime}"
              }
            },
            "linkedServiceName": {
              "referenceName": "AZlogAdfPipelineFuncLS",
              "type": "LinkedServiceReference"
            }
          },
          {
            "name": "Copy Crusher UnBilled Ledger Data Log Failure",
            "description": "Copy Crusher UnBilled Ledger Data Log Failure",
            "type": "AzureFunctionActivity",
            "dependsOn": [
              {
                "activity": "CopyCrusherUnBilledLedgerData",
                "dependencyConditions": [
                  "Failed"
                ]
              }
            ],
            "policy": {
              "timeout": "0.00:10:00",
              "retry": 3,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "functionName": "LogAdfPipelineStatus",
              "method": "POST",
              "headers": {},
              "body": {
                "Activity": "CopyCrusherUnBilledLedgerData",
                "Status": "Failed",
                "DataFactoryName": "@{pipeline().DataFactory}",
                "PipelineName": "@{pipeline().Pipeline}",
                "TriggeredBy": "@{pipeline().TriggerName}",
                "TriggerTime": "@{pipeline().TriggerTime}"
              }
            },
            "linkedServiceName": {
              "referenceName": "AZlogAdfPipelineFuncLS",
              "type": "LinkedServiceReference"
            }
          }
        ],
        "parameters": {
          "WindowStartTime": {
            "type": "string",
            "defaultValue": "8/1/2020 12:00:00 AM"
          }
        },
        "variables": {
          "SourceContainer": {
            "type": "String",
            "defaultValue": "[parameters('Copy Crusher UnBilled-Ledger Data_properties_variables_SourceContainer_defaultValue')]"
          },
          "DestRootPath": {
            "type": "String",
            "defaultValue": "unbilled"
          },
          "DestCrusherContainer": {
            "type": "String",
            "defaultValue": "crusher"
          }
        },
        "folder": {
          "name": "Copy"
        },
        "annotations": []
      },
      "dependsOn": [
        "[concat(variables('factoryId'), '/datasets/CrusherUnBilledDataSet')]",
        "[concat(variables('factoryId'), '/datasets/ReconControlSourceRawDataSetGen2')]",
        "[concat(variables('factoryId'), '/linkedServices/AZlogAdfPipelineFuncLS')]"
      ]
    },
    {
      "name": "[concat(parameters('factoryName'), '/Copy Invoice Document Details Raw Json Data')]",
      "type": "Microsoft.DataFactory/factories/pipelines",
      "apiVersion": "2018-06-01",
      "properties": {
        "description": "Pipeline to copy Invoice Details data from Invoice source Data location to ReconControl Storage Account",
        "activities": [
          {
            "name": "CopyInvoiceLineItemsData",
            "description": "Copy job to copy Invoice Line Items Data from Invoice storage Blob to ReconControl Storage Blob container",
            "type": "Copy",
            "dependsOn": [
              {
                "activity": "Set SourceRootPath-InvoiceLineItemDetails variable",
                "dependencyConditions": [
                  "Succeeded"
                ]
              },
              {
                "activity": "Set DestinationRootPath-InvoiceLineItemDetails variable",
                "dependencyConditions": [
                  "Succeeded"
                ]
              },
              {
                "activity": "SetMergedFileName",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "policy": {
              "timeout": "0.02:00:00",
              "retry": 3,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "source": {
                "type": "BinarySource",
                "storeSettings": {
                  "type": "AzureBlobStorageReadSettings",
                  "recursive": true,
                  "wildcardFolderPath": {
                    "value": "@variables('SourceRootPath')",
                    "type": "Expression"
                  }
                },
                "formatSettings": {
                  "type": "BinaryReadSettings"
                }
              },
              "sink": {
                "type": "BinarySink",
                "storeSettings": {
                  "type": "AzureBlobFSWriteSettings"
                }
              },
              "enableStaging": false,
              "skipErrorFile": {
                "fileMissing": true,
                "fileForbidden": false
              },
              "validateDataConsistency": false
            },
            "inputs": [
              {
                "referenceName": "InvoiceLineItemDetailsRawDataSet",
                "type": "DatasetReference",
                "parameters": {
                  "container": {
                    "value": "@variables('SourceContainer')",
                    "type": "Expression"
                  }
                }
              }
            ],
            "outputs": [
              {
                "referenceName": "ReconControlSourceRawDataSetGen2",
                "type": "DatasetReference",
                "parameters": {
                  "container": {
                    "value": "@variables('DestContainer')",
                    "type": "Expression"
                  },
                  "path": {
                    "value": "@variables('DestRootPath')",
                    "type": "Expression"
                  }
                }
              }
            ]
          },
          {
            "name": "Set SourceRootPath-InvoiceLineItemDetails variable",
            "type": "SetVariable",
            "dependsOn": [],
            "userProperties": [],
            "typeProperties": {
              "variableName": "SourceRootPath",
              "value": {
                "value": "@formatDateTime(pipeline().parameters.WindowStartTime,'yyyy/MM/dd/HH')",
                "type": "Expression"
              }
            }
          },
          {
            "name": "Set DestinationRootPath-InvoiceLineItemDetails variable",
            "type": "SetVariable",
            "dependsOn": [],
            "userProperties": [],
            "typeProperties": {
              "variableName": "DestRootPath",
              "value": {
                "value": "@concat('document-details-journal/',formatDateTime(pipeline().parameters.WindowStartTime, 'yyyy/MM/dd/HH'))",
                "type": "Expression"
              }
            }
          },
          {
            "name": "CopyInvoiceLine Items Data Log Success",
            "description": "Copy Invoice Line Items Data Log Success",
            "type": "AzureFunctionActivity",
            "dependsOn": [
              {
                "activity": "CopyInvoiceLineItemsData",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "policy": {
              "timeout": "0.00:10:00",
              "retry": 3,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "functionName": "LogAdfPipelineStatus",
              "method": "POST",
              "headers": {},
              "body": {
                "Activity": "CopyInvoiceLineItemsData",
                "Status": "Success",
                "DataFactoryName": "@{pipeline().DataFactory}",
                "PipelineName": "@{pipeline().Pipeline}",
                "TriggeredBy": "@{pipeline().TriggerName}",
                "TriggerTime": "@{pipeline().TriggerTime}"
              }
            },
            "linkedServiceName": {
              "referenceName": "AZlogAdfPipelineFuncLS",
              "type": "LinkedServiceReference"
            }
          },
          {
            "name": "Copy Invoice Line Items Data Log Failure",
            "description": "Copy Invoice Line Items Data Log Failure",
            "type": "AzureFunctionActivity",
            "dependsOn": [
              {
                "activity": "CopyInvoiceLineItemsData",
                "dependencyConditions": [
                  "Failed"
                ]
              }
            ],
            "policy": {
              "timeout": "0.00:10:00",
              "retry": 3,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "functionName": "LogAdfPipelineStatus",
              "method": "POST",
              "headers": {},
              "body": {
                "Activity": "CopyInvoiceLineItemsData",
                "Status": "Failed",
                "DataFactoryName": "@{pipeline().DataFactory}",
                "PipelineName": "@{pipeline().Pipeline}",
                "TriggeredBy": "@{pipeline().TriggerName}",
                "TriggerTime": "@{pipeline().TriggerTime}"
              }
            },
            "linkedServiceName": {
              "referenceName": "AZlogAdfPipelineFuncLS",
              "type": "LinkedServiceReference"
            }
          },
          {
            "name": "SetMergedFileName",
            "description": "SetMergedFileName",
            "type": "SetVariable",
            "dependsOn": [],
            "userProperties": [],
            "typeProperties": {
              "variableName": "MergedOutputFile",
              "value": {
                "value": "@concat(formatDateTime(pipeline().parameters.WindowStartTime, 'yyyyMMddHH'),'.txt')",
                "type": "Expression"
              }
            }
          },
          {
            "name": "MergeDocumentDetailsJson",
            "description": "Merge Document Details Json",
            "type": "Copy",
            "dependsOn": [
              {
                "activity": "CopyInvoiceLineItemsData",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "policy": {
              "timeout": "01:00:00",
              "retry": 3,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "source": {
                "type": "JsonSource",
                "storeSettings": {
                  "type": "AzureBlobFSReadSettings",
                  "recursive": true,
                  "wildcardFolderPath": {
                    "value": "@concat(variables('DestRootPath'),'/**')",
                    "type": "Expression"
                  },
                  "wildcardFileName": {
                    "value": "@pipeline().parameters.SourceFilePattern",
                    "type": "Expression"
                  },
                  "enablePartitionDiscovery": false
                },
                "formatSettings": {
                  "type": "JsonReadSettings"
                }
              },
              "sink": {
                "type": "JsonSink",
                "storeSettings": {
                  "type": "AzureBlobFSWriteSettings",
                  "copyBehavior": "MergeFiles"
                },
                "formatSettings": {
                  "type": "JsonWriteSettings",
                  "filePattern": "setOfObjects"
                }
              },
              "enableStaging": false
            },
            "inputs": [
              {
                "referenceName": "JsonDataSet",
                "type": "DatasetReference",
                "parameters": {
                  "Container": {
                    "value": "@variables('DestContainer')",
                    "type": "Expression"
                  },
                  "Directory": {
                    "value": "@concat(variables('DestRootPath'),'/**')",
                    "type": "Expression"
                  },
                  "File": {
                    "value": "@pipeline().parameters.SourceFilePattern",
                    "type": "Expression"
                  }
                }
              }
            ],
            "outputs": [
              {
                "referenceName": "JsonDataSet",
                "type": "DatasetReference",
                "parameters": {
                  "Container": {
                    "value": "@variables('DestContainer')",
                    "type": "Expression"
                  },
                  "Directory": {
                    "value": "@variables('DestRootPath')",
                    "type": "Expression"
                  },
                  "File": {
                    "value": "@variables('MergedOutputFile')",
                    "type": "Expression"
                  }
                }
              }
            ]
          },
          {
            "name": "Merge Document Details Data Log Success",
            "description": "Merge Invoice Details Data Log Success",
            "type": "AzureFunctionActivity",
            "dependsOn": [
              {
                "activity": "MergeDocumentDetailsJson",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "policy": {
              "timeout": "0.00:10:00",
              "retry": 3,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "functionName": "LogAdfPipelineStatus",
              "method": "POST",
              "headers": {},
              "body": {
                "Activity": "MergeDocumentDetailsJson",
                "Status": "Success",
                "DataFactoryName": "@{pipeline().DataFactory}",
                "PipelineName": "@{pipeline().Pipeline}",
                "TriggeredBy": "@{pipeline().TriggerName}",
                "TriggerTime": "@{pipeline().TriggerTime}"
              }
            },
            "linkedServiceName": {
              "referenceName": "AZlogAdfPipelineFuncLS",
              "type": "LinkedServiceReference"
            }
          },
          {
            "name": "Fail-If-Merge-Fails",
            "type": "IfCondition",
            "dependsOn": [
              {
                "activity": "MergeDocumentDetailsJson",
                "dependencyConditions": [
                  "Failed"
                ]
              }
            ],
            "userProperties": [],
            "typeProperties": {
              "expression": {
                "value": "@startswith(activity('MergeDocumentDetailsJson').output.errors[0].Message, 'ErrorCode=UserErrorFileNotFound')",
                "type": "Expression"
              },
              "ifFalseActivities": [
                {
                  "name": "Merge Document Details  Data Log Failure",
                  "description": "Merge Document  Details Data Log Failure",
                  "type": "AzureFunctionActivity",
                  "dependsOn": [],
                  "policy": {
                    "timeout": "0.00:10:00",
                    "retry": 3,
                    "retryIntervalInSeconds": 30,
                    "secureOutput": false,
                    "secureInput": false
                  },
                  "userProperties": [],
                  "typeProperties": {
                    "functionName": "LogAdfPipelineStatus",
                    "method": "POST",
                    "headers": {},
                    "body": {
                      "Activity": "MergeDocumentSummaryData",
                      "Status": "Failed",
                      "DataFactoryName": "@{pipeline().DataFactory}",
                      "PipelineName": "@{pipeline().Pipeline}",
                      "TriggeredBy": "@{pipeline().TriggerName}",
                      "TriggerTime": "@{pipeline().TriggerTime}",
                      "Error": "@{activity('MergeDocumentDetailsJson').output.errors[0].Message}"
                    }
                  },
                  "linkedServiceName": {
                    "referenceName": "AZlogAdfPipelineFuncLS",
                    "type": "LinkedServiceReference"
                  }
                }
              ],
              "ifTrueActivities": [
                {
                  "name": "Merge Document Details Data Log Success with error",
                  "description": "Merge Document Details Data Log Success",
                  "type": "AzureFunctionActivity",
                  "dependsOn": [],
                  "policy": {
                    "timeout": "0.00:10:00",
                    "retry": 3,
                    "retryIntervalInSeconds": 30,
                    "secureOutput": false,
                    "secureInput": false
                  },
                  "userProperties": [],
                  "typeProperties": {
                    "functionName": "LogAdfPipelineStatus",
                    "method": "POST",
                    "headers": {},
                    "body": {
                      "Activity": "MergeDocumentSummaryData",
                      "Status": "Success",
                      "DataFactoryName": "@{pipeline().DataFactory}",
                      "PipelineName": "@{pipeline().Pipeline}",
                      "TriggeredBy": "@{pipeline().TriggerName}",
                      "TriggerTime": "@{pipeline().TriggerTime}",
                      "Error": "@{activity('MergeDocumentDetailsJson').output.errors[0].Message}"
                    }
                  },
                  "linkedServiceName": {
                    "referenceName": "AZlogAdfPipelineFuncLS",
                    "type": "LinkedServiceReference"
                  }
                }
              ]
            }
          }
        ],
        "parameters": {
          "WindowStartTime": {
            "type": "string",
            "defaultValue": "2020-08-13T01:00:00"
          },
          "SourceFilePattern": {
            "type": "string",
            "defaultValue": "*"
          }
        },
        "variables": {
          "SourceRootPath": {
            "type": "String"
          },
          "DestRootPath": {
            "type": "String"
          },
          "SourceContainer": {
            "type": "String",
            "defaultValue": "[parameters('Copy Invoice Document Details Raw Json Data_properties_variables_SourceContainer_defaultValue')]"
          },
          "DestContainer": {
            "type": "String",
            "defaultValue": "invoice-lineitemdetails"
          },
          "MergedOutputFile": {
            "type": "String"
          }
        },
        "folder": {
          "name": "Copy"
        },
        "annotations": []
      },
      "dependsOn": [
        "[concat(variables('factoryId'), '/datasets/InvoiceLineItemDetailsRawDataSet')]",
        "[concat(variables('factoryId'), '/datasets/ReconControlSourceRawDataSetGen2')]",
        "[concat(variables('factoryId'), '/linkedServices/AZlogAdfPipelineFuncLS')]",
        "[concat(variables('factoryId'), '/datasets/JsonDataSet')]"
      ]
    },
    {
      "name": "[concat(parameters('factoryName'), '/Copy Invoice Summary Raw Json Data')]",
      "type": "Microsoft.DataFactory/factories/pipelines",
      "apiVersion": "2018-06-01",
      "properties": {
        "description": "Pipeline to copy Invoice summary from Invoice source Data location to ReconControl Storage Account",
        "activities": [
          {
            "name": "CopyInvoiceSummaryData",
            "description": "Copy job to copy Invoice Summary Data from Invoice storage Blob to ReconControl Storage Blob container",
            "type": "Copy",
            "dependsOn": [
              {
                "activity": "Set SourceRootPath-InvoiceSummary variable",
                "dependencyConditions": [
                  "Succeeded"
                ]
              },
              {
                "activity": "Set DestinationRootPath-InvoiceSummary variable",
                "dependencyConditions": [
                  "Succeeded"
                ]
              },
              {
                "activity": "SetMergedFileName",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "policy": {
              "timeout": "0.02:00:00",
              "retry": 3,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "source": {
                "type": "BinarySource",
                "storeSettings": {
                  "type": "AzureBlobStorageReadSettings",
                  "recursive": true,
                  "wildcardFolderPath": {
                    "value": "@variables('SourceRootPath')",
                    "type": "Expression"
                  }
                },
                "formatSettings": {
                  "type": "BinaryReadSettings"
                }
              },
              "sink": {
                "type": "BinarySink",
                "storeSettings": {
                  "type": "AzureBlobFSWriteSettings"
                }
              },
              "enableStaging": false,
              "skipErrorFile": {
                "fileMissing": true,
                "fileForbidden": false
              },
              "validateDataConsistency": false
            },
            "inputs": [
              {
                "referenceName": "InvoiceDocumentSummaryRawDataSet",
                "type": "DatasetReference",
                "parameters": {
                  "container": {
                    "value": "@variables('SourceContainer')",
                    "type": "Expression"
                  }
                }
              }
            ],
            "outputs": [
              {
                "referenceName": "ReconControlSourceRawDataSetGen2",
                "type": "DatasetReference",
                "parameters": {
                  "container": {
                    "value": "@variables('DestContainer')",
                    "type": "Expression"
                  },
                  "path": {
                    "value": "@variables('DestRootPath')",
                    "type": "Expression"
                  }
                }
              }
            ]
          },
          {
            "name": "Set SourceRootPath-InvoiceSummary variable",
            "type": "SetVariable",
            "dependsOn": [],
            "userProperties": [],
            "typeProperties": {
              "variableName": "SourceRootPath",
              "value": {
                "value": "@formatDateTime(pipeline().parameters.WindowStartTime,'yyyy/MM/dd/HH')",
                "type": "Expression"
              }
            }
          },
          {
            "name": "Set DestinationRootPath-InvoiceSummary variable",
            "type": "SetVariable",
            "dependsOn": [],
            "userProperties": [],
            "typeProperties": {
              "variableName": "DestRootPath",
              "value": {
                "value": "@concat('document-summary-journal/',formatDateTime(pipeline().parameters.WindowStartTime, 'yyyy/MM/dd/HH'))",
                "type": "Expression"
              }
            }
          },
          {
            "name": "Copy Invoice Summary Data Log Success",
            "description": "Copy Invoice Summary Data Log Success",
            "type": "AzureFunctionActivity",
            "dependsOn": [
              {
                "activity": "CopyInvoiceSummaryData",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "policy": {
              "timeout": "0.00:10:00",
              "retry": 3,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "functionName": "LogAdfPipelineStatus",
              "method": "POST",
              "headers": {},
              "body": {
                "Activity": "CopyInvoiceSummaryData",
                "Status": "Success",
                "DataFactoryName": "@{pipeline().DataFactory}",
                "PipelineName": "@{pipeline().Pipeline}",
                "TriggeredBy": "@{pipeline().TriggerName}",
                "TriggerTime": "@{pipeline().TriggerTime}"
              }
            },
            "linkedServiceName": {
              "referenceName": "AZlogAdfPipelineFuncLS",
              "type": "LinkedServiceReference"
            }
          },
          {
            "name": "Copy Invoice Summary Data Log Failure",
            "description": "Copy Invoice Summary Data Log Failure",
            "type": "AzureFunctionActivity",
            "dependsOn": [
              {
                "activity": "CopyInvoiceSummaryData",
                "dependencyConditions": [
                  "Failed"
                ]
              }
            ],
            "policy": {
              "timeout": "0.00:10:00",
              "retry": 3,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "functionName": "LogAdfPipelineStatus",
              "method": "POST",
              "headers": {},
              "body": {
                "Activity": "CopyInvoiceSummaryData",
                "Status": "Failed",
                "DataFactoryName": "@{pipeline().DataFactory}",
                "PipelineName": "@{pipeline().Pipeline}",
                "TriggeredBy": "@{pipeline().TriggerName}",
                "TriggerTime": "@{pipeline().TriggerTime}"
              }
            },
            "linkedServiceName": {
              "referenceName": "AZlogAdfPipelineFuncLS",
              "type": "LinkedServiceReference"
            }
          },
          {
            "name": "MergeDocumentSummaryJson",
            "description": "Merge Document Summary Json",
            "type": "Copy",
            "dependsOn": [
              {
                "activity": "CopyInvoiceSummaryData",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "policy": {
              "timeout": "01:00:00",
              "retry": 3,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "source": {
                "type": "JsonSource",
                "storeSettings": {
                  "type": "AzureBlobFSReadSettings",
                  "recursive": true,
                  "wildcardFolderPath": {
                    "value": "@concat(variables('DestRootPath'),'/**')",
                    "type": "Expression"
                  },
                  "wildcardFileName": {
                    "value": "@pipeline().parameters.SourceFilePattern",
                    "type": "Expression"
                  },
                  "enablePartitionDiscovery": false
                },
                "formatSettings": {
                  "type": "JsonReadSettings"
                }
              },
              "sink": {
                "type": "JsonSink",
                "storeSettings": {
                  "type": "AzureBlobFSWriteSettings",
                  "copyBehavior": "MergeFiles"
                },
                "formatSettings": {
                  "type": "JsonWriteSettings",
                  "filePattern": "setOfObjects"
                }
              },
              "enableStaging": false
            },
            "inputs": [
              {
                "referenceName": "JsonDataSet",
                "type": "DatasetReference",
                "parameters": {
                  "Container": {
                    "value": "@variables('DestContainer')",
                    "type": "Expression"
                  },
                  "Directory": {
                    "value": "@concat(variables('DestRootPath'),'/**')",
                    "type": "Expression"
                  },
                  "File": {
                    "value": "@pipeline().parameters.SourceFilePattern",
                    "type": "Expression"
                  }
                }
              }
            ],
            "outputs": [
              {
                "referenceName": "JsonDataSet",
                "type": "DatasetReference",
                "parameters": {
                  "Container": {
                    "value": "@variables('DestContainer')",
                    "type": "Expression"
                  },
                  "Directory": {
                    "value": "@variables('DestRootPath')",
                    "type": "Expression"
                  },
                  "File": {
                    "value": "@variables('MergedOutputFile')",
                    "type": "Expression"
                  }
                }
              }
            ]
          },
          {
            "name": "SetMergedFileName",
            "description": "SetMergedFileName",
            "type": "SetVariable",
            "dependsOn": [],
            "userProperties": [],
            "typeProperties": {
              "variableName": "MergedOutputFile",
              "value": {
                "value": "@concat(formatDateTime(pipeline().parameters.WindowStartTime, 'yyyyMMddHH'),'.txt')",
                "type": "Expression"
              }
            }
          },
          {
            "name": "Fail-If-Merge-Fails",
            "type": "IfCondition",
            "dependsOn": [
              {
                "activity": "MergeDocumentSummaryJson",
                "dependencyConditions": [
                  "Failed"
                ]
              }
            ],
            "userProperties": [],
            "typeProperties": {
              "expression": {
                "value": "@startswith(activity('MergeDocumentSummaryJson').output.errors[0].Message, 'ErrorCode=UserErrorFileNotFound')",
                "type": "Expression"
              },
              "ifFalseActivities": [
                {
                  "name": "Merge Document  Invoice Summary Data Log Failure",
                  "description": "Merge Document  Summary Data Log Failure",
                  "type": "AzureFunctionActivity",
                  "dependsOn": [],
                  "policy": {
                    "timeout": "0.00:10:00",
                    "retry": 3,
                    "retryIntervalInSeconds": 30,
                    "secureOutput": false,
                    "secureInput": false
                  },
                  "userProperties": [],
                  "typeProperties": {
                    "functionName": "LogAdfPipelineStatus",
                    "method": "POST",
                    "headers": {},
                    "body": {
                      "Activity": "MergeDocumentSummaryData",
                      "Status": "Failed",
                      "DataFactoryName": "@{pipeline().DataFactory}",
                      "PipelineName": "@{pipeline().Pipeline}",
                      "TriggeredBy": "@{pipeline().TriggerName}",
                      "TriggerTime": "@{pipeline().TriggerTime}",
                      "Error": "@{activity('MergeDocumentSummaryJson').output.errors[0].Message}"
                    }
                  },
                  "linkedServiceName": {
                    "referenceName": "AZlogAdfPipelineFuncLS",
                    "type": "LinkedServiceReference"
                  }
                }
              ],
              "ifTrueActivities": [
                {
                  "name": "Merge Document Summary Data Log Success with error",
                  "description": "Merge Document Summary Data Log Success",
                  "type": "AzureFunctionActivity",
                  "dependsOn": [],
                  "policy": {
                    "timeout": "0.00:10:00",
                    "retry": 3,
                    "retryIntervalInSeconds": 30,
                    "secureOutput": false,
                    "secureInput": false
                  },
                  "userProperties": [],
                  "typeProperties": {
                    "functionName": "LogAdfPipelineStatus",
                    "method": "POST",
                    "headers": {},
                    "body": {
                      "Activity": "MergeDocumentSummaryData",
                      "Status": "Success",
                      "DataFactoryName": "@{pipeline().DataFactory}",
                      "PipelineName": "@{pipeline().Pipeline}",
                      "TriggeredBy": "@{pipeline().TriggerName}",
                      "TriggerTime": "@{pipeline().TriggerTime}",
                      "Error": "@{activity('MergeDocumentSummaryJson').output.errors[0].Message}"
                    }
                  },
                  "linkedServiceName": {
                    "referenceName": "AZlogAdfPipelineFuncLS",
                    "type": "LinkedServiceReference"
                  }
                }
              ]
            }
          },
          {
            "name": "Merge Document Summary Data Log Success",
            "description": "Merge Invoice Summary Data Log Success",
            "type": "AzureFunctionActivity",
            "dependsOn": [
              {
                "activity": "MergeDocumentSummaryJson",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "policy": {
              "timeout": "0.00:10:00",
              "retry": 3,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "functionName": "LogAdfPipelineStatus",
              "method": "POST",
              "headers": {},
              "body": {
                "Activity": "MergeDocumentSummaryJson",
                "Status": "Success",
                "DataFactoryName": "@{pipeline().DataFactory}",
                "PipelineName": "@{pipeline().Pipeline}",
                "TriggeredBy": "@{pipeline().TriggerName}",
                "TriggerTime": "@{pipeline().TriggerTime}"
              }
            },
            "linkedServiceName": {
              "referenceName": "AZlogAdfPipelineFuncLS",
              "type": "LinkedServiceReference"
            }
          }
        ],
        "parameters": {
          "WindowStartTime": {
            "type": "string",
            "defaultValue": "2020-08-13T01:00:00"
          },
          "SourceFilePattern": {
            "type": "string",
            "defaultValue": "*"
          }
        },
        "variables": {
          "SourceRootPath": {
            "type": "String"
          },
          "SourceContainer": {
            "type": "String",
            "defaultValue": "[parameters('Copy Invoice Summary Raw Json Data_properties_variables_SourceContainer_defaultValue')]"
          },
          "DestRootPath": {
            "type": "String"
          },
          "DestContainer": {
            "type": "String",
            "defaultValue": "invoice-docsummary"
          },
          "MergedOutputFile": {
            "type": "String"
          }
        },
        "folder": {
          "name": "Copy"
        },
        "annotations": []
      },
      "dependsOn": [
        "[concat(variables('factoryId'), '/datasets/InvoiceDocumentSummaryRawDataSet')]",
        "[concat(variables('factoryId'), '/datasets/ReconControlSourceRawDataSetGen2')]",
        "[concat(variables('factoryId'), '/linkedServices/AZlogAdfPipelineFuncLS')]",
        "[concat(variables('factoryId'), '/datasets/JsonDataSet')]"
      ]
    },
    {
      "name": "[concat(parameters('factoryName'), '/Copy Ledger Raw Json data')]",
      "type": "Microsoft.DataFactory/factories/pipelines",
      "apiVersion": "2018-06-01",
      "properties": {
        "description": "Copy Ledger Raw Json data",
        "activities": [
          {
            "name": "Set SourceRootPath variable",
            "type": "SetVariable",
            "dependsOn": [],
            "userProperties": [],
            "typeProperties": {
              "variableName": "SourceRootPath",
              "value": {
                "value": "@concat('/*/ledgerentry/*/',formatDateTime(pipeline().parameters.WindowStartTime,'yyyy/MM/dd/HH'))",
                "type": "Expression"
              }
            }
          },
          {
            "name": "Set DestinationRootPath variable",
            "type": "SetVariable",
            "dependsOn": [],
            "userProperties": [],
            "typeProperties": {
              "variableName": "DestRootPath",
              "value": {
                "value": "@concat('ledger-journal/',formatDateTime(pipeline().parameters.WindowStartTime, 'yyyy/MM/dd/HH'))",
                "type": "Expression"
              }
            }
          },
          {
            "name": "Copy Ledger Data Log Success",
            "description": "Copy Ledger Data Log Success",
            "type": "AzureFunctionActivity",
            "dependsOn": [
              {
                "activity": "Aggregate Streams",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "policy": {
              "timeout": "0.00:10:00",
              "retry": 3,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "functionName": "LogAdfPipelineStatus",
              "method": "POST",
              "headers": {},
              "body": {
                "Activity": "CopyLedgerRawData",
                "Status": "Success",
                "DataFactoryName": "@{pipeline().DataFactory}",
                "PipelineName": "@{pipeline().Pipeline}",
                "TriggeredBy": "@{pipeline().TriggerName}",
                "TriggerTime": "@{pipeline().TriggerTime}"
              }
            },
            "linkedServiceName": {
              "referenceName": "AZlogAdfPipelineFuncLS",
              "type": "LinkedServiceReference"
            }
          },
          {
            "name": "Copy Ledger Raw Data Log Failure",
            "description": "Copy Ledger Raw Data Log Failure",
            "type": "AzureFunctionActivity",
            "dependsOn": [
              {
                "activity": "Aggregate Streams",
                "dependencyConditions": [
                  "Failed"
                ]
              }
            ],
            "policy": {
              "timeout": "0.00:10:00",
              "retry": 3,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "functionName": "LogAdfPipelineStatus",
              "method": "POST",
              "headers": {},
              "body": {
                "Activity": "CopyLedgerRawData",
                "Status": "Failed",
                "DataFactoryName": "@{pipeline().DataFactory}",
                "PipelineName": "@{pipeline().Pipeline}",
                "TriggeredBy": "@{pipeline().TriggerName}",
                "TriggerTime": "@{pipeline().TriggerTime}"
              }
            },
            "linkedServiceName": {
              "referenceName": "AZlogAdfPipelineFuncLS",
              "type": "LinkedServiceReference"
            }
          },
          {
            "name": "Copy",
            "type": "IfCondition",
            "dependsOn": [
              {
                "activity": "Set SourceRootPath variable",
                "dependencyConditions": [
                  "Succeeded"
                ]
              },
              {
                "activity": "Set DestinationRootPath variable",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "userProperties": [],
            "typeProperties": {
              "expression": {
                "value": "@pipeline().parameters.ExecuteCopy",
                "type": "Expression"
              },
              "ifTrueActivities": [
                {
                  "name": "CopyLedgerRawData",
                  "type": "Copy",
                  "dependsOn": [],
                  "policy": {
                    "timeout": "0.02:00:00",
                    "retry": 3,
                    "retryIntervalInSeconds": 30,
                    "secureOutput": false,
                    "secureInput": false
                  },
                  "userProperties": [],
                  "typeProperties": {
                    "source": {
                      "type": "BinarySource",
                      "storeSettings": {
                        "type": "AzureBlobStorageReadSettings",
                        "recursive": true,
                        "wildcardFolderPath": {
                          "value": "@variables('SourceRootPath')",
                          "type": "Expression"
                        },
                        "wildcardFileName": "*"
                      },
                      "formatSettings": {
                        "type": "BinaryReadSettings"
                      }
                    },
                    "sink": {
                      "type": "BinarySink",
                      "storeSettings": {
                        "type": "AzureBlobFSWriteSettings"
                      }
                    },
                    "enableStaging": false,
                    "skipErrorFile": {
                      "fileMissing": true,
                      "fileForbidden": false
                    },
                    "validateDataConsistency": false
                  },
                  "inputs": [
                    {
                      "referenceName": "LedgerRawDataSet",
                      "type": "DatasetReference",
                      "parameters": {
                        "container": {
                          "value": "@variables('SourceContainer')",
                          "type": "Expression"
                        }
                      }
                    }
                  ],
                  "outputs": [
                    {
                      "referenceName": "ReconControlSourceRawDataSetGen2",
                      "type": "DatasetReference",
                      "parameters": {
                        "container": {
                          "value": "@variables('DestLedgerContainer')",
                          "type": "Expression"
                        },
                        "path": {
                          "value": "@variables('DestRootPath')",
                          "type": "Expression"
                        }
                      }
                    }
                  ]
                }
              ]
            }
          },
          {
            "name": "Aggregate Streams",
            "type": "IfCondition",
            "dependsOn": [
              {
                "activity": "Copy",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "userProperties": [],
            "typeProperties": {
              "expression": {
                "value": "@pipeline().parameters.ExecuteAggregation",
                "type": "Expression"
              },
              "ifTrueActivities": [
                {
                  "name": "Aggregate Ledger Streams",
                  "description": "Aggregate Ledger Streams",
                  "type": "DataLakeAnalyticsScope",
                  "dependsOn": [
                    {
                      "activity": "Set Ingestion Path",
                      "dependencyConditions": [
                        "Succeeded"
                      ]
                    },
                    {
                      "activity": "Set Accounting Date Time",
                      "dependencyConditions": [
                        "Succeeded"
                      ]
                    },
                    {
                      "activity": "Set Binaries Path",
                      "dependencyConditions": [
                        "Succeeded"
                      ]
                    }
                  ],
                  "policy": {
                    "timeout": "04:00:00",
                    "retry": 0,
                    "retryIntervalInSeconds": 30,
                    "secureOutput": false,
                    "secureInput": false
                  },
                  "userProperties": [],
                  "typeProperties": {
                    "scriptFolderPath": {
                      "value": "@variables('ScriptRootPath')",
                      "type": "Expression"
                    },
                    "scriptFileName": "AggregateLedgerStreams.script",
                    "runtimeVersion": {
                      "value": "@pipeline().globalParameters.ScopeRunTime",
                      "type": "Expression"
                    },
                    "scriptLinkedService": {
                      "referenceName": "AzureDataLakeStorageGen2",
                      "type": "LinkedServiceReference"
                    },
                    "parameters": {
                      "INGESTIONPATH": {
                        "value": "@variables('IngestionPath')",
                        "type": "Expression"
                      },
                      "RUNACCOUNTINGDATETIME": {
                        "value": "@concat('\"', variables('RunAccountingDateTime'), '\"')",
                        "type": "Expression"
                      },
                      "RESOURCEPATH": {
                        "value": "@variables('BinariesPath')",
                        "type": "Expression"
                      }
                    },
                    "nebulaArguments": ""
                  },
                  "linkedServiceName": {
                    "referenceName": "AzureDataLakeAnalytics",
                    "type": "LinkedServiceReference"
                  }
                },
                {
                  "name": "Set Ingestion Path",
                  "type": "SetVariable",
                  "dependsOn": [],
                  "userProperties": [],
                  "typeProperties": {
                    "variableName": "IngestionPath",
                    "value": {
                      "value": "@concat('\"', pipeline().globalParameters.ADLGen2StorageProtocolPrefix, 'ledger@', \npipeline().globalParameters.ADLGen2StorageAccountName, pipeline().globalParameters.ADLGen2StoragePathSuffix, '\"')",
                      "type": "Expression"
                    }
                  }
                },
                {
                  "name": "Set Accounting Date Time",
                  "type": "SetVariable",
                  "dependsOn": [],
                  "userProperties": [],
                  "typeProperties": {
                    "variableName": "RunAccountingDateTime",
                    "value": {
                      "value": "@formatDateTime(pipeline().parameters.WindowStartTime,'MM/dd/yyyy HH:mm:ss')",
                      "type": "Expression"
                    }
                  }
                },
                {
                  "name": "Set Binaries Path",
                  "type": "SetVariable",
                  "dependsOn": [],
                  "userProperties": [],
                  "typeProperties": {
                    "variableName": "BinariesPath",
                    "value": {
                      "value": "@concat('\"', pipeline().globalParameters.ADLGen2StorageProtocolPrefix, 'resources@', \npipeline().globalParameters.ADLGen2StorageAccountName, pipeline().globalParameters.ADLGen2StoragePathSuffix, '/Binaries/\"')",
                      "type": "Expression"
                    }
                  }
                }
              ]
            }
          }
        ],
        "parameters": {
          "WindowStartTime": {
            "type": "string",
            "defaultValue": "2020-08-02T21:00:00"
          },
          "ExecuteCopy": {
            "type": "bool",
            "defaultValue": true
          },
          "ExecuteAggregation": {
            "type": "bool",
            "defaultValue": true
          }
        },
        "variables": {
          "SourceRootPath": {
            "type": "String"
          },
          "DestRootPath": {
            "type": "String"
          },
          "DestLedgerContainer": {
            "type": "String",
            "defaultValue": "ledger"
          },
          "SourceContainer": {
            "type": "String",
            "defaultValue": "[parameters('Copy Ledger Raw Json data_properties_variables_SourceContainer_defaultValue')]"
          },
          "ScriptRootPath": {
            "type": "String",
            "defaultValue": "resources/Scripts"
          },
          "IngestionPath": {
            "type": "String"
          },
          "RunAccountingDateTime": {
            "type": "String"
          },
          "BinariesPath": {
            "type": "String"
          }
        },
        "folder": {
          "name": "Copy"
        },
        "annotations": []
      },
      "dependsOn": [
        "[concat(variables('factoryId'), '/linkedServices/AZlogAdfPipelineFuncLS')]",
        "[concat(variables('factoryId'), '/datasets/LedgerRawDataSet')]",
        "[concat(variables('factoryId'), '/datasets/ReconControlSourceRawDataSetGen2')]",
        "[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorageGen2')]",
        "[concat(variables('factoryId'), '/linkedServices/AzureDataLakeAnalytics')]"
      ]
    },
    {
      "name": "[concat(parameters('factoryName'), '/Copy Order Raw Json Data')]",
      "type": "Microsoft.DataFactory/factories/pipelines",
      "apiVersion": "2018-06-01",
      "properties": {
        "description": "Copy Order Raw Json data",
        "activities": [
          {
            "name": "CopyOrderRawData",
            "type": "Copy",
            "dependsOn": [
              {
                "activity": "Set SourceRootPath variable",
                "dependencyConditions": [
                  "Succeeded"
                ]
              },
              {
                "activity": "Set DestinationRootPath variable",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "policy": {
              "timeout": "0.02:00:00",
              "retry": 3,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "source": {
                "type": "BinarySource",
                "storeSettings": {
                  "type": "AzureBlobStorageReadSettings",
                  "recursive": true,
                  "wildcardFolderPath": {
                    "value": "@variables('SourceRootPath')",
                    "type": "Expression"
                  },
                  "wildcardFileName": "*"
                },
                "formatSettings": {
                  "type": "BinaryReadSettings"
                }
              },
              "sink": {
                "type": "BinarySink",
                "storeSettings": {
                  "type": "AzureBlobFSWriteSettings"
                }
              },
              "enableStaging": false,
              "skipErrorFile": {
                "fileMissing": true,
                "fileForbidden": false
              },
              "validateDataConsistency": false
            },
            "inputs": [
              {
                "referenceName": "OrderPartnerDataSet",
                "type": "DatasetReference",
                "parameters": {
                  "container": "purchaseorder-2019-12-15"
                }
              }
            ],
            "outputs": [
              {
                "referenceName": "ReconControlSourceRawDataSetGen2",
                "type": "DatasetReference",
                "parameters": {
                  "container": {
                    "value": "@variables('DestOrderContainer')",
                    "type": "Expression"
                  },
                  "path": {
                    "value": "@variables('DestRootPath')",
                    "type": "Expression"
                  }
                }
              }
            ]
          },
          {
            "name": "Set SourceRootPath variable",
            "type": "SetVariable",
            "dependsOn": [],
            "userProperties": [],
            "typeProperties": {
              "variableName": "SourceRootPath",
              "value": {
                "value": "@concat('Order/',formatDateTime(pipeline().parameters.WindowStartTime,'yyyy/MM/dd/HH'))",
                "type": "Expression"
              }
            }
          },
          {
            "name": "Set DestinationRootPath variable",
            "type": "SetVariable",
            "dependsOn": [],
            "userProperties": [],
            "typeProperties": {
              "variableName": "DestRootPath",
              "value": {
                "value": "@concat(formatDateTime(pipeline().parameters.WindowStartTime,'yyyy/MM/dd/HH'))",
                "type": "Expression"
              }
            }
          },
          {
            "name": "Copy Order Data Log Success",
            "description": "Copy Order Data Log Success",
            "type": "AzureFunctionActivity",
            "dependsOn": [
              {
                "activity": "CopyOrderRawData",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "policy": {
              "timeout": "0.00:10:00",
              "retry": 3,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "functionName": "LogAdfPipelineStatus",
              "method": "POST",
              "headers": {},
              "body": {
                "Activity": "CopyOrderRawData",
                "Status": "Success",
                "DataFactoryName": "@{pipeline().DataFactory}",
                "PipelineName": "@{pipeline().Pipeline}",
                "TriggeredBy": "@{pipeline().TriggerName}",
                "TriggerTime": "@{pipeline().TriggerTime}"
              }
            },
            "linkedServiceName": {
              "referenceName": "AZlogAdfPipelineFuncLS",
              "type": "LinkedServiceReference"
            }
          },
          {
            "name": "Copy Order Data Log Failure",
            "description": "Copy Order Data Log Failure",
            "type": "AzureFunctionActivity",
            "dependsOn": [
              {
                "activity": "CopyOrderRawData",
                "dependencyConditions": [
                  "Failed"
                ]
              }
            ],
            "policy": {
              "timeout": "0.00:10:00",
              "retry": 3,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "functionName": "LogAdfPipelineStatus",
              "method": "POST",
              "headers": {},
              "body": {
                "Activity": "CopyOrderRawData",
                "Status": "Failed",
                "DataFactoryName": "@{pipeline().DataFactory}",
                "PipelineName": "@{pipeline().Pipeline}",
                "TriggeredBy": "@{pipeline().TriggerName}",
                "TriggerTime": "@{pipeline().TriggerTime}"
              }
            },
            "linkedServiceName": {
              "referenceName": "AZlogAdfPipelineFuncLS",
              "type": "LinkedServiceReference"
            }
          }
        ],
        "parameters": {
          "WindowStartTime": {
            "type": "string",
            "defaultValue": "5/1/2020 12:00:00 AM"
          }
        },
        "variables": {
          "SourceRootPath": {
            "type": "String",
            "defaultValue": "2020/05/01/00"
          },
          "DestRootPath": {
            "type": "String",
            "defaultValue": "ABCD"
          },
          "DestOrderContainer": {
            "type": "String",
            "defaultValue": "order"
          }
        },
        "folder": {
          "name": "Copy"
        },
        "annotations": []
      },
      "dependsOn": [
        "[concat(variables('factoryId'), '/datasets/OrderPartnerDataSet')]",
        "[concat(variables('factoryId'), '/datasets/ReconControlSourceRawDataSetGen2')]",
        "[concat(variables('factoryId'), '/linkedServices/AZlogAdfPipelineFuncLS')]"
      ]
    },
    {
      "name": "[concat(parameters('factoryName'), '/Copy RA Deferral Raw Json Data')]",
      "type": "Microsoft.DataFactory/factories/pipelines",
      "apiVersion": "2018-06-01",
      "properties": {
        "description": "Copy RA Deferral Raw Json data",
        "activities": [
          {
            "name": "CopyRADeferralRawData",
            "type": "Copy",
            "dependsOn": [
              {
                "activity": "Set SourceRootPath variable",
                "dependencyConditions": [
                  "Succeeded"
                ]
              },
              {
                "activity": "Set DestinationRootPath variable",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "policy": {
              "timeout": "0.02:00:00",
              "retry": 3,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "source": {
                "type": "BinarySource",
                "storeSettings": {
                  "type": "AzureBlobStorageReadSettings",
                  "recursive": true,
                  "wildcardFolderPath": {
                    "value": "@variables('SourceRootPath')",
                    "type": "Expression"
                  },
                  "wildcardFileName": "*"
                },
                "formatSettings": {
                  "type": "BinaryReadSettings"
                }
              },
              "sink": {
                "type": "BinarySink",
                "storeSettings": {
                  "type": "AzureBlobFSWriteSettings"
                }
              },
              "enableStaging": false,
              "skipErrorFile": {
                "fileMissing": true,
                "fileForbidden": false
              },
              "validateDataConsistency": false
            },
            "inputs": [
              {
                "referenceName": "RADeferralPartnerDataSet",
                "type": "DatasetReference",
                "parameters": {
                  "container": {
                    "value": "@variables('SourceContainer')",
                    "type": "Expression"
                  }
                }
              }
            ],
            "outputs": [
              {
                "referenceName": "ReconControlSourceRawDataSetGen2",
                "type": "DatasetReference",
                "parameters": {
                  "container": {
                    "value": "@variables('DestRADeferralContainer')",
                    "type": "Expression"
                  },
                  "path": {
                    "value": "@variables('DestRootPath')",
                    "type": "Expression"
                  }
                }
              }
            ]
          },
          {
            "name": "Set SourceRootPath variable",
            "type": "SetVariable",
            "dependsOn": [],
            "userProperties": [],
            "typeProperties": {
              "variableName": "SourceRootPath",
              "value": {
                "value": "@concat('LotSummary/',formatDateTime(pipeline().parameters.WindowStartTime,'yyyy/MM/dd/HH'))",
                "type": "Expression"
              }
            }
          },
          {
            "name": "Set DestinationRootPath variable",
            "type": "SetVariable",
            "dependsOn": [],
            "userProperties": [],
            "typeProperties": {
              "variableName": "DestRootPath",
              "value": {
                "value": "@concat('consumable-deferral/',formatDateTime(pipeline().parameters.WindowStartTime, 'yyyy/MM/dd/HH'))",
                "type": "Expression"
              }
            }
          },
          {
            "name": "Copy RA Deferral Data Log Success",
            "description": "Copy RA Deferral Data Log Success",
            "type": "AzureFunctionActivity",
            "dependsOn": [
              {
                "activity": "CopyRADeferralRawData",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "policy": {
              "timeout": "0.00:10:00",
              "retry": 3,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "functionName": "LogAdfPipelineStatus",
              "method": "POST",
              "headers": {},
              "body": {
                "Activity": "CopyRADeferralRawData",
                "Status": "Success",
                "DataFactoryName": "@{pipeline().DataFactory}",
                "PipelineName": "@{pipeline().Pipeline}",
                "TriggeredBy": "@{pipeline().TriggerName}",
                "TriggerTime": "@{pipeline().TriggerTime}"
              }
            },
            "linkedServiceName": {
              "referenceName": "AZlogAdfPipelineFuncLS",
              "type": "LinkedServiceReference"
            }
          },
          {
            "name": "Copy RA Deferral Data Log Failure",
            "description": "Copy RA Deferral Data Log Failure",
            "type": "AzureFunctionActivity",
            "dependsOn": [
              {
                "activity": "CopyRADeferralRawData",
                "dependencyConditions": [
                  "Failed"
                ]
              }
            ],
            "policy": {
              "timeout": "0.00:10:00",
              "retry": 3,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "functionName": "LogAdfPipelineStatus",
              "method": "POST",
              "headers": {},
              "body": {
                "Activity": "CopyRADeferralRawData",
                "Status": "Failed",
                "DataFactoryName": "@{pipeline().DataFactory}",
                "PipelineName": "@{pipeline().Pipeline}",
                "TriggeredBy": "@{pipeline().TriggerName}",
                "TriggerTime": "@{pipeline().TriggerTime}"
              }
            },
            "linkedServiceName": {
              "referenceName": "AZlogAdfPipelineFuncLS",
              "type": "LinkedServiceReference"
            }
          }
        ],
        "parameters": {
          "WindowStartTime": {
            "type": "string",
            "defaultValue": "5/1/2020 12:00:00 AM"
          }
        },
        "variables": {
          "SourceRootPath": {
            "type": "String",
            "defaultValue": "2020/05/01/00"
          },
          "DestRootPath": {
            "type": "String"
          },
          "DestRADeferralContainer": {
            "type": "String",
            "defaultValue": "deferral"
          },
          "SourceContainer": {
            "type": "String",
            "defaultValue": "[parameters('Copy RA Deferral Raw Json Data_properties_variables_SourceContainer_defaultValue')]"
          }
        },
        "folder": {
          "name": "Copy"
        },
        "annotations": []
      },
      "dependsOn": [
        "[concat(variables('factoryId'), '/datasets/RADeferralPartnerDataSet')]",
        "[concat(variables('factoryId'), '/datasets/ReconControlSourceRawDataSetGen2')]",
        "[concat(variables('factoryId'), '/linkedServices/AZlogAdfPipelineFuncLS')]"
      ]
    },
    {
      "name": "[concat(parameters('factoryName'), '/Copy RA MCommit Deferral Raw Json Data')]",
      "type": "Microsoft.DataFactory/factories/pipelines",
      "apiVersion": "2018-06-01",
      "properties": {
        "description": "Copy RA MCommit Deferral Raw Json data",
        "activities": [
          {
            "name": "CopyRAMonetaryCommitDeferralRawData",
            "type": "Copy",
            "dependsOn": [
              {
                "activity": "Set SourceRootPath variable",
                "dependencyConditions": [
                  "Succeeded"
                ]
              },
              {
                "activity": "Set DestinationRootPath variable",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "policy": {
              "timeout": "0.02:00:00",
              "retry": 3,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "source": {
                "type": "BinarySource",
                "storeSettings": {
                  "type": "AzureBlobStorageReadSettings",
                  "recursive": true,
                  "wildcardFolderPath": {
                    "value": "@variables('SourceRootPath')",
                    "type": "Expression"
                  },
                  "wildcardFileName": "*",
                  "deleteFilesAfterCompletion": false
                },
                "formatSettings": {
                  "type": "BinaryReadSettings"
                }
              },
              "sink": {
                "type": "BinarySink",
                "storeSettings": {
                  "type": "AzureBlobFSWriteSettings"
                }
              },
              "enableStaging": false,
              "skipErrorFile": {
                "fileMissing": true,
                "fileForbidden": false
              },
              "validateDataConsistency": false
            },
            "inputs": [
              {
                "referenceName": "RAMonetaryCommitDeferralPartnerDataSet",
                "type": "DatasetReference",
                "parameters": {
                  "container": {
                    "value": "@variables('SourceContainer')",
                    "type": "Expression"
                  }
                }
              }
            ],
            "outputs": [
              {
                "referenceName": "ReconControlSourceRawDataSetGen2",
                "type": "DatasetReference",
                "parameters": {
                  "container": {
                    "value": "@variables('DestRAMonetaryCommitDeferralContainer')",
                    "type": "Expression"
                  },
                  "path": {
                    "value": "@variables('DestRootPath')",
                    "type": "Expression"
                  }
                }
              }
            ]
          },
          {
            "name": "Set SourceRootPath variable",
            "type": "SetVariable",
            "dependsOn": [],
            "userProperties": [],
            "typeProperties": {
              "variableName": "SourceRootPath",
              "value": {
                "value": "@concat('LotSummary/',formatDateTime(pipeline().parameters.WindowStartTime,'yyyy/MM/dd/HH'))",
                "type": "Expression"
              }
            }
          },
          {
            "name": "Set DestinationRootPath variable",
            "type": "SetVariable",
            "dependsOn": [],
            "userProperties": [],
            "typeProperties": {
              "variableName": "DestRootPath",
              "value": {
                "value": "@concat('mcommit-deferral/',formatDateTime(pipeline().parameters.WindowStartTime, 'yyyy/MM/dd/HH'))",
                "type": "Expression"
              }
            }
          },
          {
            "name": "Copy RA MCommit Deferral Data Log Success",
            "description": "Copy RA MCommit Deferral Data Log Success",
            "type": "AzureFunctionActivity",
            "dependsOn": [
              {
                "activity": "CopyRAMonetaryCommitDeferralRawData",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "policy": {
              "timeout": "0.00:10:00",
              "retry": 3,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "functionName": "LogAdfPipelineStatus",
              "method": "POST",
              "headers": {},
              "body": {
                "Activity": "CopyRAMonetaryCommitDeferralRawData",
                "Status": "Success",
                "DataFactoryName": "@{pipeline().DataFactory}",
                "PipelineName": "@{pipeline().Pipeline}",
                "TriggeredBy": "@{pipeline().TriggerName}",
                "TriggerTime": "@{pipeline().TriggerTime}"
              }
            },
            "linkedServiceName": {
              "referenceName": "AZlogAdfPipelineFuncLS",
              "type": "LinkedServiceReference"
            }
          },
          {
            "name": "Copy RA MCommit Deferral Data Log Failure",
            "description": "Copy RA MCommit Deferral Data Log Failure",
            "type": "AzureFunctionActivity",
            "dependsOn": [
              {
                "activity": "CopyRAMonetaryCommitDeferralRawData",
                "dependencyConditions": [
                  "Failed"
                ]
              }
            ],
            "policy": {
              "timeout": "0.00:10:00",
              "retry": 3,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "functionName": "LogAdfPipelineStatus",
              "method": "POST",
              "headers": {},
              "body": {
                "Activity": "CopyRAMonetaryCommitDeferralRawData",
                "Status": "Failed",
                "DataFactoryName": "@{pipeline().DataFactory}",
                "PipelineName": "@{pipeline().Pipeline}",
                "TriggeredBy": "@{pipeline().TriggerName}",
                "TriggerTime": "@{pipeline().TriggerTime}"
              }
            },
            "linkedServiceName": {
              "referenceName": "AZlogAdfPipelineFuncLS",
              "type": "LinkedServiceReference"
            }
          }
        ],
        "parameters": {
          "WindowStartTime": {
            "type": "string",
            "defaultValue": "8/1/2020 12:00:00 AM"
          }
        },
        "variables": {
          "SourceRootPath": {
            "type": "String",
            "defaultValue": "2020/08/01/00"
          },
          "DestRootPath": {
            "type": "String"
          },
          "DestRAMonetaryCommitDeferralContainer": {
            "type": "String",
            "defaultValue": "deferral"
          },
          "SourceContainer": {
            "type": "String",
            "defaultValue": "[parameters('Copy RA MCommit Deferral Raw Json Data_properties_variables_SourceContainer_defaultValue')]"
          }
        },
        "folder": {
          "name": "Copy"
        },
        "annotations": []
      },
      "dependsOn": [
        "[concat(variables('factoryId'), '/datasets/RAMonetaryCommitDeferralPartnerDataSet')]",
        "[concat(variables('factoryId'), '/datasets/ReconControlSourceRawDataSetGen2')]",
        "[concat(variables('factoryId'), '/linkedServices/AZlogAdfPipelineFuncLS')]"
      ]
    },
    {
      "name": "[concat(parameters('factoryName'), '/CopyFileFromGen2toGen2Storage')]",
      "type": "Microsoft.DataFactory/factories/pipelines",
      "apiVersion": "2018-06-01",
      "properties": {
        "activities": [
          {
            "name": "CopyBinaryFileFromGen1ToGen2",
            "type": "Copy",
            "dependsOn": [],
            "policy": {
              "timeout": "7.00:00:00",
              "retry": 0,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "source": {
                "type": "BinarySource",
                "storeSettings": {
                  "type": "AzureBlobFSReadSettings",
                  "recursive": true
                },
                "formatSettings": {
                  "type": "BinaryReadSettings"
                }
              },
              "sink": {
                "type": "BinarySink",
                "storeSettings": {
                  "type": "AzureBlobFSWriteSettings"
                }
              },
              "enableStaging": false
            },
            "inputs": [
              {
                "referenceName": "ReconControlSourceRawDataSetGen2",
                "type": "DatasetReference",
                "parameters": {
                  "container": {
                    "value": "@pipeline().parameters.srcContainer",
                    "type": "Expression"
                  },
                  "path": {
                    "value": "@pipeline().parameters.srcPath",
                    "type": "Expression"
                  }
                }
              }
            ],
            "outputs": [
              {
                "referenceName": "ReconControlSourceRawDataSetGen2",
                "type": "DatasetReference",
                "parameters": {
                  "container": {
                    "value": "@pipeline().parameters.destContainer",
                    "type": "Expression"
                  },
                  "path": {
                    "value": "@pipeline().parameters.destPath",
                    "type": "Expression"
                  }
                }
              }
            ]
          }
        ],
        "parameters": {
          "srcContainer": {
            "type": "string"
          },
          "srcPath": {
            "type": "string"
          },
          "destContainer": {
            "type": "string"
          },
          "destPath": {
            "type": "string"
          }
        },
        "folder": {
          "name": "Infra"
        },
        "annotations": []
      },
      "dependsOn": [
        "[concat(variables('factoryId'), '/datasets/ReconControlSourceRawDataSetGen2')]"
      ]
    },
    {
      "name": "[concat(parameters('factoryName'), '/DEOS Seat Report')]",
      "type": "Microsoft.DataFactory/factories/pipelines",
      "apiVersion": "2018-06-01",
      "properties": {
        "description": "DEOS Seat Report",
        "activities": [
          {
            "name": "SeatReport",
            "description": "Seat Report",
            "type": "DataLakeAnalyticsScope",
            "dependsOn": [
              {
                "activity": "SeatActivity",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "policy": {
              "timeout": "0.01:00:00",
              "retry": 3,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "scriptFolderPath": {
                "value": "@variables('ScriptRootPath')",
                "type": "Expression"
              },
              "scriptFileName": "SeatReport.script",
              "runtimeVersion": {
                "value": "@pipeline().globalParameters.ScopeRunTime",
                "type": "Expression"
              },
              "scriptLinkedService": {
                "referenceName": "AzureDataLakeStorageGen2",
                "type": "LinkedServiceReference"
              },
              "parameters": {
                "REPORTROOTPATH": {
                  "value": "@variables('ReportRootPath')",
                  "type": "Expression"
                },
                "REPORTINGSTARTDATE": {
                  "value": "@concat('\"', pipeline().parameters.ReportingStartDate, '\"')",
                  "type": "Expression"
                },
                "RUNDATE": {
                  "value": "@concat('\"',variables('RunDate'),'\"')",
                  "type": "Expression"
                },
                "RESOURCEPATH": {
                  "value": "@variables('BinariesPath')",
                  "type": "Expression"
                }
              }
            },
            "linkedServiceName": {
              "referenceName": "AzureDataLakeAnalytics",
              "type": "LinkedServiceReference"
            }
          },
          {
            "name": "SetInputRootPath",
            "description": "Set input root path for control",
            "type": "SetVariable",
            "dependsOn": [
              {
                "activity": "SetBinariesPath",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "userProperties": [],
            "typeProperties": {
              "variableName": "InputRootPath",
              "value": {
                "value": "@concat('\"', pipeline().globalParameters.ADLGen2StorageProtocolPrefix,  'transformation@', pipeline().globalParameters.ADLGen2StorageAccountName, pipeline().globalParameters.ADLGen2StoragePathSuffix, '/data/Ingestion\"')",
                "type": "Expression"
              }
            }
          },
          {
            "name": "SetReportRootPath",
            "description": "set common root path",
            "type": "SetVariable",
            "dependsOn": [
              {
                "activity": "SetInputRootPath",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "userProperties": [],
            "typeProperties": {
              "variableName": "ReportRootPath",
              "value": {
                "value": "@concat('\"', pipeline().globalParameters.ADLGen2StorageProtocolPrefix,  'control@', pipeline().globalParameters.ADLGen2StorageAccountName, pipeline().globalParameters.ADLGen2StoragePathSuffix, '/data/Reports\"')",
                "type": "Expression"
              }
            }
          },
          {
            "name": "SetBinariesPath",
            "description": "Set path for binary reosurces",
            "type": "SetVariable",
            "dependsOn": [
              {
                "activity": "SetRunDate",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "userProperties": [],
            "typeProperties": {
              "variableName": "BinariesPath",
              "value": {
                "value": "@concat('\"', pipeline().globalParameters.ADLGen2StorageProtocolPrefix, 'resources@', \npipeline().globalParameters.ADLGen2StorageAccountName, pipeline().globalParameters.ADLGen2StoragePathSuffix, '/Binaries/\"')",
                "type": "Expression"
              }
            }
          },
          {
            "name": "SeatActivity",
            "description": "Seat Activity",
            "type": "DataLakeAnalyticsScope",
            "dependsOn": [
              {
                "activity": "SetReportRootPath",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "policy": {
              "timeout": "0.02:00:00",
              "retry": 3,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "scriptFolderPath": {
                "value": "@variables('ScriptRootPath')",
                "type": "Expression"
              },
              "scriptFileName": "SeatActivity.script",
              "runtimeVersion": {
                "value": "@pipeline().globalParameters.ScopeRunTime",
                "type": "Expression"
              },
              "scriptLinkedService": {
                "referenceName": "AzureDataLakeStorageGen2",
                "type": "LinkedServiceReference"
              },
              "parameters": {
                "RESOURCEPATH": {
                  "value": "@variables('BinariesPath')",
                  "type": "Expression"
                },
                "INPUTROOTPATH": {
                  "value": "@variables('InputRootPath')",
                  "type": "Expression"
                },
                "REPORTROOTPATH": {
                  "value": "@variables('ReportRootPath')",
                  "type": "Expression"
                },
                "RUNDATE": {
                  "value": "@concat('\"',variables('RunDate'),'\"')",
                  "type": "Expression"
                },
                "OFFSET": {
                  "value": "@concat('\"', pipeline().parameters.Offset, '\"')",
                  "type": "Expression"
                }
              }
            },
            "linkedServiceName": {
              "referenceName": "AzureDataLakeAnalytics",
              "type": "LinkedServiceReference"
            }
          },
          {
            "name": "SetRunDate",
            "description": "Set RunDate",
            "type": "SetVariable",
            "dependsOn": [],
            "userProperties": [],
            "typeProperties": {
              "variableName": "RunDate",
              "value": {
                "value": "@formatDateTime(utcnow(),'yyyy-MM-dd')",
                "type": "Expression"
              }
            }
          },
          {
            "name": "SeatReportSuccess",
            "description": "Log success for Seat Report",
            "type": "AzureFunctionActivity",
            "dependsOn": [
              {
                "activity": "SeatReport",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "policy": {
              "timeout": "0.00:10:00",
              "retry": 3,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "functionName": "LogAdfPipelineStatus",
              "method": "POST",
              "headers": {},
              "body": {
                "Activity": "SeatReport",
                "Status": "Success",
                "DataFactoryName": "@{pipeline().DataFactory}",
                "PipelineName": "@{pipeline().Pipeline}",
                "TriggeredBy": "@{pipeline().TriggerName}",
                "TriggerTime": "@{pipeline().TriggerTime}"
              }
            },
            "linkedServiceName": {
              "referenceName": "AZlogAdfPipelineFuncLS",
              "type": "LinkedServiceReference"
            }
          },
          {
            "name": "SeatReportFailure",
            "description": "Log failure for Seat Report",
            "type": "AzureFunctionActivity",
            "dependsOn": [
              {
                "activity": "SeatReport",
                "dependencyConditions": [
                  "Failed"
                ]
              }
            ],
            "policy": {
              "timeout": "0.00:10:00",
              "retry": 3,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "functionName": "LogAdfPipelineStatus",
              "method": "POST",
              "headers": {},
              "body": {
                "Activity": "SeatReport",
                "Status": "Failed",
                "DataFactoryName": "@{pipeline().DataFactory}",
                "PipelineName": "@{pipeline().Pipeline}",
                "TriggeredBy": "@{pipeline().TriggerName}",
                "TriggerTime": "@{pipeline().TriggerTime}"
              }
            },
            "linkedServiceName": {
              "referenceName": "AZlogAdfPipelineFuncLS",
              "type": "LinkedServiceReference"
            }
          },
          {
            "name": "SeatActivityFailure",
            "description": "Log failure for Seat Activity ",
            "type": "AzureFunctionActivity",
            "dependsOn": [
              {
                "activity": "SeatActivity",
                "dependencyConditions": [
                  "Failed"
                ]
              }
            ],
            "policy": {
              "timeout": "0.00:10:00",
              "retry": 3,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "functionName": "LogAdfPipelineStatus",
              "method": "POST",
              "headers": {},
              "body": {
                "Activity": "SeatActivity",
                "Status": "Failed",
                "DataFactoryName": "@{pipeline().DataFactory}",
                "PipelineName": "@{pipeline().Pipeline}",
                "TriggeredBy": "@{pipeline().TriggerName}",
                "TriggerTime": "@{pipeline().TriggerTime}"
              }
            },
            "linkedServiceName": {
              "referenceName": "AZlogAdfPipelineFuncLS",
              "type": "LinkedServiceReference"
            }
          },
          {
            "name": "SeatActivitySuccess",
            "description": "Log success for Seat Activity ",
            "type": "AzureFunctionActivity",
            "dependsOn": [
              {
                "activity": "SeatActivity",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "policy": {
              "timeout": "0.00:10:00",
              "retry": 3,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "functionName": "LogAdfPipelineStatus",
              "method": "POST",
              "headers": {},
              "body": {
                "Activity": "SeatActivity",
                "Status": "Success",
                "DataFactoryName": "@{pipeline().DataFactory}",
                "PipelineName": "@{pipeline().Pipeline}",
                "TriggeredBy": "@{pipeline().TriggerName}",
                "TriggerTime": "@{pipeline().TriggerTime}"
              }
            },
            "linkedServiceName": {
              "referenceName": "AZlogAdfPipelineFuncLS",
              "type": "LinkedServiceReference"
            }
          }
        ],
        "concurrency": 1,
        "parameters": {
          "ReportingStartDate": {
            "type": "string",
            "defaultValue": "01/01/2020"
          },
          "Offset": {
            "type": "string",
            "defaultValue": "7"
          }
        },
        "variables": {
          "InputRootPath": {
            "type": "String"
          },
          "ReportRootPath": {
            "type": "String"
          },
          "BinariesPath": {
            "type": "String"
          },
          "ScriptRootPath": {
            "type": "String",
            "defaultValue": "resources/Scripts"
          },
          "RunDate": {
            "type": "String"
          }
        },
        "folder": {
          "name": "Report"
        },
        "annotations": []
      },
      "dependsOn": [
        "[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorageGen2')]",
        "[concat(variables('factoryId'), '/linkedServices/AzureDataLakeAnalytics')]",
        "[concat(variables('factoryId'), '/linkedServices/AZlogAdfPipelineFuncLS')]"
      ]
    },
    {
      "name": "[concat(parameters('factoryName'), '/DebugCAToInvoice')]",
      "type": "Microsoft.DataFactory/factories/pipelines",
      "apiVersion": "2018-06-01",
      "properties": {
        "activities": [
          {
            "name": "DebugCAToInvoiceReconTransaction",
            "description": "Control between CA and Invoice",
            "type": "DataLakeAnalyticsScope",
            "dependsOn": [
              {
                "activity": "SetControlName",
                "dependencyConditions": [
                  "Succeeded"
                ]
              },
              {
                "activity": "SetInputRootPath",
                "dependencyConditions": [
                  "Succeeded"
                ]
              },
              {
                "activity": "SetOutputRootPath",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "policy": {
              "timeout": "0.02:00:00",
              "retry": 0,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "scriptFolderPath": {
                "value": "@variables('ScriptRootPath')",
                "type": "Expression"
              },
              "scriptFileName": "ValidateCaToInvoice.script",
              "runtimeVersion": {
                "value": "@pipeline().globalParameters.ScopeRunTime",
                "type": "Expression"
              },
              "scriptLinkedService": {
                "referenceName": "AzureDataLakeStorageGen2",
                "type": "LinkedServiceReference"
              },
              "parameters": {
                "OUTPUTROOTPATH": {
                  "value": "@variables('OutputRootPath')",
                  "type": "Expression"
                },
                "INPUTROOTPATH": {
                  "value": "@variables('InputRootPath')",
                  "type": "Expression"
                },
                "DOCUMENTID": {
                  "value": "@concat('\"', pipeline().parameters.DocumentId, '\"')",
                  "type": "Expression"
                },
                "CONTROLNAME": {
                  "value": "@variables('ControlName')",
                  "type": "Expression"
                },
                "LINEITEMID": {
                  "value": "@concat('\"', pipeline().parameters.LineItemId, '\"')",
                  "type": "Expression"
                }
              }
            },
            "linkedServiceName": {
              "referenceName": "AzureDataLakeAnalytics",
              "type": "LinkedServiceReference"
            }
          },
          {
            "name": "SetOutputRootPath",
            "description": "SetOutputRootPath",
            "type": "SetVariable",
            "dependsOn": [],
            "userProperties": [],
            "typeProperties": {
              "variableName": "OutputRootPath",
              "value": {
                "value": "@concat('\"', pipeline().globalParameters.ADLGen2StorageProtocolPrefix,  'control@', pipeline().globalParameters.ADLGen2StorageAccountName, pipeline().globalParameters.ADLGen2StoragePathSuffix, '/data/Recon/CAToInvoice/Analysis/Debug', '\"')",
                "type": "Expression"
              }
            }
          },
          {
            "name": "SetInputRootPath",
            "description": "SetInputRootPath",
            "type": "SetVariable",
            "dependsOn": [],
            "userProperties": [],
            "typeProperties": {
              "variableName": "InputRootPath",
              "value": {
                "value": "@concat('\"', pipeline().globalParameters.ADLGen2StorageProtocolPrefix,  'control@', pipeline().globalParameters.ADLGen2StorageAccountName, pipeline().globalParameters.ADLGen2StoragePathSuffix, '/data/Recon/CAToInvoice', '\"')",
                "type": "Expression"
              }
            }
          },
          {
            "name": "SetControlName",
            "description": "SetInputRootPath",
            "type": "SetVariable",
            "dependsOn": [],
            "userProperties": [],
            "typeProperties": {
              "variableName": "ControlName",
              "value": {
                "value": "@concat('\"', 'CAToInvoice', '\"')",
                "type": "Expression"
              }
            }
          }
        ],
        "parameters": {
          "DocumentId": {
            "type": "string",
            "defaultValue": "HTA0000040"
          },
          "LineItemId": {
            "type": "string",
            "defaultValue": "407a2969-0de7-4de2-9f2d"
          }
        },
        "variables": {
          "ScriptRootPath": {
            "type": "String",
            "defaultValue": "test/scripts"
          },
          "OutputRootPath": {
            "type": "String"
          },
          "InputRootPath": {
            "type": "String"
          },
          "ControlName": {
            "type": "String"
          }
        },
        "folder": {
          "name": "ValidationInProduction"
        },
        "annotations": []
      },
      "dependsOn": [
        "[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorageGen2')]",
        "[concat(variables('factoryId'), '/linkedServices/AzureDataLakeAnalytics')]"
      ]
    },
    {
      "name": "[concat(parameters('factoryName'), '/Deferral Balance Report')]",
      "type": "Microsoft.DataFactory/factories/pipelines",
      "apiVersion": "2018-06-01",
      "properties": {
        "description": "Deferral Balance Report",
        "activities": [
          {
            "name": "DeferralBalanceReport",
            "description": "Deferral Balance Report",
            "type": "DataLakeAnalyticsScope",
            "dependsOn": [
              {
                "activity": "DeferralActivityLedger",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "policy": {
              "timeout": "0.01:00:00",
              "retry": 3,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "scriptFolderPath": {
                "value": "@variables('ScriptRootPath')",
                "type": "Expression"
              },
              "scriptFileName": "DeferralBalanceReport.script",
              "runtimeVersion": {
                "value": "@pipeline().globalParameters.ScopeRunTime",
                "type": "Expression"
              },
              "scriptLinkedService": {
                "referenceName": "AzureDataLakeStorageGen2",
                "type": "LinkedServiceReference"
              },
              "parameters": {
                "REPORTROOTPATH": {
                  "value": "@variables('ReportRootPath')",
                  "type": "Expression"
                },
                "REPORTINGSTARTDATE": {
                  "value": "@concat('\"', pipeline().parameters.ReportingStartDate, '\"')",
                  "type": "Expression"
                },
                "RUNDATE": {
                  "value": "@concat('\"',variables('RunDate'),'\"')",
                  "type": "Expression"
                },
                "RESOURCEPATH": {
                  "value": "@variables('BinariesPath')",
                  "type": "Expression"
                }
              }
            },
            "linkedServiceName": {
              "referenceName": "AzureDataLakeAnalytics",
              "type": "LinkedServiceReference"
            }
          },
          {
            "name": "SetInputRootPath",
            "description": "Set input root path for control",
            "type": "SetVariable",
            "dependsOn": [
              {
                "activity": "SetBinariesPath",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "userProperties": [],
            "typeProperties": {
              "variableName": "InputRootPath",
              "value": {
                "value": "@concat('\"', pipeline().globalParameters.ADLGen2StorageProtocolPrefix,  'transformation@', pipeline().globalParameters.ADLGen2StorageAccountName, pipeline().globalParameters.ADLGen2StoragePathSuffix, '/data/Ingestion\"')",
                "type": "Expression"
              }
            }
          },
          {
            "name": "SetReportRootPath",
            "description": "set common root path",
            "type": "SetVariable",
            "dependsOn": [
              {
                "activity": "SetInputRootPath",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "userProperties": [],
            "typeProperties": {
              "variableName": "ReportRootPath",
              "value": {
                "value": "@concat('\"', pipeline().globalParameters.ADLGen2StorageProtocolPrefix,  'control@', pipeline().globalParameters.ADLGen2StorageAccountName, pipeline().globalParameters.ADLGen2StoragePathSuffix, '/data/Reports\"')",
                "type": "Expression"
              }
            }
          },
          {
            "name": "SetBinariesPath",
            "description": "Set path for binary reosurces",
            "type": "SetVariable",
            "dependsOn": [
              {
                "activity": "SetRunDate",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "userProperties": [],
            "typeProperties": {
              "variableName": "BinariesPath",
              "value": {
                "value": "@concat('\"', pipeline().globalParameters.ADLGen2StorageProtocolPrefix, 'resources@', \npipeline().globalParameters.ADLGen2StorageAccountName, pipeline().globalParameters.ADLGen2StoragePathSuffix, '/Binaries/\"')",
                "type": "Expression"
              }
            }
          },
          {
            "name": "DeferralActivityLedger",
            "description": "Deferral Activity Ledger",
            "type": "DataLakeAnalyticsScope",
            "dependsOn": [
              {
                "activity": "SetReportRootPath",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "policy": {
              "timeout": "0.02:00:00",
              "retry": 3,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "scriptFolderPath": {
                "value": "@variables('ScriptRootPath')",
                "type": "Expression"
              },
              "scriptFileName": "DeferralActivityLedger.script",
              "runtimeVersion": {
                "value": "@pipeline().globalParameters.ScopeRunTime",
                "type": "Expression"
              },
              "scriptLinkedService": {
                "referenceName": "AzureDataLakeStorageGen2",
                "type": "LinkedServiceReference"
              },
              "parameters": {
                "RESOURCEPATH": {
                  "value": "@variables('BinariesPath')",
                  "type": "Expression"
                },
                "INPUTROOTPATH": {
                  "value": "@variables('InputRootPath')",
                  "type": "Expression"
                },
                "REPORTROOTPATH": {
                  "value": "@variables('ReportRootPath')",
                  "type": "Expression"
                },
                "RUNDATE": {
                  "value": "@concat('\"',variables('RunDate'),'\"')",
                  "type": "Expression"
                },
                "OFFSET": {
                  "value": "@concat('\"', pipeline().parameters.Offset, '\"')",
                  "type": "Expression"
                }
              }
            },
            "linkedServiceName": {
              "referenceName": "AzureDataLakeAnalytics",
              "type": "LinkedServiceReference"
            }
          },
          {
            "name": "SetRunDate",
            "description": "Set RunDate",
            "type": "SetVariable",
            "dependsOn": [],
            "userProperties": [],
            "typeProperties": {
              "variableName": "RunDate",
              "value": {
                "value": "@formatDateTime(utcnow(),'yyyy-MM-dd')",
                "type": "Expression"
              }
            }
          },
          {
            "name": "DeferralBalanceReportSuccess",
            "description": "Log success for Deferral Balance Report",
            "type": "AzureFunctionActivity",
            "dependsOn": [
              {
                "activity": "DeferralBalanceReport",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "policy": {
              "timeout": "0.00:10:00",
              "retry": 3,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "functionName": "LogAdfPipelineStatus",
              "method": "POST",
              "headers": {},
              "body": {
                "Activity": "DeferralBalanceReport",
                "Status": "Success",
                "DataFactoryName": "@{pipeline().DataFactory}",
                "PipelineName": "@{pipeline().Pipeline}",
                "TriggeredBy": "@{pipeline().TriggerName}",
                "TriggerTime": "@{pipeline().TriggerTime}"
              }
            },
            "linkedServiceName": {
              "referenceName": "AZlogAdfPipelineFuncLS",
              "type": "LinkedServiceReference"
            }
          },
          {
            "name": "DeferralBalanceReportFailure",
            "description": "Log failure for Deferral Balance Report",
            "type": "AzureFunctionActivity",
            "dependsOn": [
              {
                "activity": "DeferralBalanceReport",
                "dependencyConditions": [
                  "Failed"
                ]
              }
            ],
            "policy": {
              "timeout": "0.00:10:00",
              "retry": 3,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "functionName": "LogAdfPipelineStatus",
              "method": "POST",
              "headers": {},
              "body": {
                "Activity": "DeferralBalanceReport",
                "Status": "Failed",
                "DataFactoryName": "@{pipeline().DataFactory}",
                "PipelineName": "@{pipeline().Pipeline}",
                "TriggeredBy": "@{pipeline().TriggerName}",
                "TriggerTime": "@{pipeline().TriggerTime}"
              }
            },
            "linkedServiceName": {
              "referenceName": "AZlogAdfPipelineFuncLS",
              "type": "LinkedServiceReference"
            }
          },
          {
            "name": "DeferralActivityLedgerFailure",
            "description": "Log failurs for Deferral Activity ",
            "type": "AzureFunctionActivity",
            "dependsOn": [
              {
                "activity": "DeferralActivityLedger",
                "dependencyConditions": [
                  "Failed"
                ]
              }
            ],
            "policy": {
              "timeout": "0.00:10:00",
              "retry": 3,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "functionName": "LogAdfPipelineStatus",
              "method": "POST",
              "headers": {},
              "body": {
                "Activity": "DeferralActivityLedger",
                "Status": "Failed",
                "DataFactoryName": "@{pipeline().DataFactory}",
                "PipelineName": "@{pipeline().Pipeline}",
                "TriggeredBy": "@{pipeline().TriggerName}",
                "TriggerTime": "@{pipeline().TriggerTime}"
              }
            },
            "linkedServiceName": {
              "referenceName": "AZlogAdfPipelineFuncLS",
              "type": "LinkedServiceReference"
            }
          },
          {
            "name": "DeferralActivityLedgerSuccess",
            "description": "Log success for Deferral Activity ",
            "type": "AzureFunctionActivity",
            "dependsOn": [
              {
                "activity": "DeferralActivityLedger",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "policy": {
              "timeout": "0.00:10:00",
              "retry": 3,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "functionName": "LogAdfPipelineStatus",
              "method": "POST",
              "headers": {},
              "body": {
                "Activity": "DeferralActivityLedger",
                "Status": "Success",
                "DataFactoryName": "@{pipeline().DataFactory}",
                "PipelineName": "@{pipeline().Pipeline}",
                "TriggeredBy": "@{pipeline().TriggerName}",
                "TriggerTime": "@{pipeline().TriggerTime}"
              }
            },
            "linkedServiceName": {
              "referenceName": "AZlogAdfPipelineFuncLS",
              "type": "LinkedServiceReference"
            }
          }
        ],
        "concurrency": 1,
        "parameters": {
          "ReportingStartDate": {
            "type": "string",
            "defaultValue": "01/01/2020"
          },
          "Offset": {
            "type": "string",
            "defaultValue": "7"
          }
        },
        "variables": {
          "InputRootPath": {
            "type": "String"
          },
          "ReportRootPath": {
            "type": "String"
          },
          "BinariesPath": {
            "type": "String"
          },
          "ScriptRootPath": {
            "type": "String",
            "defaultValue": "resources/Scripts"
          },
          "RunDate": {
            "type": "String"
          }
        },
        "folder": {
          "name": "Report"
        },
        "annotations": []
      },
      "dependsOn": [
        "[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorageGen2')]",
        "[concat(variables('factoryId'), '/linkedServices/AzureDataLakeAnalytics')]",
        "[concat(variables('factoryId'), '/linkedServices/AZlogAdfPipelineFuncLS')]"
      ]
    },
    {
      "name": "[concat(parameters('factoryName'), '/ExecuteCAToInvoiceTest')]",
      "type": "Microsoft.DataFactory/factories/pipelines",
      "apiVersion": "2018-06-01",
      "properties": {
        "activities": [
          {
            "name": "DeployInvoiceLineItemDetails",
            "type": "ExecutePipeline",
            "dependsOn": [],
            "userProperties": [],
            "typeProperties": {
              "pipeline": {
                "referenceName": "CopyFileFromGen2toGen2Storage",
                "type": "PipelineReference"
              },
              "waitOnCompletion": true,
              "parameters": {
                "srcContainer": {
                  "value": "test",
                  "type": "Expression"
                },
                "srcPath": {
                  "value": "data/InvoiceLineItemDetails",
                  "type": "Expression"
                },
                "destContainer": {
                  "value": "invoice-lineitemdetails",
                  "type": "Expression"
                },
                "destPath": {
                  "value": "test/document-details-journal/2020/10/14/11/18/Microsoft.Commerce.Contracts.Invoicing.V20200331.DocumentLineItemCreatedEvent/InvoicingProcessor",
                  "type": "Expression"
                }
              }
            }
          },
          {
            "name": "DeployLineitemFlushedEvents",
            "type": "ExecutePipeline",
            "dependsOn": [],
            "userProperties": [],
            "typeProperties": {
              "pipeline": {
                "referenceName": "CopyFileFromGen2toGen2Storage",
                "type": "PipelineReference"
              },
              "waitOnCompletion": true,
              "parameters": {
                "srcContainer": {
                  "value": "test",
                  "type": "Expression"
                },
                "srcPath": {
                  "value": "data/LineItemFlushed",
                  "type": "Expression"
                },
                "destContainer": {
                  "value": "chargeaggregator",
                  "type": "Expression"
                },
                "destPath": {
                  "value": "test/ca-journal/2020/10/14/11/29/Microsoft.Commerce.Contracts.Invoicing.V20200331.LineItemFlushedEvent/InvoicingProcessor",
                  "type": "Expression"
                }
              }
            }
          },
          {
            "name": "DeployInvoiceSummary",
            "type": "ExecutePipeline",
            "dependsOn": [],
            "userProperties": [],
            "typeProperties": {
              "pipeline": {
                "referenceName": "CopyFileFromGen2toGen2Storage",
                "type": "PipelineReference"
              },
              "waitOnCompletion": true,
              "parameters": {
                "srcContainer": {
                  "value": "test",
                  "type": "Expression"
                },
                "srcPath": {
                  "value": "data/InvoiceSummary",
                  "type": "Expression"
                },
                "destContainer": {
                  "value": "invoice-docsummary",
                  "type": "Expression"
                },
                "destPath": {
                  "value": "test/document-summary-journal/2020/10/14/11",
                  "type": "Expression"
                }
              }
            }
          },
          {
            "name": "DeployViews",
            "type": "ExecutePipeline",
            "dependsOn": [],
            "userProperties": [],
            "typeProperties": {
              "pipeline": {
                "referenceName": "CopyFileFromGen2toGen2Storage",
                "type": "PipelineReference"
              },
              "waitOnCompletion": true,
              "parameters": {
                "srcContainer": {
                  "value": "transformation",
                  "type": "Expression"
                },
                "srcPath": {
                  "value": "data/Ingestion/Views",
                  "type": "Expression"
                },
                "destContainer": {
                  "value": "transformation",
                  "type": "Expression"
                },
                "destPath": {
                  "value": "data/Ingestion/test/Views",
                  "type": "Expression"
                }
              }
            }
          },
          {
            "name": "RunCaToInvoiceTest",
            "type": "ExecutePipeline",
            "dependsOn": [
              {
                "activity": "DeployInvoiceLineItemDetails",
                "dependencyConditions": [
                  "Succeeded"
                ]
              },
              {
                "activity": "DeployLineitemFlushedEvents",
                "dependencyConditions": [
                  "Succeeded"
                ]
              },
              {
                "activity": "DeployInvoiceSummary",
                "dependencyConditions": [
                  "Succeeded"
                ]
              },
              {
                "activity": "DeployViews",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "userProperties": [],
            "typeProperties": {
              "pipeline": {
                "referenceName": "CAToInvoice",
                "type": "PipelineReference"
              },
              "waitOnCompletion": true,
              "parameters": {
                "RunDate": {
                  "value": "10/16/2020",
                  "type": "Expression"
                },
                "ExtractionBackDays": {
                  "value": "-1",
                  "type": "Expression"
                },
                "RunInTestMode": {
                  "value": "true",
                  "type": "Expression"
                }
              }
            }
          }
        ],
        "folder": {
          "name": "TestInProduction"
        },
        "annotations": []
      },
      "dependsOn": [
        "[concat(variables('factoryId'), '/pipelines/CopyFileFromGen2toGen2Storage')]",
        "[concat(variables('factoryId'), '/pipelines/CAToInvoice')]"
      ]
    },
    {
      "name": "[concat(parameters('factoryName'), '/InvoiceToCrusher')]",
      "type": "Microsoft.DataFactory/factories/pipelines",
      "apiVersion": "2018-06-01",
      "properties": {
        "description": "Recon control between invoice and crusher",
        "activities": [
          {
            "name": "InvoiceToCrusherControl",
            "description": "Control between Invoice and crusher",
            "type": "DataLakeAnalyticsScope",
            "dependsOn": [
              {
                "activity": "SetOutputRootPath",
                "dependencyConditions": [
                  "Succeeded"
                ]
              },
              {
                "activity": "SetDefaultIngestionStartDate",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "policy": {
              "timeout": "0.02:00:00",
              "retry": 3,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "scriptFolderPath": {
                "value": "@variables('ScriptRootPath')",
                "type": "Expression"
              },
              "scriptFileName": "InvoiceToCrusherRecon.script",
              "runtimeVersion": {
                "value": "@pipeline().globalParameters.ScopeRunTime",
                "type": "Expression"
              },
              "scriptLinkedService": {
                "referenceName": "AzureDataLakeStorageGen2",
                "type": "LinkedServiceReference"
              },
              "parameters": {
                "INVOCEINPUTROOTPATH": {
                  "value": "@variables('IngestionRootPath')",
                  "type": "Expression"
                },
                "CRUSHERINPUTROOTPATH": {
                  "value": "@variables('CrusherRootPath')",
                  "type": "Expression"
                },
                "COMMONINPUTROOTPATH": {
                  "value": "@variables('CommonRootPath')",
                  "type": "Expression"
                },
                "OUTPUTROOTPATH": {
                  "value": "@variables('ControlOutputRootPath')",
                  "type": "Expression"
                },
                "INGESTIONSTARTDATE": {
                  "value": "@concat('\"', variables('IngestionStartDate'), '\"')",
                  "type": "Expression"
                },
                "RUNDATE": {
                  "value": "@concat('\"', pipeline().parameters.RunDate, '\"')",
                  "type": "Expression"
                },
                "INCLUDETEST": {
                  "value": "@variables('IncludeTest')",
                  "type": "Expression"
                },
                "RESOURCEPATH": {
                  "value": "@variables('BinariesPath')",
                  "type": "Expression"
                },
                "CONTROLLATENCYROOTPATH": {
                  "value": "@variables('ControlLatencyRootPath')",
                  "type": "Expression"
                },
                "CONTROLNAME": {
                  "value": "@variables('ControlName')",
                  "type": "Expression"
                }
              }
            },
            "linkedServiceName": {
              "referenceName": "AzureDataLakeAnalytics",
              "type": "LinkedServiceReference"
            }
          },
          {
            "name": "InvoiceToCrusherAnalysis",
            "description": "Analysis script for Invoice to Crusher",
            "type": "DataLakeAnalyticsScope",
            "dependsOn": [
              {
                "activity": "SetAnalysisOutputRootPath",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "policy": {
              "timeout": "0.01:00:00",
              "retry": 3,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "scriptFolderPath": {
                "value": "@variables('ScriptRootPath')",
                "type": "Expression"
              },
              "scriptFileName": "ReconAnalysis.script",
              "runtimeVersion": {
                "value": "@pipeline().globalParameters.ScopeRunTime",
                "type": "Expression"
              },
              "scriptLinkedService": {
                "referenceName": "AzureDataLakeStorageGen2",
                "type": "LinkedServiceReference"
              },
              "parameters": {
                "CONTROLNAME": {
                  "value": "@variables('ControlName')",
                  "type": "Expression"
                },
                "RECONRESULTSTREAMPATH": {
                  "value": "@variables('AnalysisInputStreamPath')",
                  "type": "Expression"
                },
                "SLAINHOURS": "24",
                "OUTPUTROOTPATH": {
                  "value": "@variables('AnalysisOutputRootPath')",
                  "type": "Expression"
                },
                "ENGINEERINGTHRESHOLD": "100",
                "SOXTHRESHOLD": "1000000",
                "RUNDATE": {
                  "value": "@concat('\"', pipeline().parameters.RunDate, '\"')",
                  "type": "Expression"
                }
              }
            },
            "linkedServiceName": {
              "referenceName": "AzureDataLakeAnalytics",
              "type": "LinkedServiceReference"
            }
          },
          {
            "name": "LogEnggAnalysisResultsForInvoiceToCrusher",
            "description": "Send Engineering Analysis results for Invoice To Crusher",
            "type": "AzureFunctionActivity",
            "dependsOn": [
              {
                "activity": "InvoiceToCrusherAnalysis",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "policy": {
              "timeout": "0.00:10:00",
              "retry": 3,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "functionName": "LogReconResult",
              "method": "POST",
              "headers": {},
              "body": {
                "ReconResultUri": "control/data/Recon/InvoiceToCrusher/Analysis/EngineeringAnalysis_InvoiceToCrusher.csv"
              }
            },
            "linkedServiceName": {
              "referenceName": "AZLogReconAnalysisLS",
              "type": "LinkedServiceReference"
            }
          },
          {
            "name": "InvoiceToCrusherAnalysisLogSuccess",
            "description": "Log success for Invoice To Crusher analysis",
            "type": "AzureFunctionActivity",
            "dependsOn": [
              {
                "activity": "InvoiceToCrusherAnalysis",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "policy": {
              "timeout": "0.00:10:00",
              "retry": 3,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "functionName": "LogAdfPipelineStatus",
              "method": "POST",
              "headers": {},
              "body": {
                "Activity": "InvoiceToCrusherAnalysis",
                "Status": "Success",
                "DataFactoryName": "@{pipeline().DataFactory}",
                "PipelineName": "@{pipeline().Pipeline}",
                "TriggeredBy": "@{pipeline().TriggerName}",
                "TriggerTime": "@{pipeline().TriggerTime}"
              }
            },
            "linkedServiceName": {
              "referenceName": "AZlogAdfPipelineFuncLS",
              "type": "LinkedServiceReference"
            }
          },
          {
            "name": "InvoiceToCrusherControlLogFailure",
            "description": "Log failure for Invoice to Crusher control",
            "type": "AzureFunctionActivity",
            "dependsOn": [
              {
                "activity": "InvoiceToCrusherControl",
                "dependencyConditions": [
                  "Failed"
                ]
              }
            ],
            "policy": {
              "timeout": "0.00:10:00",
              "retry": 3,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "functionName": "LogAdfPipelineStatus",
              "method": "POST",
              "headers": {},
              "body": {
                "Activity": "InvoiceToCrusherControl",
                "Status": "Failed",
                "DataFactoryName": "@{pipeline().DataFactory}",
                "PipelineName": "@{pipeline().Pipeline}",
                "TriggeredBy": "@{pipeline().TriggerName}",
                "TriggerTime": "@{pipeline().TriggerTime}"
              }
            },
            "linkedServiceName": {
              "referenceName": "AZlogAdfPipelineFuncLS",
              "type": "LinkedServiceReference"
            }
          },
          {
            "name": "InvoiceToCrusherControlLogSuccess",
            "description": "Log success for Invoice to Crusher control",
            "type": "AzureFunctionActivity",
            "dependsOn": [
              {
                "activity": "InvoiceToCrusherControl",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "policy": {
              "timeout": "0.00:10:00",
              "retry": 3,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "functionName": "LogAdfPipelineStatus",
              "method": "POST",
              "headers": {},
              "body": {
                "Activity": "InvoiceToCrusherControl",
                "Status": "Success",
                "DataFactoryName": "@{pipeline().DataFactory}",
                "PipelineName": "@{pipeline().Pipeline}",
                "TriggeredBy": "@{pipeline().TriggerName}",
                "TriggerTime": "@{pipeline().TriggerTime}"
              }
            },
            "linkedServiceName": {
              "referenceName": "AZlogAdfPipelineFuncLS",
              "type": "LinkedServiceReference"
            }
          },
          {
            "name": "InvoiceToCrusherAnalysisLogFailure",
            "description": "log failure for Invoice To Crusher analysis",
            "type": "AzureFunctionActivity",
            "dependsOn": [
              {
                "activity": "InvoiceToCrusherAnalysis",
                "dependencyConditions": [
                  "Failed"
                ]
              }
            ],
            "policy": {
              "timeout": "0.00:10:00",
              "retry": 3,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "functionName": "LogAdfPipelineStatus",
              "method": "POST",
              "headers": {},
              "body": {
                "Activity": "InvoiceToCrusherAnalysis",
                "Status": "Failed",
                "DataFactoryName": "@{pipeline().DataFactory}",
                "PipelineName": "@{pipeline().Pipeline}",
                "TriggeredBy": "@{pipeline().TriggerName}",
                "TriggerTime": "@{pipeline().TriggerTime}"
              }
            },
            "linkedServiceName": {
              "referenceName": "AZlogAdfPipelineFuncLS",
              "type": "LinkedServiceReference"
            }
          },
          {
            "name": "SetIngestionRootPath",
            "description": "Set input root path for control",
            "type": "SetVariable",
            "dependsOn": [
              {
                "activity": "SetBinariesPath",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "userProperties": [],
            "typeProperties": {
              "variableName": "IngestionRootPath",
              "value": {
                "value": "@concat('\"', pipeline().globalParameters.ADLGen2StorageProtocolPrefix,  'transformation@', pipeline().globalParameters.ADLGen2StorageAccountName, pipeline().globalParameters.ADLGen2StoragePathSuffix, '/data/Ingestion\"')",
                "type": "Expression"
              }
            }
          },
          {
            "name": "SetOutputRootPath",
            "description": "set output root path for control",
            "type": "SetVariable",
            "dependsOn": [
              {
                "activity": "SetCommonRootPath",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "userProperties": [],
            "typeProperties": {
              "variableName": "ControlOutputRootPath",
              "value": {
                "value": "@concat('\"', pipeline().globalParameters.ADLGen2StorageProtocolPrefix,  'control@', pipeline().globalParameters.ADLGen2StorageAccountName, pipeline().globalParameters.ADLGen2StoragePathSuffix, '/data/Recon/', variables('ControlName'), '\"')",
                "type": "Expression"
              }
            }
          },
          {
            "name": "SetCommonRootPath",
            "description": "set common root path",
            "type": "SetVariable",
            "dependsOn": [
              {
                "activity": "SetCrusherRootPath",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "userProperties": [],
            "typeProperties": {
              "variableName": "CommonRootPath",
              "value": {
                "value": "@concat('\"', pipeline().globalParameters.ADLGen2StorageProtocolPrefix,  'transformation@', pipeline().globalParameters.ADLGen2StorageAccountName, pipeline().globalParameters.ADLGen2StoragePathSuffix, '/data/Ingestion\"')",
                "type": "Expression"
              }
            }
          },
          {
            "name": "SetBinariesPath",
            "description": "Set path for binary resources",
            "type": "SetVariable",
            "dependsOn": [],
            "userProperties": [],
            "typeProperties": {
              "variableName": "BinariesPath",
              "value": {
                "value": "@concat('\"', pipeline().globalParameters.ADLGen2StorageProtocolPrefix, 'resources@', \npipeline().globalParameters.ADLGen2StorageAccountName, pipeline().globalParameters.ADLGen2StoragePathSuffix, '/Binaries/\"')",
                "type": "Expression"
              }
            }
          },
          {
            "name": "SetAnalysisStreamInputPath",
            "description": "Set path for control stream that is input to Analysis script",
            "type": "SetVariable",
            "dependsOn": [
              {
                "activity": "InvoiceToCrusherControl",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "userProperties": [],
            "typeProperties": {
              "variableName": "AnalysisInputStreamPath",
              "value": {
                "value": "@concat('\"', pipeline().globalParameters.ADLGen2StorageProtocolPrefix,  'control@', pipeline().globalParameters.ADLGen2StorageAccountName, pipeline().globalParameters.ADLGen2StoragePathSuffix, '/data/Recon/', variables('ControlName'), '/Latest', variables('ControlName'), 'ReconResults.ss\"')",
                "type": "Expression"
              }
            }
          },
          {
            "name": "SetAnalysisOutputRootPath",
            "type": "SetVariable",
            "dependsOn": [
              {
                "activity": "SetAnalysisStreamInputPath",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "userProperties": [],
            "typeProperties": {
              "variableName": "AnalysisOutputRootPath",
              "value": {
                "value": "@concat('\"', pipeline().globalParameters.ADLGen2StorageProtocolPrefix,  'control@', pipeline().globalParameters.ADLGen2StorageAccountName, pipeline().globalParameters.ADLGen2StoragePathSuffix, '/data/Recon/', variables('ControlName'), '/Analysis\"')",
                "type": "Expression"
              }
            }
          },
          {
            "name": "SetControlLatencyRootPath",
            "description": "Set path for control latency files",
            "type": "SetVariable",
            "dependsOn": [],
            "userProperties": [],
            "typeProperties": {
              "variableName": "ControlLatencyRootPath",
              "value": {
                "value": "@concat('\"', pipeline().globalParameters.ADLGen2StorageProtocolPrefix,  'control@', pipeline().globalParameters.ADLGen2StorageAccountName, pipeline().globalParameters.ADLGen2StoragePathSuffix, '/data/Recon/ControlLatency', '\"')",
                "type": "Expression"
              }
            }
          },
          {
            "name": "LogSOXAnalysisResultsForInvoiceToCrusher",
            "description": "Send SOX Analysis results for Invoice To Crusher",
            "type": "AzureFunctionActivity",
            "dependsOn": [
              {
                "activity": "InvoiceToCrusherAnalysis",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "policy": {
              "timeout": "0.00:10:00",
              "retry": 3,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "functionName": "LogReconResult",
              "method": "POST",
              "headers": {},
              "body": {
                "ReconResultUri": "control/data/Recon/InvoiceToCrusher/Analysis/SOXAnalysis_InvoiceToCrusher.csv"
              }
            },
            "linkedServiceName": {
              "referenceName": "AZLogReconAnalysisLS",
              "type": "LinkedServiceReference"
            }
          },
          {
            "name": "SetCrusherRootPath",
            "type": "SetVariable",
            "dependsOn": [
              {
                "activity": "SetIngestionRootPath",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "userProperties": [],
            "typeProperties": {
              "variableName": "CrusherRootPath",
              "value": {
                "value": "@concat('\"', pipeline().globalParameters.ADLGen2StorageProtocolPrefix,  'crusher@', pipeline().globalParameters.ADLGen2StorageAccountName, pipeline().globalParameters.ADLGen2StoragePathSuffix, '\"')",
                "type": "Expression"
              }
            }
          },
          {
            "name": "SetDefaultIngestionStartDate",
            "type": "SetVariable",
            "dependsOn": [
              {
                "activity": "SetControlLatencyRootPath",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "userProperties": [],
            "typeProperties": {
              "variableName": "IngestionStartDate",
              "value": {
                "value": "@formatDateTime(addToTime(pipeline().parameters.RunDate, int(pipeline().parameters.ExtractionBackDays),'Day'), 'MM/dd/yyyy')",
                "type": "Expression"
              }
            }
          }
        ],
        "concurrency": 1,
        "parameters": {
          "RunDate": {
            "type": "string",
            "defaultValue": "05/01/2020"
          },
          "ExtractionBackDays": {
            "type": "string",
            "defaultValue": "-4"
          }
        },
        "variables": {
          "ScriptRootPath": {
            "type": "String",
            "defaultValue": "resources/Scripts"
          },
          "IngestionRootPath": {
            "type": "String"
          },
          "CommonRootPath": {
            "type": "String"
          },
          "ControlOutputRootPath": {
            "type": "String"
          },
          "IncludeTest": {
            "type": "String",
            "defaultValue": "[parameters('InvoiceToCrusher_properties_variables_IncludeTest_defaultValue')]"
          },
          "ControlName": {
            "type": "String",
            "defaultValue": "InvoiceToCrusher"
          },
          "Container": {
            "type": "String",
            "defaultValue": "control"
          },
          "ErrorMessage": {
            "type": "String"
          },
          "BinariesPath": {
            "type": "String"
          },
          "IngestionStartDate": {
            "type": "String"
          },
          "AnalysisInputStreamPath": {
            "type": "String"
          },
          "AnalysisOutputRootPath": {
            "type": "String"
          },
          "ControlLatencyRootPath": {
            "type": "String"
          },
          "CrusherRootPath": {
            "type": "String"
          }
        },
        "folder": {
          "name": "Control"
        },
        "annotations": []
      },
      "dependsOn": [
        "[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorageGen2')]",
        "[concat(variables('factoryId'), '/linkedServices/AzureDataLakeAnalytics')]",
        "[concat(variables('factoryId'), '/linkedServices/AZLogReconAnalysisLS')]",
        "[concat(variables('factoryId'), '/linkedServices/AZlogAdfPipelineFuncLS')]"
      ]
    },
    {
      "name": "[concat(parameters('factoryName'), '/InvoiceToInvoice')]",
      "type": "Microsoft.DataFactory/factories/pipelines",
      "apiVersion": "2018-06-01",
      "properties": {
        "description": "Recon control between Invoice line items and Document summary",
        "activities": [
          {
            "name": "InvoiceToInvoice",
            "description": "Control between Invoice and Invoice",
            "type": "DataLakeAnalyticsScope",
            "dependsOn": [
              {
                "activity": "SetOutputRootPath",
                "dependencyConditions": [
                  "Succeeded"
                ]
              },
              {
                "activity": "SetDefaultIngestionStartDate",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "policy": {
              "timeout": "0.02:00:00",
              "retry": 3,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "scriptFolderPath": {
                "value": "@variables('ScriptRootPath')",
                "type": "Expression"
              },
              "scriptFileName": "InvoiceToInvoiceRecon.script",
              "runtimeVersion": {
                "value": "@pipeline().globalParameters.ScopeRunTime",
                "type": "Expression"
              },
              "scriptLinkedService": {
                "referenceName": "AzureDataLakeStorageGen2",
                "type": "LinkedServiceReference"
              },
              "parameters": {
                "CAINPUTROOTPATH": {
                  "value": "@variables('IngestionRootPath')",
                  "type": "Expression"
                },
                "INVOICEINPUTROOTPATH": {
                  "value": "@variables('IngestionRootPath')",
                  "type": "Expression"
                },
                "COMMONINPUTROOTPATH": {
                  "value": "@variables('CommonRootPath')",
                  "type": "Expression"
                },
                "OUTPUTROOTPATH": {
                  "value": "@variables('ControlOutputRootPath')",
                  "type": "Expression"
                },
                "INGESTIONSTARTDATE": {
                  "value": "@concat('\"', variables('IngestionStartDate'), '\"')",
                  "type": "Expression"
                },
                "RUNDATE": {
                  "value": "@concat('\"', variables('OffsetedRunDate'), '\"')",
                  "type": "Expression"
                },
                "INCLUDETEST": {
                  "value": "@variables('IncludeTest')",
                  "type": "Expression"
                },
                "RESOURCEPATH": {
                  "value": "@variables('BinariesPath')",
                  "type": "Expression"
                },
                "CONTROLLATENCYROOTPATH": {
                  "value": "@variables('ControlLatencyRootPath')",
                  "type": "Expression"
                },
                "CONTROLNAME": {
                  "value": "@variables('ControlName')",
                  "type": "Expression"
                }
              }
            },
            "linkedServiceName": {
              "referenceName": "AzureDataLakeAnalytics",
              "type": "LinkedServiceReference"
            }
          },
          {
            "name": "InvoiceToInvoiceAnalysis",
            "description": "Analysis script for Invoice to Invoice",
            "type": "DataLakeAnalyticsScope",
            "dependsOn": [
              {
                "activity": "SetAnalysisOutputRootPath",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "policy": {
              "timeout": "0.01:00:00",
              "retry": 3,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "scriptFolderPath": {
                "value": "@variables('ScriptRootPath')",
                "type": "Expression"
              },
              "scriptFileName": "ReconAnalysis.script",
              "runtimeVersion": {
                "value": "@pipeline().globalParameters.ScopeRunTime",
                "type": "Expression"
              },
              "scriptLinkedService": {
                "referenceName": "AzureDataLakeStorageGen2",
                "type": "LinkedServiceReference"
              },
              "parameters": {
                "CONTROLNAME": {
                  "value": "@variables('ControlName')",
                  "type": "Expression"
                },
                "RECONRESULTSTREAMPATH": {
                  "value": "@variables('AnalysisInputStreamPath')",
                  "type": "Expression"
                },
                "SLAINHOURS": "24",
                "OUTPUTROOTPATH": {
                  "value": "@variables('AnalysisOutputRootPath')",
                  "type": "Expression"
                },
                "ENGINEERINGTHRESHOLD": "100",
                "SOXTHRESHOLD": "1000000",
                "RUNDATE": {
                  "value": "@concat('\"', pipeline().parameters.RunDate, '\"')",
                  "type": "Expression"
                }
              }
            },
            "linkedServiceName": {
              "referenceName": "AzureDataLakeAnalytics",
              "type": "LinkedServiceReference"
            }
          },
          {
            "name": "LogEnggAnalysisResultsForInvoiceToInvoice",
            "description": "Send Engineering Analysis results for Invoice to Invoice",
            "type": "AzureFunctionActivity",
            "dependsOn": [
              {
                "activity": "InvoiceToInvoiceAnalysis",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "policy": {
              "timeout": "0.00:10:00",
              "retry": 3,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "functionName": "LogReconResult",
              "method": "POST",
              "headers": {},
              "body": {
                "ReconResultUri": "control/data/Recon/InvoiceToInvoice/Analysis/EngineeringAnalysis_InvoiceToInvoice.csv"
              }
            },
            "linkedServiceName": {
              "referenceName": "AZLogReconAnalysisLS",
              "type": "LinkedServiceReference"
            }
          },
          {
            "name": "InvoiceToInvoiceAnalysisLogSuccess",
            "description": "Log success for Invoice to Invoice analysis",
            "type": "AzureFunctionActivity",
            "dependsOn": [
              {
                "activity": "InvoiceToInvoiceAnalysis",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "policy": {
              "timeout": "0.00:10:00",
              "retry": 3,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "functionName": "LogAdfPipelineStatus",
              "method": "POST",
              "headers": {},
              "body": {
                "value": "{\"Activity\":\"InvoiceToInvoiceAnalysis\", \"Status\":\"Success\", \"DataFactoryName\": \"@{pipeline().DataFactory}\", \"PipelineName\": \"@{pipeline().Pipeline}\", \"TriggeredBy\": \"@{pipeline().TriggerName}\", \"TriggerTime\":\"@{pipeline().TriggerTime}\",\"PipelineRunId\":\"@{pipeline().RunId}\"}",
                "type": "Expression"
              }
            },
            "linkedServiceName": {
              "referenceName": "AZlogAdfPipelineFuncLS",
              "type": "LinkedServiceReference"
            }
          },
          {
            "name": "InvoiceToInvoiceControlLogFailure",
            "description": "Log failure for Invoice to Invoice control",
            "type": "AzureFunctionActivity",
            "dependsOn": [
              {
                "activity": "InvoiceToInvoice",
                "dependencyConditions": [
                  "Failed"
                ]
              }
            ],
            "policy": {
              "timeout": "0.00:10:00",
              "retry": 3,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "functionName": "LogAdfPipelineStatus",
              "method": "POST",
              "headers": {},
              "body": {
                "Activity": "InvoiceToInvoiceControl",
                "Status": "Failed",
                "DataFactoryName": "@{pipeline().DataFactory}",
                "PipelineName": "@{pipeline().Pipeline}",
                "TriggeredBy": "@{pipeline().TriggerName}",
                "TriggerTime": "@{pipeline().TriggerTime}",
                "PipelineRunId": "@{pipeline().RunId}"
              }
            },
            "linkedServiceName": {
              "referenceName": "AZlogAdfPipelineFuncLS",
              "type": "LinkedServiceReference"
            }
          },
          {
            "name": "InvoiceToInvoiceControlLogSuccess",
            "description": "Log success for Invoice to Invoice control",
            "type": "AzureFunctionActivity",
            "dependsOn": [
              {
                "activity": "InvoiceToInvoice",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "policy": {
              "timeout": "0.00:10:00",
              "retry": 3,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "functionName": "LogAdfPipelineStatus",
              "method": "POST",
              "headers": {},
              "body": {
                "Activity": "InvoiceToInvoiceControl",
                "Status": "Success",
                "DataFactoryName": "@{pipeline().DataFactory}",
                "PipelineName": "@{pipeline().Pipeline}",
                "TriggeredBy": "@{pipeline().TriggerName}",
                "TriggerTime": "@{pipeline().TriggerTime}",
                "PipelineRunId": "@{pipeline().RunId}"
              }
            },
            "linkedServiceName": {
              "referenceName": "AZlogAdfPipelineFuncLS",
              "type": "LinkedServiceReference"
            }
          },
          {
            "name": "InvoiceToInvoiceAnalysisLogFailure",
            "description": "log failure for Invoice to Invoice analysis",
            "type": "AzureFunctionActivity",
            "dependsOn": [
              {
                "activity": "InvoiceToInvoiceAnalysis",
                "dependencyConditions": [
                  "Failed"
                ]
              }
            ],
            "policy": {
              "timeout": "0.00:10:00",
              "retry": 3,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "functionName": "LogAdfPipelineStatus",
              "method": "POST",
              "headers": {},
              "body": {
                "Activity": "InvoiceToInvoiceAnalysis",
                "Status": "Failed",
                "DataFactoryName": "@{pipeline().DataFactory}",
                "PipelineName": "@{pipeline().Pipeline}",
                "TriggeredBy": "@{pipeline().TriggerName}",
                "TriggerTime": "@{pipeline().TriggerTime}",
                "PipelineRunId": "@{pipeline().RunId}"
              }
            },
            "linkedServiceName": {
              "referenceName": "AZlogAdfPipelineFuncLS",
              "type": "LinkedServiceReference"
            }
          },
          {
            "name": "SetIngestionRootPath",
            "description": "Set input root path for control",
            "type": "SetVariable",
            "dependsOn": [
              {
                "activity": "SetBinariesPath",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "userProperties": [],
            "typeProperties": {
              "variableName": "IngestionRootPath",
              "value": {
                "value": "@concat('\"', pipeline().globalParameters.ADLGen2StorageProtocolPrefix,  'transformation@', pipeline().globalParameters.ADLGen2StorageAccountName, pipeline().globalParameters.ADLGen2StoragePathSuffix, '/data/Ingestion\"')",
                "type": "Expression"
              }
            }
          },
          {
            "name": "SetOutputRootPath",
            "description": "set output root path for control",
            "type": "SetVariable",
            "dependsOn": [
              {
                "activity": "SetCommonRootPath",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "userProperties": [],
            "typeProperties": {
              "variableName": "ControlOutputRootPath",
              "value": {
                "value": "@concat('\"', pipeline().globalParameters.ADLGen2StorageProtocolPrefix,  'control@', pipeline().globalParameters.ADLGen2StorageAccountName, pipeline().globalParameters.ADLGen2StoragePathSuffix, '/data/Recon/', variables('ControlName'), '\"')",
                "type": "Expression"
              }
            }
          },
          {
            "name": "SetCommonRootPath",
            "description": "set common root path",
            "type": "SetVariable",
            "dependsOn": [
              {
                "activity": "SetIngestionRootPath",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "userProperties": [],
            "typeProperties": {
              "variableName": "CommonRootPath",
              "value": {
                "value": "@concat('\"', pipeline().globalParameters.ADLGen2StorageProtocolPrefix,  'transformation@', pipeline().globalParameters.ADLGen2StorageAccountName, pipeline().globalParameters.ADLGen2StoragePathSuffix, '/data/Ingestion\"')",
                "type": "Expression"
              }
            }
          },
          {
            "name": "SetBinariesPath",
            "description": "Set path for binary reosurces",
            "type": "SetVariable",
            "dependsOn": [],
            "userProperties": [],
            "typeProperties": {
              "variableName": "BinariesPath",
              "value": {
                "value": "@concat('\"', pipeline().globalParameters.ADLGen2StorageProtocolPrefix, 'resources@', \npipeline().globalParameters.ADLGen2StorageAccountName, pipeline().globalParameters.ADLGen2StoragePathSuffix, '/Binaries/\"')",
                "type": "Expression"
              }
            }
          },
          {
            "name": "SetAnalysisStreamInputPath",
            "description": "Set path for control stream that is input to Analysis script",
            "type": "SetVariable",
            "dependsOn": [
              {
                "activity": "InvoiceToInvoice",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "userProperties": [],
            "typeProperties": {
              "variableName": "AnalysisInputStreamPath",
              "value": {
                "value": "@concat('\"', pipeline().globalParameters.ADLGen2StorageProtocolPrefix,  'control@', pipeline().globalParameters.ADLGen2StorageAccountName, pipeline().globalParameters.ADLGen2StoragePathSuffix, '/data/Recon/', variables('ControlName'), '/Latest', variables('ControlName'), 'ReconResults.ss\"')",
                "type": "Expression"
              }
            }
          },
          {
            "name": "SetAnalysisOutputRootPath",
            "type": "SetVariable",
            "dependsOn": [
              {
                "activity": "SetAnalysisStreamInputPath",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "userProperties": [],
            "typeProperties": {
              "variableName": "AnalysisOutputRootPath",
              "value": {
                "value": "@concat('\"', pipeline().globalParameters.ADLGen2StorageProtocolPrefix,  'control@', pipeline().globalParameters.ADLGen2StorageAccountName, pipeline().globalParameters.ADLGen2StoragePathSuffix, '/data/Recon/', variables('ControlName'), '/Analysis\"')",
                "type": "Expression"
              }
            }
          },
          {
            "name": "SetControlLatencyRootPath",
            "description": "Set path for control latency files",
            "type": "SetVariable",
            "dependsOn": [],
            "userProperties": [],
            "typeProperties": {
              "variableName": "ControlLatencyRootPath",
              "value": {
                "value": "@concat('\"', pipeline().globalParameters.ADLGen2StorageProtocolPrefix,  'control@', pipeline().globalParameters.ADLGen2StorageAccountName, pipeline().globalParameters.ADLGen2StoragePathSuffix, '/data/Recon/ControlLatency', '\"')",
                "type": "Expression"
              }
            }
          },
          {
            "name": "LogSOXAnalysisResultsForInvoiceToInvoice",
            "description": "Send SOX Analysis results for Invoice to Invoice",
            "type": "AzureFunctionActivity",
            "dependsOn": [
              {
                "activity": "InvoiceToInvoiceAnalysis",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "policy": {
              "timeout": "0.00:10:00",
              "retry": 3,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "functionName": "LogReconResult",
              "method": "POST",
              "headers": {},
              "body": {
                "ReconResultUri": "control/data/Recon/InvoiceToInvoice/Analysis/SOXAnalysis_InvoiceToInvoice.csv"
              }
            },
            "linkedServiceName": {
              "referenceName": "AZLogReconAnalysisLS",
              "type": "LinkedServiceReference"
            }
          },
          {
            "name": "SetDefaultIngestionStartDate",
            "type": "SetVariable",
            "dependsOn": [
              {
                "activity": "SetControlLatencyRootPath",
                "dependencyConditions": [
                  "Succeeded"
                ]
              },
              {
                "activity": "SetOffsetedRunDate",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "userProperties": [],
            "typeProperties": {
              "variableName": "IngestionStartDate",
              "value": {
                "value": "@formatDateTime(addToTime(variables('OffsetedRunDate'), int(pipeline().parameters.ExtractionBackDays),'Day'), 'MM/dd/yyyy')",
                "type": "Expression"
              }
            }
          },
          {
            "name": "SetOffsetedRunDate",
            "type": "SetVariable",
            "dependsOn": [],
            "userProperties": [],
            "typeProperties": {
              "variableName": "OffsetedRunDate",
              "value": {
                "value": "@formatDateTime(addToTime(pipeline().parameters.RunDate, -1,'Day'), 'MM/dd/yyyy')",
                "type": "Expression"
              }
            }
          }
        ],
        "concurrency": 1,
        "parameters": {
          "RunDate": {
            "type": "string",
            "defaultValue": "10/26/2020"
          },
          "ExtractionBackDays": {
            "type": "string",
            "defaultValue": "-1"
          }
        },
        "variables": {
          "ScriptRootPath": {
            "type": "String",
            "defaultValue": "resources/Scripts"
          },
          "IngestionRootPath": {
            "type": "String"
          },
          "CommonRootPath": {
            "type": "String"
          },
          "ControlOutputRootPath": {
            "type": "String"
          },
          "IncludeTest": {
            "type": "String",
            "defaultValue": "[parameters('InvoiceToInvoice_properties_variables_IncludeTest_defaultValue')]"
          },
          "ControlName": {
            "type": "String",
            "defaultValue": "InvoiceToInvoice"
          },
          "Container": {
            "type": "String",
            "defaultValue": "control"
          },
          "ErrorMessage": {
            "type": "String"
          },
          "BinariesPath": {
            "type": "String"
          },
          "IngestionStartDate": {
            "type": "String"
          },
          "AnalysisInputStreamPath": {
            "type": "String"
          },
          "AnalysisOutputRootPath": {
            "type": "String"
          },
          "ControlLatencyRootPath": {
            "type": "String"
          },
          "OffsetedRunDate": {
            "type": "String"
          }
        },
        "folder": {
          "name": "Control"
        },
        "annotations": []
      },
      "dependsOn": [
        "[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorageGen2')]",
        "[concat(variables('factoryId'), '/linkedServices/AzureDataLakeAnalytics')]",
        "[concat(variables('factoryId'), '/linkedServices/AZLogReconAnalysisLS')]",
        "[concat(variables('factoryId'), '/linkedServices/AZlogAdfPipelineFuncLS')]"
      ]
    },
    {
      "name": "[concat(parameters('factoryName'), '/LedgerToCrusher')]",
      "type": "Microsoft.DataFactory/factories/pipelines",
      "apiVersion": "2018-06-01",
      "properties": {
        "description": "Recon control between Ledger and crusher",
        "activities": [
          {
            "name": "LedgerToCrusherControl",
            "description": "Control between Ledger and crusher",
            "type": "DataLakeAnalyticsScope",
            "dependsOn": [
              {
                "activity": "SetOutputRootPath",
                "dependencyConditions": [
                  "Succeeded"
                ]
              },
              {
                "activity": "SetDefaultIngestionStartDate",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "policy": {
              "timeout": "0.02:00:00",
              "retry": 3,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "scriptFolderPath": {
                "value": "@variables('ScriptRootPath')",
                "type": "Expression"
              },
              "scriptFileName": "LedgerToCrusherRecon.script",
              "runtimeVersion": {
                "value": "@pipeline().globalParameters.ScopeRunTime",
                "type": "Expression"
              },
              "scriptLinkedService": {
                "referenceName": "AzureDataLakeStorageGen2",
                "type": "LinkedServiceReference"
              },
              "parameters": {
                "LEDGERINPUTROOTPATH": {
                  "value": "@variables('IngestionRootPath')",
                  "type": "Expression"
                },
                "CRUSHERINPUTROOTPATH": {
                  "value": "@variables('CrusherRootPath')",
                  "type": "Expression"
                },
                "COMMONINPUTROOTPATH": {
                  "value": "@variables('CommonRootPath')",
                  "type": "Expression"
                },
                "OUTPUTROOTPATH": {
                  "value": "@variables('ControlOutputRootPath')",
                  "type": "Expression"
                },
                "INGESTIONSTARTDATE": {
                  "value": "@concat('\"', variables('IngestionStartDate'), '\"')",
                  "type": "Expression"
                },
                "RUNDATE": {
                  "value": "@concat('\"', pipeline().parameters.RunDate, '\"')",
                  "type": "Expression"
                },
                "INCLUDETEST": {
                  "value": "@variables('IncludeTest')",
                  "type": "Expression"
                },
                "RESOURCEPATH": {
                  "value": "@variables('BinariesPath')",
                  "type": "Expression"
                },
                "CONTROLLATENCYROOTPATH": {
                  "value": "@variables('ControlLatencyRootPath')",
                  "type": "Expression"
                },
                "CONTROLNAME": {
                  "value": "@variables('ControlName')",
                  "type": "Expression"
                }
              }
            },
            "linkedServiceName": {
              "referenceName": "AzureDataLakeAnalytics",
              "type": "LinkedServiceReference"
            }
          },
          {
            "name": "LedgerToCrusherAnalysis",
            "description": "Analysis script for Ledger to Crusher",
            "type": "DataLakeAnalyticsScope",
            "dependsOn": [
              {
                "activity": "SetAnalysisOutputRootPath",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "policy": {
              "timeout": "0.01:00:00",
              "retry": 3,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "scriptFolderPath": {
                "value": "@variables('ScriptRootPath')",
                "type": "Expression"
              },
              "scriptFileName": "ReconAnalysis.script",
              "runtimeVersion": {
                "value": "@pipeline().globalParameters.ScopeRunTime",
                "type": "Expression"
              },
              "scriptLinkedService": {
                "referenceName": "AzureDataLakeStorageGen2",
                "type": "LinkedServiceReference"
              },
              "parameters": {
                "CONTROLNAME": {
                  "value": "@variables('ControlName')",
                  "type": "Expression"
                },
                "RECONRESULTSTREAMPATH": {
                  "value": "@variables('AnalysisInputStreamPath')",
                  "type": "Expression"
                },
                "SLAINHOURS": "24",
                "OUTPUTROOTPATH": {
                  "value": "@variables('AnalysisOutputRootPath')",
                  "type": "Expression"
                },
                "ENGINEERINGTHRESHOLD": "100",
                "SOXTHRESHOLD": "1000000",
                "RUNDATE": {
                  "value": "@concat('\"', pipeline().parameters.RunDate, '\"')",
                  "type": "Expression"
                }
              }
            },
            "linkedServiceName": {
              "referenceName": "AzureDataLakeAnalytics",
              "type": "LinkedServiceReference"
            }
          },
          {
            "name": "LogEnggAnalysisResultsForLedgerToCrusher",
            "description": "Send Engineering Analysis results for Ledger to Crusher",
            "type": "AzureFunctionActivity",
            "dependsOn": [
              {
                "activity": "LedgerToCrusherAnalysis",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "policy": {
              "timeout": "0.00:10:00",
              "retry": 3,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "functionName": "LogReconResult",
              "method": "POST",
              "headers": {},
              "body": {
                "ReconResultUri": "control/data/Recon/LedgerToCrusher/Analysis/EngineeringAnalysis_LedgerToCrusher.csv"
              }
            },
            "linkedServiceName": {
              "referenceName": "AZLogReconAnalysisLS",
              "type": "LinkedServiceReference"
            }
          },
          {
            "name": "LedgerToCrusherAnalysisLogSuccess",
            "description": "Log success for Ledger To Crusher analysis",
            "type": "AzureFunctionActivity",
            "dependsOn": [
              {
                "activity": "LedgerToCrusherAnalysis",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "policy": {
              "timeout": "0.00:10:00",
              "retry": 3,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "functionName": "LogAdfPipelineStatus",
              "method": "POST",
              "headers": {},
              "body": {
                "Activity": "LedgerToCrusherAnalysis",
                "Status": "Success",
                "DataFactoryName": "@{pipeline().DataFactory}",
                "PipelineName": "@{pipeline().Pipeline}",
                "TriggeredBy": "@{pipeline().TriggerName}",
                "TriggerTime": "@{pipeline().TriggerTime}"
              }
            },
            "linkedServiceName": {
              "referenceName": "AZlogAdfPipelineFuncLS",
              "type": "LinkedServiceReference"
            }
          },
          {
            "name": "LedgerToCrusherControlLogFailure",
            "description": "Log failure for Ledger to Crusher control",
            "type": "AzureFunctionActivity",
            "dependsOn": [
              {
                "activity": "LedgerToCrusherControl",
                "dependencyConditions": [
                  "Failed"
                ]
              }
            ],
            "policy": {
              "timeout": "0.00:10:00",
              "retry": 3,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "functionName": "LogAdfPipelineStatus",
              "method": "POST",
              "headers": {},
              "body": {
                "Activity": "LedgerToCrusherControl",
                "Status": "Failed",
                "DataFactoryName": "@{pipeline().DataFactory}",
                "PipelineName": "@{pipeline().Pipeline}",
                "TriggeredBy": "@{pipeline().TriggerName}",
                "TriggerTime": "@{pipeline().TriggerTime}"
              }
            },
            "linkedServiceName": {
              "referenceName": "AZlogAdfPipelineFuncLS",
              "type": "LinkedServiceReference"
            }
          },
          {
            "name": "LedgerToCrusherControlLogSuccess",
            "description": "Log success for Ledger to Crusher control",
            "type": "AzureFunctionActivity",
            "dependsOn": [
              {
                "activity": "LedgerToCrusherControl",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "policy": {
              "timeout": "0.00:10:00",
              "retry": 3,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "functionName": "LogAdfPipelineStatus",
              "method": "POST",
              "headers": {},
              "body": {
                "Activity": "LedgerToCrusherControl",
                "Status": "Success",
                "DataFactoryName": "@{pipeline().DataFactory}",
                "PipelineName": "@{pipeline().Pipeline}",
                "TriggeredBy": "@{pipeline().TriggerName}",
                "TriggerTime": "@{pipeline().TriggerTime}"
              }
            },
            "linkedServiceName": {
              "referenceName": "AZlogAdfPipelineFuncLS",
              "type": "LinkedServiceReference"
            }
          },
          {
            "name": "LedgerToCrusherAnalysisLogFailure",
            "description": "log failure for Ledger To Crusher analysis",
            "type": "AzureFunctionActivity",
            "dependsOn": [
              {
                "activity": "LedgerToCrusherAnalysis",
                "dependencyConditions": [
                  "Failed"
                ]
              }
            ],
            "policy": {
              "timeout": "0.00:10:00",
              "retry": 3,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "functionName": "LogAdfPipelineStatus",
              "method": "POST",
              "headers": {},
              "body": {
                "Activity": "LedgerToCrusherAnalysis",
                "Status": "Failed",
                "DataFactoryName": "@{pipeline().DataFactory}",
                "PipelineName": "@{pipeline().Pipeline}",
                "TriggeredBy": "@{pipeline().TriggerName}",
                "TriggerTime": "@{pipeline().TriggerTime}"
              }
            },
            "linkedServiceName": {
              "referenceName": "AZlogAdfPipelineFuncLS",
              "type": "LinkedServiceReference"
            }
          },
          {
            "name": "SetIngestionRootPath",
            "description": "Set input root path for control",
            "type": "SetVariable",
            "dependsOn": [
              {
                "activity": "SetBinariesPath",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "userProperties": [],
            "typeProperties": {
              "variableName": "IngestionRootPath",
              "value": {
                "value": "@concat('\"', pipeline().globalParameters.ADLGen2StorageProtocolPrefix,  'transformation@', pipeline().globalParameters.ADLGen2StorageAccountName, pipeline().globalParameters.ADLGen2StoragePathSuffix, '/data/Ingestion\"')",
                "type": "Expression"
              }
            }
          },
          {
            "name": "SetOutputRootPath",
            "description": "set output root path for control",
            "type": "SetVariable",
            "dependsOn": [
              {
                "activity": "SetCommonRootPath",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "userProperties": [],
            "typeProperties": {
              "variableName": "ControlOutputRootPath",
              "value": {
                "value": "@concat('\"', pipeline().globalParameters.ADLGen2StorageProtocolPrefix,  'control@', pipeline().globalParameters.ADLGen2StorageAccountName, pipeline().globalParameters.ADLGen2StoragePathSuffix, '/data/Recon/', variables('ControlName'), '\"')",
                "type": "Expression"
              }
            }
          },
          {
            "name": "SetCommonRootPath",
            "description": "set common root path",
            "type": "SetVariable",
            "dependsOn": [
              {
                "activity": "SetCrusherRootPath",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "userProperties": [],
            "typeProperties": {
              "variableName": "CommonRootPath",
              "value": {
                "value": "@concat('\"', pipeline().globalParameters.ADLGen2StorageProtocolPrefix,  'transformation@', pipeline().globalParameters.ADLGen2StorageAccountName, pipeline().globalParameters.ADLGen2StoragePathSuffix, '/data/Ingestion\"')",
                "type": "Expression"
              }
            }
          },
          {
            "name": "SetBinariesPath",
            "description": "Set path for binary resources",
            "type": "SetVariable",
            "dependsOn": [],
            "userProperties": [],
            "typeProperties": {
              "variableName": "BinariesPath",
              "value": {
                "value": "@concat('\"', pipeline().globalParameters.ADLGen2StorageProtocolPrefix, 'resources@', \npipeline().globalParameters.ADLGen2StorageAccountName, pipeline().globalParameters.ADLGen2StoragePathSuffix, '/Binaries/\"')",
                "type": "Expression"
              }
            }
          },
          {
            "name": "SetAnalysisStreamInputPath",
            "description": "Set path for control stream that is input to Analysis script",
            "type": "SetVariable",
            "dependsOn": [
              {
                "activity": "LedgerToCrusherControl",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "userProperties": [],
            "typeProperties": {
              "variableName": "AnalysisInputStreamPath",
              "value": {
                "value": "@concat('\"', pipeline().globalParameters.ADLGen2StorageProtocolPrefix,  'control@', pipeline().globalParameters.ADLGen2StorageAccountName, pipeline().globalParameters.ADLGen2StoragePathSuffix, '/data/Recon/', variables('ControlName'), '/Latest', variables('ControlName'), 'ReconResults.ss\"')",
                "type": "Expression"
              }
            }
          },
          {
            "name": "SetAnalysisOutputRootPath",
            "type": "SetVariable",
            "dependsOn": [
              {
                "activity": "SetAnalysisStreamInputPath",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "userProperties": [],
            "typeProperties": {
              "variableName": "AnalysisOutputRootPath",
              "value": {
                "value": "@concat('\"', pipeline().globalParameters.ADLGen2StorageProtocolPrefix,  'control@', pipeline().globalParameters.ADLGen2StorageAccountName, pipeline().globalParameters.ADLGen2StoragePathSuffix, '/data/Recon/', variables('ControlName'), '/Analysis\"')",
                "type": "Expression"
              }
            }
          },
          {
            "name": "SetControlLatencyRootPath",
            "description": "Set path for control latency files",
            "type": "SetVariable",
            "dependsOn": [],
            "userProperties": [],
            "typeProperties": {
              "variableName": "ControlLatencyRootPath",
              "value": {
                "value": "@concat('\"', pipeline().globalParameters.ADLGen2StorageProtocolPrefix,  'control@', pipeline().globalParameters.ADLGen2StorageAccountName, pipeline().globalParameters.ADLGen2StoragePathSuffix, '/data/Recon/ControlLatency', '\"')",
                "type": "Expression"
              }
            }
          },
          {
            "name": "LogSOXAnalysisResultsForLedgerToCrusher",
            "description": "Send SOX Analysis results for Ledger To Crusher",
            "type": "AzureFunctionActivity",
            "dependsOn": [
              {
                "activity": "LedgerToCrusherAnalysis",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "policy": {
              "timeout": "0.00:10:00",
              "retry": 3,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "functionName": "LogReconResult",
              "method": "POST",
              "headers": {},
              "body": {
                "ReconResultUri": "control/data/Recon/LedgerToCrusher/Analysis/SOXAnalysis_LedgerToCrusher.csv"
              }
            },
            "linkedServiceName": {
              "referenceName": "AZLogReconAnalysisLS",
              "type": "LinkedServiceReference"
            }
          },
          {
            "name": "SetCrusherRootPath",
            "type": "SetVariable",
            "dependsOn": [
              {
                "activity": "SetIngestionRootPath",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "userProperties": [],
            "typeProperties": {
              "variableName": "CrusherRootPath",
              "value": {
                "value": "@concat('\"', pipeline().globalParameters.ADLGen2StorageProtocolPrefix,  'crusher@', pipeline().globalParameters.ADLGen2StorageAccountName, pipeline().globalParameters.ADLGen2StoragePathSuffix, '\"')",
                "type": "Expression"
              }
            }
          },
          {
            "name": "SetDefaultIngestionStartDate",
            "type": "SetVariable",
            "dependsOn": [
              {
                "activity": "SetControlLatencyRootPath",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "userProperties": [],
            "typeProperties": {
              "variableName": "IngestionStartDate",
              "value": {
                "value": "@formatDateTime(addToTime(pipeline().parameters.RunDate, int(pipeline().parameters.ExtractionBackDays),'Day'), 'MM/dd/yyyy')",
                "type": "Expression"
              }
            }
          }
        ],
        "concurrency": 1,
        "parameters": {
          "RunDate": {
            "type": "string",
            "defaultValue": "05/01/2020"
          },
          "ExtractionBackDays": {
            "type": "string",
            "defaultValue": "-4"
          }
        },
        "variables": {
          "ScriptRootPath": {
            "type": "String",
            "defaultValue": "resources/Scripts"
          },
          "IngestionRootPath": {
            "type": "String"
          },
          "CommonRootPath": {
            "type": "String"
          },
          "ControlOutputRootPath": {
            "type": "String"
          },
          "IncludeTest": {
            "type": "String",
            "defaultValue": "[parameters('LedgerToCrusher_properties_variables_IncludeTest_defaultValue')]"
          },
          "ControlName": {
            "type": "String",
            "defaultValue": "LedgerToCrusher"
          },
          "Container": {
            "type": "String",
            "defaultValue": "control"
          },
          "ErrorMessage": {
            "type": "String"
          },
          "BinariesPath": {
            "type": "String"
          },
          "IngestionStartDate": {
            "type": "String"
          },
          "AnalysisInputStreamPath": {
            "type": "String"
          },
          "AnalysisOutputRootPath": {
            "type": "String"
          },
          "ControlLatencyRootPath": {
            "type": "String"
          },
          "CrusherRootPath": {
            "type": "String"
          }
        },
        "folder": {
          "name": "Control"
        },
        "annotations": []
      },
      "dependsOn": [
        "[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorageGen2')]",
        "[concat(variables('factoryId'), '/linkedServices/AzureDataLakeAnalytics')]",
        "[concat(variables('factoryId'), '/linkedServices/AZLogReconAnalysisLS')]",
        "[concat(variables('factoryId'), '/linkedServices/AZlogAdfPipelineFuncLS')]"
      ]
    },
    {
      "name": "[concat(parameters('factoryName'), '/LedgerToCrusherUnbilled')]",
      "type": "Microsoft.DataFactory/factories/pipelines",
      "apiVersion": "2018-06-01",
      "properties": {
        "description": "Recon control between Ledger and crusher systems for Unbilled scenario",
        "activities": [
          {
            "name": "LedgerToCrusherUnbilledControl",
            "description": "Control between Ledger and crusher for Unbilled scenario",
            "type": "DataLakeAnalyticsScope",
            "dependsOn": [
              {
                "activity": "SetOutputRootPath",
                "dependencyConditions": [
                  "Succeeded"
                ]
              },
              {
                "activity": "SetDefaultIngestionStartDate",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "policy": {
              "timeout": "0.02:00:00",
              "retry": 3,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "scriptFolderPath": {
                "value": "@variables('ScriptRootPath')",
                "type": "Expression"
              },
              "scriptFileName": "LedgerToCrusherReconUnBilledRevenue.script",
              "runtimeVersion": {
                "value": "@pipeline().globalParameters.ScopeRunTime",
                "type": "Expression"
              },
              "scriptLinkedService": {
                "referenceName": "AzureDataLakeStorageGen2",
                "type": "LinkedServiceReference"
              },
              "parameters": {
                "LEDGERINPUTROOTPATH": {
                  "value": "@variables('IngestionRootPath')",
                  "type": "Expression"
                },
                "CRUSHERINPUTROOTPATH": {
                  "value": "@variables('CrusherRootPath')",
                  "type": "Expression"
                },
                "COMMONINPUTROOTPATH": {
                  "value": "@variables('CommonRootPath')",
                  "type": "Expression"
                },
                "OUTPUTROOTPATH": {
                  "value": "@variables('ControlOutputRootPath')",
                  "type": "Expression"
                },
                "INGESTIONSTARTDATE": {
                  "value": "@concat('\"', variables('IngestionStartDate'), '\"')",
                  "type": "Expression"
                },
                "RUNDATE": {
                  "value": "@concat('\"', pipeline().parameters.RunDate, '\"')",
                  "type": "Expression"
                },
                "INCLUDETEST": {
                  "value": "@variables('IncludeTest')",
                  "type": "Expression"
                },
                "RESOURCEPATH": {
                  "value": "@variables('BinariesPath')",
                  "type": "Expression"
                },
                "CONTROLLATENCYROOTPATH": {
                  "value": "@variables('ControlLatencyRootPath')",
                  "type": "Expression"
                },
                "CONTROLNAME": {
                  "value": "@variables('ControlName')",
                  "type": "Expression"
                }
              }
            },
            "linkedServiceName": {
              "referenceName": "AzureDataLakeAnalytics",
              "type": "LinkedServiceReference"
            }
          },
          {
            "name": "LedgerToCrusherUnbilledAnalysis",
            "description": "Analysis script for Ledger to Crusher for Unbilled scenario",
            "type": "DataLakeAnalyticsScope",
            "dependsOn": [
              {
                "activity": "SetAnalysisOutputRootPath",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "policy": {
              "timeout": "0.01:00:00",
              "retry": 3,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "scriptFolderPath": {
                "value": "@variables('ScriptRootPath')",
                "type": "Expression"
              },
              "scriptFileName": "ReconAnalysis.script",
              "runtimeVersion": {
                "value": "@pipeline().globalParameters.ScopeRunTime",
                "type": "Expression"
              },
              "scriptLinkedService": {
                "referenceName": "AzureDataLakeStorageGen2",
                "type": "LinkedServiceReference"
              },
              "parameters": {
                "CONTROLNAME": {
                  "value": "@variables('ControlName')",
                  "type": "Expression"
                },
                "RECONRESULTSTREAMPATH": {
                  "value": "@variables('AnalysisInputStreamPath')",
                  "type": "Expression"
                },
                "SLAINHOURS": "24",
                "OUTPUTROOTPATH": {
                  "value": "@variables('AnalysisOutputRootPath')",
                  "type": "Expression"
                },
                "ENGINEERINGTHRESHOLD": "100",
                "SOXTHRESHOLD": "1000000",
                "RUNDATE": {
                  "value": "@concat('\"', pipeline().parameters.RunDate, '\"')",
                  "type": "Expression"
                }
              }
            },
            "linkedServiceName": {
              "referenceName": "AzureDataLakeAnalytics",
              "type": "LinkedServiceReference"
            }
          },
          {
            "name": "LogEnggAnalysisResultsForLedgerToCrusherUnbilled",
            "description": "Send Engineering Analysis results for Ledger to Crusher for Unbilled scenario",
            "type": "AzureFunctionActivity",
            "dependsOn": [
              {
                "activity": "LedgerToCrusherUnbilledAnalysis",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "policy": {
              "timeout": "0.00:10:00",
              "retry": 3,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "functionName": "LogReconResult",
              "method": "POST",
              "headers": {},
              "body": {
                "ReconResultUri": "control/data/Recon/LedgerToCrusherUnbilled/Analysis/EngineeringAnalysis_LedgerToCrusherUnbilled.csv"
              }
            },
            "linkedServiceName": {
              "referenceName": "AZLogReconAnalysisLS",
              "type": "LinkedServiceReference"
            }
          },
          {
            "name": "LedgerToCrusherUnbilledAnalysisLogSuccess",
            "description": "Log success for Ledger To Crusher Unbilled analysis",
            "type": "AzureFunctionActivity",
            "dependsOn": [
              {
                "activity": "LedgerToCrusherUnbilledAnalysis",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "policy": {
              "timeout": "0.00:10:00",
              "retry": 3,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "functionName": "LogAdfPipelineStatus",
              "method": "POST",
              "headers": {},
              "body": {
                "Activity": "LedgerToCrusherUnbilledAnalysis",
                "Status": "Success",
                "DataFactoryName": "@{pipeline().DataFactory}",
                "PipelineName": "@{pipeline().Pipeline}",
                "TriggeredBy": "@{pipeline().TriggerName}",
                "TriggerTime": "@{pipeline().TriggerTime}"
              }
            },
            "linkedServiceName": {
              "referenceName": "AZlogAdfPipelineFuncLS",
              "type": "LinkedServiceReference"
            }
          },
          {
            "name": "LedgerToCrusherUnbilledControlLogFailure",
            "description": "Log failure for Ledger to Crusher Unbilled control",
            "type": "AzureFunctionActivity",
            "dependsOn": [
              {
                "activity": "LedgerToCrusherUnbilledControl",
                "dependencyConditions": [
                  "Failed"
                ]
              }
            ],
            "policy": {
              "timeout": "0.00:10:00",
              "retry": 3,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "functionName": "LogAdfPipelineStatus",
              "method": "POST",
              "headers": {},
              "body": {
                "Activity": "LedgerToCrusherUnbilledControl",
                "Status": "Failed",
                "DataFactoryName": "@{pipeline().DataFactory}",
                "PipelineName": "@{pipeline().Pipeline}",
                "TriggeredBy": "@{pipeline().TriggerName}",
                "TriggerTime": "@{pipeline().TriggerTime}"
              }
            },
            "linkedServiceName": {
              "referenceName": "AZlogAdfPipelineFuncLS",
              "type": "LinkedServiceReference"
            }
          },
          {
            "name": "LedgerToCrusherUnbilledControlLogSuccess",
            "description": "Log success for Ledger to Crusher Unbilled control",
            "type": "AzureFunctionActivity",
            "dependsOn": [
              {
                "activity": "LedgerToCrusherUnbilledControl",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "policy": {
              "timeout": "0.00:10:00",
              "retry": 3,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "functionName": "LogAdfPipelineStatus",
              "method": "POST",
              "headers": {},
              "body": {
                "Activity": "LedgerToCrusherUnbilledControl",
                "Status": "Success",
                "DataFactoryName": "@{pipeline().DataFactory}",
                "PipelineName": "@{pipeline().Pipeline}",
                "TriggeredBy": "@{pipeline().TriggerName}",
                "TriggerTime": "@{pipeline().TriggerTime}"
              }
            },
            "linkedServiceName": {
              "referenceName": "AZlogAdfPipelineFuncLS",
              "type": "LinkedServiceReference"
            }
          },
          {
            "name": "LedgerToCrusherUnbilledAnalysisLogFailure",
            "description": "log failure for Ledger To Crusher Unbilled analysis",
            "type": "AzureFunctionActivity",
            "dependsOn": [
              {
                "activity": "LedgerToCrusherUnbilledAnalysis",
                "dependencyConditions": [
                  "Failed"
                ]
              }
            ],
            "policy": {
              "timeout": "0.00:10:00",
              "retry": 3,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "functionName": "LogAdfPipelineStatus",
              "method": "POST",
              "headers": {},
              "body": {
                "Activity": "LedgerToCrusherUnbilledAnalysis",
                "Status": "Failed",
                "DataFactoryName": "@{pipeline().DataFactory}",
                "PipelineName": "@{pipeline().Pipeline}",
                "TriggeredBy": "@{pipeline().TriggerName}",
                "TriggerTime": "@{pipeline().TriggerTime}"
              }
            },
            "linkedServiceName": {
              "referenceName": "AZlogAdfPipelineFuncLS",
              "type": "LinkedServiceReference"
            }
          },
          {
            "name": "SetIngestionRootPath",
            "description": "Set input root path for control",
            "type": "SetVariable",
            "dependsOn": [
              {
                "activity": "SetBinariesPath",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "userProperties": [],
            "typeProperties": {
              "variableName": "IngestionRootPath",
              "value": {
                "value": "@concat('\"', pipeline().globalParameters.ADLGen2StorageProtocolPrefix,  'transformation@', pipeline().globalParameters.ADLGen2StorageAccountName, pipeline().globalParameters.ADLGen2StoragePathSuffix, '/data/Ingestion\"')",
                "type": "Expression"
              }
            }
          },
          {
            "name": "SetOutputRootPath",
            "description": "set output root path for control",
            "type": "SetVariable",
            "dependsOn": [
              {
                "activity": "SetCommonRootPath",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "userProperties": [],
            "typeProperties": {
              "variableName": "ControlOutputRootPath",
              "value": {
                "value": "@concat('\"', pipeline().globalParameters.ADLGen2StorageProtocolPrefix,  'control@', pipeline().globalParameters.ADLGen2StorageAccountName, pipeline().globalParameters.ADLGen2StoragePathSuffix, '/data/Recon/', variables('ControlName'), '\"')",
                "type": "Expression"
              }
            }
          },
          {
            "name": "SetCommonRootPath",
            "description": "set common root path",
            "type": "SetVariable",
            "dependsOn": [
              {
                "activity": "SetCrusherRootPath",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "userProperties": [],
            "typeProperties": {
              "variableName": "CommonRootPath",
              "value": {
                "value": "@concat('\"', pipeline().globalParameters.ADLGen2StorageProtocolPrefix,  'transformation@', pipeline().globalParameters.ADLGen2StorageAccountName, pipeline().globalParameters.ADLGen2StoragePathSuffix, '/data/Ingestion\"')",
                "type": "Expression"
              }
            }
          },
          {
            "name": "SetBinariesPath",
            "description": "Set path for binary resources",
            "type": "SetVariable",
            "dependsOn": [],
            "userProperties": [],
            "typeProperties": {
              "variableName": "BinariesPath",
              "value": {
                "value": "@concat('\"', pipeline().globalParameters.ADLGen2StorageProtocolPrefix, 'resources@', \npipeline().globalParameters.ADLGen2StorageAccountName, pipeline().globalParameters.ADLGen2StoragePathSuffix, '/Binaries/\"')",
                "type": "Expression"
              }
            }
          },
          {
            "name": "SetAnalysisStreamInputPath",
            "description": "Set path for control stream that is input to Analysis script",
            "type": "SetVariable",
            "dependsOn": [
              {
                "activity": "LedgerToCrusherUnbilledControl",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "userProperties": [],
            "typeProperties": {
              "variableName": "AnalysisInputStreamPath",
              "value": {
                "value": "@concat('\"', pipeline().globalParameters.ADLGen2StorageProtocolPrefix,  'control@', pipeline().globalParameters.ADLGen2StorageAccountName, pipeline().globalParameters.ADLGen2StoragePathSuffix, '/data/Recon/', variables('ControlName'), '/Latest', variables('ControlName'), 'ReconResults.ss\"')",
                "type": "Expression"
              }
            }
          },
          {
            "name": "SetAnalysisOutputRootPath",
            "type": "SetVariable",
            "dependsOn": [
              {
                "activity": "SetAnalysisStreamInputPath",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "userProperties": [],
            "typeProperties": {
              "variableName": "AnalysisOutputRootPath",
              "value": {
                "value": "@concat('\"', pipeline().globalParameters.ADLGen2StorageProtocolPrefix,  'control@', pipeline().globalParameters.ADLGen2StorageAccountName, pipeline().globalParameters.ADLGen2StoragePathSuffix, '/data/Recon/', variables('ControlName'), '/Analysis\"')",
                "type": "Expression"
              }
            }
          },
          {
            "name": "SetControlLatencyRootPath",
            "description": "Set path for control latency files",
            "type": "SetVariable",
            "dependsOn": [],
            "userProperties": [],
            "typeProperties": {
              "variableName": "ControlLatencyRootPath",
              "value": {
                "value": "@concat('\"', pipeline().globalParameters.ADLGen2StorageProtocolPrefix,  'control@', pipeline().globalParameters.ADLGen2StorageAccountName, pipeline().globalParameters.ADLGen2StoragePathSuffix, '/data/Recon/ControlLatency', '\"')",
                "type": "Expression"
              }
            }
          },
          {
            "name": "LogSOXAnalysisResultsForLedgerToCrusherUnbilled",
            "description": "Send SOX Analysis results for Ledger To Crusher for Unbilled scenario",
            "type": "AzureFunctionActivity",
            "dependsOn": [
              {
                "activity": "LedgerToCrusherUnbilledAnalysis",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "policy": {
              "timeout": "0.00:10:00",
              "retry": 3,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "functionName": "LogReconResult",
              "method": "POST",
              "headers": {},
              "body": {
                "ReconResultUri": "control/data/Recon/LedgerToCrusherUnbilled/Analysis/SOXAnalysis_LedgerToCrusherUnbilled.csv"
              }
            },
            "linkedServiceName": {
              "referenceName": "AZLogReconAnalysisLS",
              "type": "LinkedServiceReference"
            }
          },
          {
            "name": "SetCrusherRootPath",
            "type": "SetVariable",
            "dependsOn": [
              {
                "activity": "SetIngestionRootPath",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "userProperties": [],
            "typeProperties": {
              "variableName": "CrusherRootPath",
              "value": {
                "value": "@concat('\"', pipeline().globalParameters.ADLGen2StorageProtocolPrefix,  'crusher@', pipeline().globalParameters.ADLGen2StorageAccountName, pipeline().globalParameters.ADLGen2StoragePathSuffix, '\"')",
                "type": "Expression"
              }
            }
          },
          {
            "name": "SetDefaultIngestionStartDate",
            "type": "SetVariable",
            "dependsOn": [
              {
                "activity": "SetControlLatencyRootPath",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "userProperties": [],
            "typeProperties": {
              "variableName": "IngestionStartDate",
              "value": {
                "value": "@formatDateTime(addToTime(pipeline().parameters.RunDate, int(pipeline().parameters.ExtractionBackDays),'Day'), 'MM/dd/yyyy')",
                "type": "Expression"
              }
            }
          }
        ],
        "concurrency": 1,
        "parameters": {
          "RunDate": {
            "type": "string",
            "defaultValue": "05/01/2020"
          },
          "ExtractionBackDays": {
            "type": "string",
            "defaultValue": "-4"
          }
        },
        "variables": {
          "ScriptRootPath": {
            "type": "String",
            "defaultValue": "resources/Scripts"
          },
          "IngestionRootPath": {
            "type": "String"
          },
          "CommonRootPath": {
            "type": "String"
          },
          "ControlOutputRootPath": {
            "type": "String"
          },
          "IncludeTest": {
            "type": "String",
            "defaultValue": "[parameters('LedgerToCrusherUnbilled_properties_variables_IncludeTest_defaultValue')]"
          },
          "ControlName": {
            "type": "String",
            "defaultValue": "LedgerToCrusherUnbilled"
          },
          "Container": {
            "type": "String",
            "defaultValue": "control"
          },
          "ErrorMessage": {
            "type": "String"
          },
          "BinariesPath": {
            "type": "String"
          },
          "IngestionStartDate": {
            "type": "String"
          },
          "AnalysisInputStreamPath": {
            "type": "String"
          },
          "AnalysisOutputRootPath": {
            "type": "String"
          },
          "ControlLatencyRootPath": {
            "type": "String"
          },
          "CrusherRootPath": {
            "type": "String"
          }
        },
        "folder": {
          "name": "Control"
        },
        "annotations": []
      },
      "dependsOn": [
        "[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorageGen2')]",
        "[concat(variables('factoryId'), '/linkedServices/AzureDataLakeAnalytics')]",
        "[concat(variables('factoryId'), '/linkedServices/AZLogReconAnalysisLS')]",
        "[concat(variables('factoryId'), '/linkedServices/AZlogAdfPipelineFuncLS')]"
      ]
    },
    {
      "name": "[concat(parameters('factoryName'), '/LogLastControlRunTimestamp')]",
      "type": "Microsoft.DataFactory/factories/pipelines",
      "apiVersion": "2018-06-01",
      "properties": {
        "description": "Pipeline to report last update time for the control analysis output",
        "activities": [
          {
            "name": "SetControlFilePath",
            "description": "Sets the directory for the control analysis output",
            "type": "SetVariable",
            "dependsOn": [],
            "userProperties": [],
            "typeProperties": {
              "variableName": "Path",
              "value": {
                "value": "@concat('data/Recon/', pipeline().parameters.ControlName, '/Analysis')",
                "type": "Expression"
              }
            }
          },
          {
            "name": "SetControlFilename",
            "description": "Sets the File name for the control analysis output",
            "type": "SetVariable",
            "dependsOn": [
              {
                "activity": "SetControlFilePath",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "userProperties": [],
            "typeProperties": {
              "variableName": "Filename",
              "value": {
                "value": "@concat('EngineeringAnalysis_', pipeline().parameters.ControlName, '.csv')",
                "type": "Expression"
              }
            }
          },
          {
            "name": "GetControlAnalysisFileDetails",
            "description": "Get Control Analysis File Details",
            "type": "GetMetadata",
            "dependsOn": [
              {
                "activity": "SetControlFilename",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "policy": {
              "timeout": "7.00:00:00",
              "retry": 0,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "dataset": {
                "referenceName": "ControlAnalysisOutputDataset",
                "type": "DatasetReference",
                "parameters": {
                  "Container": {
                    "value": "@pipeline().parameters.Container",
                    "type": "Expression"
                  },
                  "Path": {
                    "value": "@variables('Path')",
                    "type": "Expression"
                  },
                  "Filename": {
                    "value": "@variables('Filename')",
                    "type": "Expression"
                  }
                }
              },
              "fieldList": [
                "lastModified"
              ],
              "storeSettings": {
                "type": "AzureBlobFSReadSettings",
                "recursive": true
              },
              "formatSettings": {
                "type": "DelimitedTextReadSettings"
              }
            }
          },
          {
            "name": "SetLastModifiedTimestamp",
            "description": "Sets LastModifiedTimestamp",
            "type": "SetVariable",
            "dependsOn": [
              {
                "activity": "GetControlAnalysisFileDetails",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "userProperties": [],
            "typeProperties": {
              "variableName": "LastModifiedTimestamp",
              "value": {
                "value": "@activity('GetControlAnalysisFileDetails').output.LastModified",
                "type": "Expression"
              }
            }
          },
          {
            "name": "Fail-If-File-Timestamp-Greater",
            "type": "IfCondition",
            "dependsOn": [
              {
                "activity": "SetLastModifiedTimestamp",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "userProperties": [],
            "typeProperties": {
              "expression": {
                "value": "@greater(formatDateTime(addDays(utcnow(), mul(int(pipeline().parameters.SlaInDays),-1)),'yyyy-MM-dd'),formatDateTime(variables('LastModifiedTimestamp'),'yyyy-MM-dd'))",
                "type": "Expression"
              },
              "ifFalseActivities": [
                {
                  "name": "LogLastControlRunDetails-Success",
                  "description": "LogLastControlRunDetails",
                  "type": "AzureFunctionActivity",
                  "dependsOn": [],
                  "policy": {
                    "timeout": "0.00:10:00",
                    "retry": 0,
                    "retryIntervalInSeconds": 30,
                    "secureOutput": false,
                    "secureInput": false
                  },
                  "userProperties": [],
                  "typeProperties": {
                    "functionName": "LogAdfPipelineStatus",
                    "method": "POST",
                    "headers": {},
                    "body": {
                      "value": "{\"DataFactoryName\":\"@{pipeline().DataFactory}\",\"PipelineName\":\"@{pipeline().parameters.ControlName}\",\"Activity\":\"@{pipeline().parameters.ControlName}Analysis\",\"RunDate\":\"@{variables('LastModifiedTimestamp')}\",\"TriggerTime\":\"@{pipeline().TriggerTime}\",\"TriggeredBy\":\"@{pipeline().Pipeline}\",\"Status\":\"Success\"}",
                      "type": "Expression"
                    }
                  },
                  "linkedServiceName": {
                    "referenceName": "AZlogAdfPipelineFuncLS",
                    "type": "LinkedServiceReference"
                  }
                }
              ],
              "ifTrueActivities": [
                {
                  "name": "LogLastControlRunDetails-PipelineStalled",
                  "description": "LogLastControlRunDetails-PipelineStalled",
                  "type": "AzureFunctionActivity",
                  "dependsOn": [],
                  "policy": {
                    "timeout": "0.00:10:00",
                    "retry": 0,
                    "retryIntervalInSeconds": 30,
                    "secureOutput": false,
                    "secureInput": false
                  },
                  "userProperties": [],
                  "typeProperties": {
                    "functionName": "LogAdfPipelineStatus",
                    "method": "POST",
                    "headers": {},
                    "body": {
                      "value": "{\"DataFactoryName\":\"@{pipeline().DataFactory}\",\"PipelineName\":\"@{pipeline().parameters.ControlName}\",\"Activity\":\"@{pipeline().parameters.ControlName}Analysis\",\"RunDate\":\"@{variables('LastModifiedTimestamp')}\",\"TriggerTime\":\"@{pipeline().TriggerTime}\",\"TriggeredBy\":\"@{pipeline().Pipeline}\",\"Status\":\"Failed\",\"Error\":\"Pipeline Stalled\"}",
                      "type": "Expression"
                    }
                  },
                  "linkedServiceName": {
                    "referenceName": "AZlogAdfPipelineFuncLS",
                    "type": "LinkedServiceReference"
                  }
                }
              ]
            }
          },
          {
            "name": "Log-Failure-Adf-pipeline-AureFunction-Activity",
            "description": "Log-Failure-Adf-pipeline for GetControlAnalysisFileDetails",
            "type": "AzureFunctionActivity",
            "dependsOn": [
              {
                "activity": "GetControlAnalysisFileDetails",
                "dependencyConditions": [
                  "Failed"
                ]
              }
            ],
            "policy": {
              "timeout": "0.00:10:00",
              "retry": 0,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "functionName": "LogAdfPipelineStatus",
              "method": "POST",
              "headers": {},
              "body": {
                "value": "{\"Activity\":\"Activity_LogLastControlRunTimestamp_GetControlAnalysisFileDetails\",\"Status\":\"Failed\",\"DataFactoryName\":\"@{pipeline().DataFactory}\",\"PipelineName\":\"@{pipeline().Pipeline}\",\"TriggeredBy\":\"@{pipeline().TriggerName}\",\"TriggerTime\":\"@{pipeline().TriggerTime}\",\"Error\":\"PipelineRunId=@{pipeline().RunId}\",\"PipelineRunId\":\"@{pipeline().RunId}\"}",
                "type": "Expression"
              }
            },
            "linkedServiceName": {
              "referenceName": "AZlogAdfPipelineFuncLS",
              "type": "LinkedServiceReference"
            }
          },
          {
            "name": "Log-Success-Adf-pipeline",
            "description": "Log-Success-Adf-pipeline",
            "type": "AzureFunctionActivity",
            "dependsOn": [
              {
                "activity": "Fail-If-File-Timestamp-Greater",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "policy": {
              "timeout": "0.00:10:00",
              "retry": 0,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "functionName": "LogAdfPipelineStatus",
              "method": "POST",
              "headers": {},
              "body": {
                "value": "{\n\"Activity\":\"Activity_LogLastControlRunTimestamp\",\n\"Status\":\"Success\",\"DataFactoryName\":\"@{pipeline().DataFactory}\",\n\"PipelineName\":\"@{pipeline().Pipeline}\",\n\"TriggeredBy\":\"@{pipeline().TriggerName}\",\n\"TriggerTime\":\"@{pipeline().TriggerTime}\",\n\"PipelineRunId\":\"@{pipeline().RunId}\"\n}",
                "type": "Expression"
              }
            },
            "linkedServiceName": {
              "referenceName": "AZlogAdfPipelineFuncLS",
              "type": "LinkedServiceReference"
            }
          },
          {
            "name": "Log-Failure-Adf-pipeline-GetControlAnalysisFileDetails",
            "description": "Log-Failure-Adf-pipeline for GetControlAnalysisFileDetails",
            "type": "AzureFunctionActivity",
            "dependsOn": [
              {
                "activity": "Fail-If-File-Timestamp-Greater",
                "dependencyConditions": [
                  "Failed"
                ]
              }
            ],
            "policy": {
              "timeout": "0.00:10:00",
              "retry": 0,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "functionName": "LogAdfPipelineStatus",
              "method": "POST",
              "headers": {},
              "body": {
                "value": "{\"Activity\":\"Activity_LogLastControlRunTimestamp_LogAzureFunction\",\"Status\":\"Failed\",\"DataFactoryName\":\"@{pipeline().DataFactory}\",\"PipelineName\":\"@{pipeline().Pipeline}\",\"TriggeredBy\":\"@{pipeline().TriggerName}\",\"TriggerTime\":\"@{pipeline().TriggerTime}\",\"Error\":\"PipelineRunId=@{pipeline().RunId}\",\"PipelineRunId\":\"@{pipeline().RunId}\"}",
                "type": "Expression"
              }
            },
            "linkedServiceName": {
              "referenceName": "AZlogAdfPipelineFuncLS",
              "type": "LinkedServiceReference"
            }
          }
        ],
        "parameters": {
          "Container": {
            "type": "string",
            "defaultValue": "control"
          },
          "ControlName": {
            "type": "string",
            "defaultValue": "CAToInvoice"
          },
          "SlaInDays": {
            "type": "string",
            "defaultValue": "1"
          }
        },
        "variables": {
          "Path": {
            "type": "String"
          },
          "Filename": {
            "type": "String"
          },
          "LastModifiedTimestamp": {
            "type": "String"
          }
        },
        "folder": {
          "name": "Infra"
        },
        "annotations": []
      },
      "dependsOn": [
        "[concat(variables('factoryId'), '/datasets/ControlAnalysisOutputDataset')]",
        "[concat(variables('factoryId'), '/linkedServices/AZlogAdfPipelineFuncLS')]"
      ]
    },
    {
      "name": "[concat(parameters('factoryName'), '/MonitorCsvStream')]",
      "type": "Microsoft.DataFactory/factories/pipelines",
      "apiVersion": "2018-06-01",
      "properties": {
        "activities": [
          {
            "name": "Check CSV Stream Exist",
            "type": "Validation",
            "dependsOn": [
              {
                "activity": "Set Stream Name",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "userProperties": [],
            "typeProperties": {
              "dataset": {
                "referenceName": "CsvDataSet",
                "type": "DatasetReference",
                "parameters": {
                  "Container": {
                    "value": "@pipeline().parameters.Container",
                    "type": "Expression"
                  },
                  "Directory": {
                    "value": "@pipeline().parameters.Directory",
                    "type": "Expression"
                  },
                  "File": {
                    "value": "@pipeline().parameters.File",
                    "type": "Expression"
                  }
                }
              },
              "timeout": "00:01:00",
              "sleep": 10
            }
          },
          {
            "name": "Verify Content Length",
            "type": "Lookup",
            "dependsOn": [
              {
                "activity": "Check CSV Stream Exist",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "policy": {
              "timeout": "7.00:00:00",
              "retry": 0,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "source": {
                "type": "DelimitedTextSource",
                "storeSettings": {
                  "type": "AzureBlobFSReadSettings",
                  "recursive": true
                },
                "formatSettings": {
                  "type": "DelimitedTextReadSettings"
                }
              },
              "dataset": {
                "referenceName": "CsvDataSet",
                "type": "DatasetReference",
                "parameters": {
                  "Container": {
                    "value": "@pipeline().parameters.Container",
                    "type": "Expression"
                  },
                  "Directory": {
                    "value": "@pipeline().parameters.Directory",
                    "type": "Expression"
                  },
                  "File": {
                    "value": "@pipeline().parameters.File",
                    "type": "Expression"
                  }
                }
              },
              "firstRowOnly": false
            }
          },
          {
            "name": "Set Stream Name",
            "type": "SetVariable",
            "dependsOn": [],
            "userProperties": [],
            "typeProperties": {
              "variableName": "StreamName",
              "value": {
                "value": "@concat(pipeline().parameters.Container, '/' ,pipeline().parameters.Directory, '/', pipeline().parameters.File)",
                "type": "Expression"
              }
            }
          },
          {
            "name": "Log Stream Not Found",
            "description": "Log Stream Not Found",
            "type": "AzureFunctionActivity",
            "dependsOn": [
              {
                "activity": "Check CSV Stream Exist",
                "dependencyConditions": [
                  "Failed"
                ]
              }
            ],
            "policy": {
              "timeout": "0.00:10:00",
              "retry": 3,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "functionName": "LogControlStreamStatus",
              "method": "POST",
              "headers": {},
              "body": {
                "Status": "Warning",
                "Control": "@pipeline().parameters.Control",
                "PipelineName": "@pipeline().parameters.PipelineName",
                "Activity": "@pipeline().parameters.Activity",
                "DataFactoryName": "@{pipeline().DataFactory}",
                "StreamInfo": "@variables('StreamName')",
                "Details": "Stream was not found"
              }
            },
            "linkedServiceName": {
              "referenceName": "AZlogControlStreamFuncLS",
              "type": "LinkedServiceReference"
            }
          },
          {
            "name": "If Condition1",
            "type": "IfCondition",
            "dependsOn": [
              {
                "activity": "Verify Content Length",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "userProperties": [],
            "typeProperties": {
              "expression": {
                "value": "@greaterOrEquals(int(activity('Verify Content Length').output.Count), int(pipeline().parameters.MinimumRowCount))",
                "type": "Expression"
              },
              "ifFalseActivities": [
                {
                  "name": "Log Stream-Not Enough Rows Found",
                  "description": "Log Stream-Not Enough Rows Found",
                  "type": "AzureFunctionActivity",
                  "dependsOn": [],
                  "policy": {
                    "timeout": "0.00:10:00",
                    "retry": 3,
                    "retryIntervalInSeconds": 30,
                    "secureOutput": false,
                    "secureInput": false
                  },
                  "userProperties": [],
                  "typeProperties": {
                    "functionName": "LogControlStreamStatus",
                    "method": "POST",
                    "headers": {},
                    "body": {
                      "Status": "Warning",
                      "DataFactoryName": "@{pipeline().DataFactory}",
                      "Control": "@pipeline().parameters.Control",
                      "PipelineName": "@pipeline().parameters.PipelineName",
                      "Activity": "@pipeline().parameters.Activity",
                      "StreamInfo": "@variables('StreamName')",
                      "Details": "@{activity('Verify Content Length').output.Count} Records found, Should have minimum @{pipeline().parameters.MinimumRowCount}"
                    }
                  },
                  "linkedServiceName": {
                    "referenceName": "AZlogControlStreamFuncLS",
                    "type": "LinkedServiceReference"
                  }
                }
              ],
              "ifTrueActivities": [
                {
                  "name": "Log Stream-Row Counts",
                  "description": "Log Stream Row Counts",
                  "type": "AzureFunctionActivity",
                  "dependsOn": [],
                  "policy": {
                    "timeout": "0.00:10:00",
                    "retry": 3,
                    "retryIntervalInSeconds": 30,
                    "secureOutput": false,
                    "secureInput": false
                  },
                  "userProperties": [],
                  "typeProperties": {
                    "functionName": "LogControlStreamStatus",
                    "method": "POST",
                    "headers": {},
                    "body": {
                      "Status": "Information",
                      "DataFactoryName": "@{pipeline().DataFactory}",
                      "Control": "@pipeline().parameters.Control",
                      "PipelineName": "@pipeline().parameters.PipelineName",
                      "Activity": "@pipeline().parameters.Activity",
                      "StreamInfo": "@variables('StreamName')",
                      "Details": "@{activity('Verify Content Length').output.Count} Records found, which is greater or equal than minimum @{pipeline().parameters.MinimumRowCount}"
                    }
                  },
                  "linkedServiceName": {
                    "referenceName": "AZlogControlStreamFuncLS",
                    "type": "LinkedServiceReference"
                  }
                }
              ]
            }
          }
        ],
        "parameters": {
          "Container": {
            "type": "string",
            "defaultValue": "transformation"
          },
          "Directory": {
            "type": "string",
            "defaultValue": "data/Ingestion/Output/Rating20180331/2020/09/01"
          },
          "File": {
            "type": "string",
            "defaultValue": "Rpcc_2020_09_01_00.csv"
          },
          "MinimumRowCount": {
            "type": "int",
            "defaultValue": 2
          },
          "Control": {
            "type": "string"
          },
          "PipelineName": {
            "type": "string",
            "defaultValue": "Transform Rating RPCC"
          },
          "Activity": {
            "type": "string"
          }
        },
        "variables": {
          "StreamName": {
            "type": "String"
          }
        },
        "folder": {
          "name": "Infra"
        },
        "annotations": []
      },
      "dependsOn": [
        "[concat(variables('factoryId'), '/datasets/CsvDataSet')]",
        "[concat(variables('factoryId'), '/linkedServices/AZlogControlStreamFuncLS')]"
      ]
    },
    {
      "name": "[concat(parameters('factoryName'), '/MonitorJsonStream')]",
      "type": "Microsoft.DataFactory/factories/pipelines",
      "apiVersion": "2018-06-01",
      "properties": {
        "activities": [
          {
            "name": "Check Json Stream Exist",
            "type": "Validation",
            "dependsOn": [
              {
                "activity": "Set Stream Name",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "userProperties": [],
            "typeProperties": {
              "dataset": {
                "referenceName": "JsonDataSet",
                "type": "DatasetReference",
                "parameters": {
                  "Container": {
                    "value": "@pipeline().parameters.Container",
                    "type": "Expression"
                  },
                  "Directory": {
                    "value": "@pipeline().parameters.Directory",
                    "type": "Expression"
                  },
                  "File": {
                    "value": "@pipeline().parameters.File",
                    "type": "Expression"
                  }
                }
              },
              "timeout": "00:01:00",
              "sleep": 10
            }
          },
          {
            "name": "Verify Content Length",
            "type": "Lookup",
            "dependsOn": [
              {
                "activity": "Check Json Stream Exist",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "policy": {
              "timeout": "7.00:00:00",
              "retry": 0,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "source": {
                "type": "JsonSource",
                "storeSettings": {
                  "type": "AzureBlobFSReadSettings",
                  "recursive": true
                },
                "formatSettings": {
                  "type": "JsonReadSettings"
                }
              },
              "dataset": {
                "referenceName": "JsonDataSet",
                "type": "DatasetReference",
                "parameters": {
                  "Container": {
                    "value": "@pipeline().parameters.Container",
                    "type": "Expression"
                  },
                  "Directory": {
                    "value": "@pipeline().parameters.Directory",
                    "type": "Expression"
                  },
                  "File": {
                    "value": "@pipeline().parameters.File",
                    "type": "Expression"
                  }
                }
              },
              "firstRowOnly": false
            }
          },
          {
            "name": "Set Stream Name",
            "type": "SetVariable",
            "dependsOn": [],
            "userProperties": [],
            "typeProperties": {
              "variableName": "StreamName",
              "value": {
                "value": "@concat(pipeline().parameters.Container, '/' ,pipeline().parameters.Directory, '/', pipeline().parameters.File)",
                "type": "Expression"
              }
            }
          },
          {
            "name": "Log Stream Not Found",
            "description": "Log Stream Not Found",
            "type": "AzureFunctionActivity",
            "dependsOn": [
              {
                "activity": "Check Json Stream Exist",
                "dependencyConditions": [
                  "Failed"
                ]
              }
            ],
            "policy": {
              "timeout": "0.00:10:00",
              "retry": 3,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "functionName": "LogControlStreamStatus",
              "method": "POST",
              "headers": {},
              "body": {
                "Status": "Warning",
                "Control": "@pipeline().parameters.Control",
                "PipelineName": "@pipeline().parameters.PipelineName",
                "Activity": "@pipeline().parameters.Activity",
                "DataFactoryName": "@{pipeline().DataFactory}",
                "StreamInfo": "@variables('StreamName')",
                "Details": "Stream was not found"
              }
            },
            "linkedServiceName": {
              "referenceName": "AZlogControlStreamFuncLS",
              "type": "LinkedServiceReference"
            }
          },
          {
            "name": "If Condition1",
            "type": "IfCondition",
            "dependsOn": [
              {
                "activity": "Verify Content Length",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "userProperties": [],
            "typeProperties": {
              "expression": {
                "value": "@greaterOrEquals(int(activity('Verify Content Length').output.Count), int(pipeline().parameters.MinimumRowCount))",
                "type": "Expression"
              },
              "ifFalseActivities": [
                {
                  "name": "Log Stream-Not Enough Rows Found",
                  "description": "Log Stream-Not Enough Rows Found",
                  "type": "AzureFunctionActivity",
                  "dependsOn": [],
                  "policy": {
                    "timeout": "0.00:10:00",
                    "retry": 3,
                    "retryIntervalInSeconds": 30,
                    "secureOutput": false,
                    "secureInput": false
                  },
                  "userProperties": [],
                  "typeProperties": {
                    "functionName": "LogControlStreamStatus",
                    "method": "POST",
                    "headers": {},
                    "body": {
                      "Status": "Warning",
                      "DataFactoryName": "@{pipeline().DataFactory}",
                      "Control": "@pipeline().parameters.Control",
                      "PipelineName": "@pipeline().parameters.PipelineName",
                      "Activity": "@pipeline().parameters.Activity",
                      "StreamInfo": "@variables('StreamName')",
                      "Details": "@{activity('Verify Content Length').output.Count} Records found, Should have minimum @{pipeline().parameters.MinimumRowCount}"
                    }
                  },
                  "linkedServiceName": {
                    "referenceName": "AZlogControlStreamFuncLS",
                    "type": "LinkedServiceReference"
                  }
                }
              ],
              "ifTrueActivities": [
                {
                  "name": "Log Stream-Row Counts",
                  "description": "Log Stream Row Counts",
                  "type": "AzureFunctionActivity",
                  "dependsOn": [],
                  "policy": {
                    "timeout": "0.00:10:00",
                    "retry": 3,
                    "retryIntervalInSeconds": 30,
                    "secureOutput": false,
                    "secureInput": false
                  },
                  "userProperties": [],
                  "typeProperties": {
                    "functionName": "LogControlStreamStatus",
                    "method": "POST",
                    "headers": {},
                    "body": {
                      "Status": "Information",
                      "DataFactoryName": "@{pipeline().DataFactory}",
                      "Control": "@pipeline().parameters.Control",
                      "PipelineName": "@pipeline().parameters.PipelineName",
                      "Activity": "@pipeline().parameters.Activity",
                      "StreamInfo": "@variables('StreamName')",
                      "Details": "@{activity('Verify Content Length').output.Count} Records found, which is greater or equal than minimum @{pipeline().parameters.MinimumRowCount}"
                    }
                  },
                  "linkedServiceName": {
                    "referenceName": "AZlogControlStreamFuncLS",
                    "type": "LinkedServiceReference"
                  }
                }
              ]
            }
          }
        ],
        "parameters": {
          "Container": {
            "type": "string",
            "defaultValue": "chargeaggregator"
          },
          "Directory": {
            "type": "string",
            "defaultValue": "ca-journal/2020/09/01/11"
          },
          "File": {
            "type": "string",
            "defaultValue": "2020090111.txt"
          },
          "MinimumRowCount": {
            "type": "int",
            "defaultValue": 1
          },
          "Control": {
            "type": "string"
          },
          "PipelineName": {
            "type": "string",
            "defaultValue": "Copy Ca Raw Json"
          },
          "Activity": {
            "type": "string"
          }
        },
        "variables": {
          "StreamName": {
            "type": "String"
          }
        },
        "folder": {
          "name": "Infra"
        },
        "annotations": []
      },
      "dependsOn": [
        "[concat(variables('factoryId'), '/datasets/JsonDataSet')]",
        "[concat(variables('factoryId'), '/linkedServices/AZlogControlStreamFuncLS')]"
      ]
    },
    {
      "name": "[concat(parameters('factoryName'), '/OrderToChargeAggregator')]",
      "type": "Microsoft.DataFactory/factories/pipelines",
      "apiVersion": "2018-06-01",
      "properties": {
        "description": "Recon control between order and charge aggregator",
        "activities": [
          {
            "name": "OrderToCAControl",
            "description": "Control between Order to CA",
            "type": "DataLakeAnalyticsScope",
            "dependsOn": [
              {
                "activity": "SetOutputRootPath",
                "dependencyConditions": [
                  "Succeeded"
                ]
              },
              {
                "activity": "SetDefaultIngestionStartDate",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "policy": {
              "timeout": "0.02:00:00",
              "retry": 3,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "scriptFolderPath": {
                "value": "@variables('ScriptRootPath')",
                "type": "Expression"
              },
              "scriptFileName": "OrderToCARecon.script",
              "runtimeVersion": {
                "value": "@pipeline().globalParameters.ScopeRunTime",
                "type": "Expression"
              },
              "scriptLinkedService": {
                "referenceName": "AzureDataLakeStorageGen2",
                "type": "LinkedServiceReference"
              },
              "parameters": {
                "INGESTIONROOTPATH": {
                  "value": "@variables('IngestionRootPath')",
                  "type": "Expression"
                },
                "OUTPUTROOTPATH": {
                  "value": "@variables('ControlOutputRootPath')",
                  "type": "Expression"
                },
                "INGESTIONSTARTDATE": {
                  "value": "@concat('\"', variables('IngestionStartDate'), '\"')",
                  "type": "Expression"
                },
                "RUNDATE": {
                  "value": "@concat('\"', pipeline().parameters.RunDate, '\"')",
                  "type": "Expression"
                },
                "INCLUDETEST": {
                  "value": "@variables('IncludeTest')",
                  "type": "Expression"
                },
                "RESOURCEPATH": {
                  "value": "@variables('BinariesPath')",
                  "type": "Expression"
                },
                "CONTROLLATENCYROOTPATH": {
                  "value": "@variables('ControlLatencyRootPath')",
                  "type": "Expression"
                },
                "CONTROLNAME": {
                  "value": "@variables('ControlName')",
                  "type": "Expression"
                }
              }
            },
            "linkedServiceName": {
              "referenceName": "AzureDataLakeAnalytics",
              "type": "LinkedServiceReference"
            }
          },
          {
            "name": "OrderToCAAnalysis",
            "description": "Analysis script for Order to CA",
            "type": "DataLakeAnalyticsScope",
            "dependsOn": [
              {
                "activity": "SetAnalysisOutputRootPath",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "policy": {
              "timeout": "0.01:00:00",
              "retry": 3,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "scriptFolderPath": {
                "value": "@variables('ScriptRootPath')",
                "type": "Expression"
              },
              "scriptFileName": "ReconAnalysis.script",
              "runtimeVersion": {
                "value": "@pipeline().globalParameters.ScopeRunTime",
                "type": "Expression"
              },
              "scriptLinkedService": {
                "referenceName": "AzureDataLakeStorageGen2",
                "type": "LinkedServiceReference"
              },
              "parameters": {
                "CONTROLNAME": {
                  "value": "@variables('ControlName')",
                  "type": "Expression"
                },
                "RECONRESULTSTREAMPATH": {
                  "value": "@variables('AnalysisInputStreamPath')",
                  "type": "Expression"
                },
                "SLAINHOURS": "24",
                "OUTPUTROOTPATH": {
                  "value": "@variables('AnalysisOutputRootPath')",
                  "type": "Expression"
                },
                "ENGINEERINGTHRESHOLD": "100",
                "SOXTHRESHOLD": "1000000",
                "RUNDATE": {
                  "value": "@concat('\"', pipeline().parameters.RunDate, '\"')",
                  "type": "Expression"
                }
              }
            },
            "linkedServiceName": {
              "referenceName": "AzureDataLakeAnalytics",
              "type": "LinkedServiceReference"
            }
          },
          {
            "name": "LogEnggAnalysisResultsForOrderToCA",
            "description": "Send Engineering Analysis results for Order to CA",
            "type": "AzureFunctionActivity",
            "dependsOn": [
              {
                "activity": "OrderToCAAnalysis",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "policy": {
              "timeout": "0.00:10:00",
              "retry": 3,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "functionName": "LogReconResult",
              "method": "POST",
              "headers": {},
              "body": {
                "ReconResultUri": "control/data/Recon/OrderToCA/Analysis/EngineeringAnalysis_OrderToCA.csv"
              }
            },
            "linkedServiceName": {
              "referenceName": "AZLogReconAnalysisLS",
              "type": "LinkedServiceReference"
            }
          },
          {
            "name": "OrderToCAAnalysisLogSuccess",
            "description": "Log success for Order to CA analysis",
            "type": "AzureFunctionActivity",
            "dependsOn": [
              {
                "activity": "OrderToCAAnalysis",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "policy": {
              "timeout": "0.00:10:00",
              "retry": 3,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "functionName": "LogAdfPipelineStatus",
              "method": "POST",
              "headers": {},
              "body": {
                "value": "{\"Activity\":\"OrderToCAAnalysis\", \"Status\":\"Success\", \"DataFactoryName\": \"@{pipeline().DataFactory}\", \"PipelineName\": \"@{pipeline().Pipeline}\", \"TriggeredBy\": \"@{pipeline().TriggerName}\", \"TriggerTime\":\"@{pipeline().TriggerTime}\"}",
                "type": "Expression"
              }
            },
            "linkedServiceName": {
              "referenceName": "AZlogAdfPipelineFuncLS",
              "type": "LinkedServiceReference"
            }
          },
          {
            "name": "OrderToCAControlLogFailure",
            "description": "Log failure for Order to CA control",
            "type": "AzureFunctionActivity",
            "dependsOn": [
              {
                "activity": "OrderToCAControl",
                "dependencyConditions": [
                  "Failed"
                ]
              }
            ],
            "policy": {
              "timeout": "0.00:10:00",
              "retry": 3,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "functionName": "LogAdfPipelineStatus",
              "method": "POST",
              "headers": {},
              "body": {
                "Activity": "OrderToCAControl",
                "Status": "Failed",
                "DataFactoryName": "@{pipeline().DataFactory}",
                "PipelineName": "@{pipeline().Pipeline}",
                "TriggeredBy": "@{pipeline().TriggerName}",
                "TriggerTime": "@{pipeline().TriggerTime}"
              }
            },
            "linkedServiceName": {
              "referenceName": "AZlogAdfPipelineFuncLS",
              "type": "LinkedServiceReference"
            }
          },
          {
            "name": "OrderToCAControlLogSuccess",
            "description": "Log success for Order to CA control",
            "type": "AzureFunctionActivity",
            "dependsOn": [
              {
                "activity": "OrderToCAControl",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "policy": {
              "timeout": "0.00:10:00",
              "retry": 3,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "functionName": "LogAdfPipelineStatus",
              "method": "POST",
              "headers": {},
              "body": {
                "Activity": "OrderToCAControl",
                "Status": "Success",
                "DataFactoryName": "@{pipeline().DataFactory}",
                "PipelineName": "@{pipeline().Pipeline}",
                "TriggeredBy": "@{pipeline().TriggerName}",
                "TriggerTime": "@{pipeline().TriggerTime}"
              }
            },
            "linkedServiceName": {
              "referenceName": "AZlogAdfPipelineFuncLS",
              "type": "LinkedServiceReference"
            }
          },
          {
            "name": "OrderToCAAnalysisLogFailure",
            "description": "log failure for Order to CA analysis",
            "type": "AzureFunctionActivity",
            "dependsOn": [
              {
                "activity": "OrderToCAAnalysis",
                "dependencyConditions": [
                  "Failed"
                ]
              }
            ],
            "policy": {
              "timeout": "0.00:10:00",
              "retry": 3,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "functionName": "LogAdfPipelineStatus",
              "method": "POST",
              "headers": {},
              "body": {
                "Activity": "OrderToCAAnalysis",
                "Status": "Failed",
                "DataFactoryName": "@{pipeline().DataFactory}",
                "PipelineName": "@{pipeline().Pipeline}",
                "TriggeredBy": "@{pipeline().TriggerName}",
                "TriggerTime": "@{pipeline().TriggerTime}"
              }
            },
            "linkedServiceName": {
              "referenceName": "AZlogAdfPipelineFuncLS",
              "type": "LinkedServiceReference"
            }
          },
          {
            "name": "SetIngestionRootPath",
            "description": "Set input root path for control",
            "type": "SetVariable",
            "dependsOn": [
              {
                "activity": "SetBinariesPath",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "userProperties": [],
            "typeProperties": {
              "variableName": "IngestionRootPath",
              "value": {
                "value": "@concat('\"', pipeline().globalParameters.ADLGen2StorageProtocolPrefix,  'transformation@', pipeline().globalParameters.ADLGen2StorageAccountName, pipeline().globalParameters.ADLGen2StoragePathSuffix, '/data/Ingestion\"')",
                "type": "Expression"
              }
            }
          },
          {
            "name": "SetOutputRootPath",
            "description": "set output root path for control",
            "type": "SetVariable",
            "dependsOn": [
              {
                "activity": "SetCommonRootPath",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "userProperties": [],
            "typeProperties": {
              "variableName": "ControlOutputRootPath",
              "value": {
                "value": "@concat('\"', pipeline().globalParameters.ADLGen2StorageProtocolPrefix,  'control@', pipeline().globalParameters.ADLGen2StorageAccountName, pipeline().globalParameters.ADLGen2StoragePathSuffix, '/data/Recon/', variables('ControlName'), '\"')",
                "type": "Expression"
              }
            }
          },
          {
            "name": "SetCommonRootPath",
            "description": "set common root path",
            "type": "SetVariable",
            "dependsOn": [
              {
                "activity": "SetIngestionRootPath",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "userProperties": [],
            "typeProperties": {
              "variableName": "CommonRootPath",
              "value": {
                "value": "@concat('\"', pipeline().globalParameters.ADLGen2StorageProtocolPrefix,  'transformation@', pipeline().globalParameters.ADLGen2StorageAccountName, pipeline().globalParameters.ADLGen2StoragePathSuffix, '/data/Ingestion\"')",
                "type": "Expression"
              }
            }
          },
          {
            "name": "SetBinariesPath",
            "description": "Set path for binary reosurces",
            "type": "SetVariable",
            "dependsOn": [],
            "userProperties": [],
            "typeProperties": {
              "variableName": "BinariesPath",
              "value": {
                "value": "@concat('\"', pipeline().globalParameters.ADLGen2StorageProtocolPrefix, 'resources@', \npipeline().globalParameters.ADLGen2StorageAccountName, pipeline().globalParameters.ADLGen2StoragePathSuffix, '/Binaries/\"')",
                "type": "Expression"
              }
            }
          },
          {
            "name": "SetAnalysisStreamInputPath",
            "description": "Set path for control stream that is input to Analysis script",
            "type": "SetVariable",
            "dependsOn": [
              {
                "activity": "OrderToCAControl",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "userProperties": [],
            "typeProperties": {
              "variableName": "AnalysisInputStreamPath",
              "value": {
                "value": "@concat('\"', pipeline().globalParameters.ADLGen2StorageProtocolPrefix,  'control@', pipeline().globalParameters.ADLGen2StorageAccountName, pipeline().globalParameters.ADLGen2StoragePathSuffix, '/data/Recon/', variables('ControlName'), '/Latest', variables('ControlName'), 'ReconResults.ss\"')",
                "type": "Expression"
              }
            }
          },
          {
            "name": "SetAnalysisOutputRootPath",
            "type": "SetVariable",
            "dependsOn": [
              {
                "activity": "SetAnalysisStreamInputPath",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "userProperties": [],
            "typeProperties": {
              "variableName": "AnalysisOutputRootPath",
              "value": {
                "value": "@concat('\"', pipeline().globalParameters.ADLGen2StorageProtocolPrefix,  'control@', pipeline().globalParameters.ADLGen2StorageAccountName, pipeline().globalParameters.ADLGen2StoragePathSuffix, '/data/Recon/', variables('ControlName'), '/Analysis\"')",
                "type": "Expression"
              }
            }
          },
          {
            "name": "SetControlLatencyRootPath",
            "description": "Set path for control latency files",
            "type": "SetVariable",
            "dependsOn": [],
            "userProperties": [],
            "typeProperties": {
              "variableName": "ControlLatencyRootPath",
              "value": {
                "value": "@concat('\"', pipeline().globalParameters.ADLGen2StorageProtocolPrefix,  'control@', pipeline().globalParameters.ADLGen2StorageAccountName, pipeline().globalParameters.ADLGen2StoragePathSuffix, '/data/Recon/ControlLatency', '\"')",
                "type": "Expression"
              }
            }
          },
          {
            "name": "LogSOXAnalysisResultsForOrderToCA",
            "description": "Send SOX Analysis results for Order to CA",
            "type": "AzureFunctionActivity",
            "dependsOn": [
              {
                "activity": "OrderToCAAnalysis",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "policy": {
              "timeout": "0.00:10:00",
              "retry": 3,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "functionName": "LogReconResult",
              "method": "POST",
              "headers": {},
              "body": {
                "ReconResultUri": "control/data/Recon/OrderToCA/Analysis/SOXAnalysis_OrderToCA.csv"
              }
            },
            "linkedServiceName": {
              "referenceName": "AZLogReconAnalysisLS",
              "type": "LinkedServiceReference"
            }
          },
          {
            "name": "SetDefaultIngestionStartDate",
            "type": "SetVariable",
            "dependsOn": [
              {
                "activity": "SetControlLatencyRootPath",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "userProperties": [],
            "typeProperties": {
              "variableName": "IngestionStartDate",
              "value": {
                "value": "@formatDateTime(addToTime(pipeline().parameters.RunDate, int(pipeline().parameters.ExtractionBackDays),'Day'), 'MM/dd/yyyy')",
                "type": "Expression"
              }
            }
          }
        ],
        "concurrency": 1,
        "parameters": {
          "RunDate": {
            "type": "string",
            "defaultValue": "05/01/2020"
          },
          "ExtractionBackDays": {
            "type": "string",
            "defaultValue": "-4"
          }
        },
        "variables": {
          "ScriptRootPath": {
            "type": "String",
            "defaultValue": "resources/Scripts"
          },
          "IngestionRootPath": {
            "type": "String"
          },
          "CommonRootPath": {
            "type": "String"
          },
          "ControlOutputRootPath": {
            "type": "String"
          },
          "IncludeTest": {
            "type": "String",
            "defaultValue": "[parameters('OrderToChargeAggregator_properties_variables_IncludeTest_defaultValue')]"
          },
          "ControlName": {
            "type": "String",
            "defaultValue": "OrderToCA"
          },
          "Container": {
            "type": "String",
            "defaultValue": "control"
          },
          "ErrorMessage": {
            "type": "String"
          },
          "BinariesPath": {
            "type": "String"
          },
          "IngestionStartDate": {
            "type": "String"
          },
          "AnalysisInputStreamPath": {
            "type": "String"
          },
          "AnalysisOutputRootPath": {
            "type": "String"
          },
          "ControlLatencyRootPath": {
            "type": "String"
          }
        },
        "folder": {
          "name": "Control"
        },
        "annotations": []
      },
      "dependsOn": [
        "[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorageGen2')]",
        "[concat(variables('factoryId'), '/linkedServices/AzureDataLakeAnalytics')]",
        "[concat(variables('factoryId'), '/linkedServices/AZLogReconAnalysisLS')]",
        "[concat(variables('factoryId'), '/linkedServices/AZlogAdfPipelineFuncLS')]"
      ]
    },
    {
      "name": "[concat(parameters('factoryName'), '/RAToLedger')]",
      "type": "Microsoft.DataFactory/factories/pipelines",
      "apiVersion": "2018-06-01",
      "properties": {
        "description": "Recon control between charge aggregator and ledger",
        "activities": [
          {
            "name": "RAToLedgerControl",
            "description": "Control between RA and Ledger",
            "type": "DataLakeAnalyticsScope",
            "dependsOn": [
              {
                "activity": "RAToLedgerRecon_RAProcessing",
                "dependencyConditions": [
                  "Succeeded"
                ]
              },
              {
                "activity": "RAToLedgerRecon_LedgerProcessing",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "policy": {
              "timeout": "0.02:00:00",
              "retry": 3,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "scriptFolderPath": {
                "value": "@variables('ScriptRootPath')",
                "type": "Expression"
              },
              "scriptFileName": "RAToLedgerRecon.script",
              "runtimeVersion": {
                "value": "@pipeline().globalParameters.ScopeRunTime",
                "type": "Expression"
              },
              "scriptLinkedService": {
                "referenceName": "AzureDataLakeStorageGen2",
                "type": "LinkedServiceReference"
              },
              "parameters": {
                "INPUTROOTPATH": {
                  "value": "@variables('ControlOutputRootPath')",
                  "type": "Expression"
                },
                "COMMONINPUTROOTPATH": {
                  "value": "@variables('CommonRootPath')",
                  "type": "Expression"
                },
                "OUTPUTROOTPATH": {
                  "value": "@variables('ControlOutputRootPath')",
                  "type": "Expression"
                },
                "INGESTIONSTARTDATE": {
                  "value": "@concat('\"', variables('IngestionStartDate'), '\"')",
                  "type": "Expression"
                },
                "RUNDATE": {
                  "value": "@concat('\"', pipeline().parameters.RunDate, '\"')",
                  "type": "Expression"
                },
                "INCLUDETEST": {
                  "value": "@variables('IncludeTest')",
                  "type": "Expression"
                },
                "RESOURCEPATH": {
                  "value": "@variables('BinariesPath')",
                  "type": "Expression"
                },
                "CONTROLLATENCYROOTPATH": {
                  "value": "@variables('ControlLatencyRootPath')",
                  "type": "Expression"
                },
                "CONTROLNAME": {
                  "value": "@variables('ControlName')",
                  "type": "Expression"
                }
              }
            },
            "linkedServiceName": {
              "referenceName": "AzureDataLakeAnalytics",
              "type": "LinkedServiceReference"
            }
          },
          {
            "name": "RAToLedgerAnalysis",
            "description": "Analysis script for RA to ledger",
            "type": "DataLakeAnalyticsScope",
            "dependsOn": [
              {
                "activity": "SetAnalysisOutputRootPath",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "policy": {
              "timeout": "0.01:00:00",
              "retry": 3,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "scriptFolderPath": {
                "value": "@variables('ScriptRootPath')",
                "type": "Expression"
              },
              "scriptFileName": "ReconAnalysis.script",
              "runtimeVersion": {
                "value": "@pipeline().globalParameters.ScopeRunTime",
                "type": "Expression"
              },
              "scriptLinkedService": {
                "referenceName": "AzureDataLakeStorageGen2",
                "type": "LinkedServiceReference"
              },
              "parameters": {
                "CONTROLNAME": {
                  "value": "@variables('ControlName')",
                  "type": "Expression"
                },
                "RECONRESULTSTREAMPATH": {
                  "value": "@variables('AnalysisInputStreamPath')",
                  "type": "Expression"
                },
                "SLAINHOURS": "24",
                "OUTPUTROOTPATH": {
                  "value": "@variables('AnalysisOutputRootPath')",
                  "type": "Expression"
                },
                "ENGINEERINGTHRESHOLD": "100",
                "SOXTHRESHOLD": "1000000",
                "RUNDATE": {
                  "value": "@concat('\"', pipeline().parameters.RunDate, '\"')",
                  "type": "Expression"
                }
              }
            },
            "linkedServiceName": {
              "referenceName": "AzureDataLakeAnalytics",
              "type": "LinkedServiceReference"
            }
          },
          {
            "name": "LogEnggAnalysisResultsForRAToLedger",
            "description": "Send Engineering Analysis results for RA to ledger",
            "type": "AzureFunctionActivity",
            "dependsOn": [
              {
                "activity": "RAToLedgerAnalysis",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "policy": {
              "timeout": "0.00:10:00",
              "retry": 3,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "functionName": "LogReconResult",
              "method": "POST",
              "headers": {},
              "body": {
                "ReconResultUri": "control/data/Recon/RAToLedger/Analysis/EngineeringAnalysis_RAToLedger.csv"
              }
            },
            "linkedServiceName": {
              "referenceName": "AZLogReconAnalysisLS",
              "type": "LinkedServiceReference"
            }
          },
          {
            "name": "RAToLedgerAnalysisLogSuccess",
            "description": "Log success for RA to ledger analysis",
            "type": "AzureFunctionActivity",
            "dependsOn": [
              {
                "activity": "RAToLedgerAnalysis",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "policy": {
              "timeout": "0.00:10:00",
              "retry": 3,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "functionName": "LogAdfPipelineStatus",
              "method": "POST",
              "headers": {},
              "body": {
                "value": "{\"Activity\":\"RAToLedgerAnalysis\", \"Status\":\"Success\", \"DataFactoryName\": \"@{pipeline().DataFactory}\", \"PipelineName\": \"@{pipeline().Pipeline}\", \"TriggeredBy\": \"@{pipeline().TriggerName}\", \"TriggerTime\":\"@{pipeline().TriggerTime}\"}",
                "type": "Expression"
              }
            },
            "linkedServiceName": {
              "referenceName": "AZlogAdfPipelineFuncLS",
              "type": "LinkedServiceReference"
            }
          },
          {
            "name": "RAToLedgerControlLogFailure",
            "description": "Log failure for RA to ledger control",
            "type": "AzureFunctionActivity",
            "dependsOn": [
              {
                "activity": "RAToLedgerControl",
                "dependencyConditions": [
                  "Failed"
                ]
              }
            ],
            "policy": {
              "timeout": "0.00:10:00",
              "retry": 3,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "functionName": "LogAdfPipelineStatus",
              "method": "POST",
              "headers": {},
              "body": {
                "Activity": "RAToLedgerControl",
                "Status": "Failed",
                "DataFactoryName": "@{pipeline().DataFactory}",
                "PipelineName": "@{pipeline().Pipeline}",
                "TriggeredBy": "@{pipeline().TriggerName}",
                "TriggerTime": "@{pipeline().TriggerTime}"
              }
            },
            "linkedServiceName": {
              "referenceName": "AZlogAdfPipelineFuncLS",
              "type": "LinkedServiceReference"
            }
          },
          {
            "name": "RAToLedgerControlLogSuccess",
            "description": "Log success for RA to ledger control",
            "type": "AzureFunctionActivity",
            "dependsOn": [
              {
                "activity": "RAToLedgerControl",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "policy": {
              "timeout": "0.00:10:00",
              "retry": 3,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "functionName": "LogAdfPipelineStatus",
              "method": "POST",
              "headers": {},
              "body": {
                "Activity": "RAToLedgerControl",
                "Status": "Success",
                "DataFactoryName": "@{pipeline().DataFactory}",
                "PipelineName": "@{pipeline().Pipeline}",
                "TriggeredBy": "@{pipeline().TriggerName}",
                "TriggerTime": "@{pipeline().TriggerTime}"
              }
            },
            "linkedServiceName": {
              "referenceName": "AZlogAdfPipelineFuncLS",
              "type": "LinkedServiceReference"
            }
          },
          {
            "name": "RAToLedgerAnalysisLogFailure",
            "description": "log failure for RA to Ledger analysis",
            "type": "AzureFunctionActivity",
            "dependsOn": [
              {
                "activity": "RAToLedgerAnalysis",
                "dependencyConditions": [
                  "Failed"
                ]
              }
            ],
            "policy": {
              "timeout": "0.00:10:00",
              "retry": 3,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "functionName": "LogAdfPipelineStatus",
              "method": "POST",
              "headers": {},
              "body": {
                "Activity": "RAToLedgerAnalysis",
                "Status": "Failed",
                "DataFactoryName": "@{pipeline().DataFactory}",
                "PipelineName": "@{pipeline().Pipeline}",
                "TriggeredBy": "@{pipeline().TriggerName}",
                "TriggerTime": "@{pipeline().TriggerTime}"
              }
            },
            "linkedServiceName": {
              "referenceName": "AZlogAdfPipelineFuncLS",
              "type": "LinkedServiceReference"
            }
          },
          {
            "name": "SetIngestionRootPath",
            "description": "Set input root path for control",
            "type": "SetVariable",
            "dependsOn": [
              {
                "activity": "SetBinariesPath",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "userProperties": [],
            "typeProperties": {
              "variableName": "IngestionRootPath",
              "value": {
                "value": "@concat('\"', pipeline().globalParameters.ADLGen2StorageProtocolPrefix,  'transformation@', pipeline().globalParameters.ADLGen2StorageAccountName, pipeline().globalParameters.ADLGen2StoragePathSuffix, '/data/Ingestion\"')",
                "type": "Expression"
              }
            }
          },
          {
            "name": "SetOutputRootPath",
            "description": "set output root path for control",
            "type": "SetVariable",
            "dependsOn": [
              {
                "activity": "SetCommonRootPath",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "userProperties": [],
            "typeProperties": {
              "variableName": "ControlOutputRootPath",
              "value": {
                "value": "@concat('\"', pipeline().globalParameters.ADLGen2StorageProtocolPrefix,  'control@', pipeline().globalParameters.ADLGen2StorageAccountName, pipeline().globalParameters.ADLGen2StoragePathSuffix, '/data/Recon/', variables('ControlName'), '\"')",
                "type": "Expression"
              }
            }
          },
          {
            "name": "SetCommonRootPath",
            "description": "set common root path",
            "type": "SetVariable",
            "dependsOn": [
              {
                "activity": "SetIngestionRootPath",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "userProperties": [],
            "typeProperties": {
              "variableName": "CommonRootPath",
              "value": {
                "value": "@concat('\"', pipeline().globalParameters.ADLGen2StorageProtocolPrefix,  'transformation@', pipeline().globalParameters.ADLGen2StorageAccountName, pipeline().globalParameters.ADLGen2StoragePathSuffix, '/data/Ingestion\"')",
                "type": "Expression"
              }
            }
          },
          {
            "name": "SetBinariesPath",
            "description": "Set path for binary reosurces",
            "type": "SetVariable",
            "dependsOn": [],
            "userProperties": [],
            "typeProperties": {
              "variableName": "BinariesPath",
              "value": {
                "value": "@concat('\"', pipeline().globalParameters.ADLGen2StorageProtocolPrefix, 'resources@', \npipeline().globalParameters.ADLGen2StorageAccountName, pipeline().globalParameters.ADLGen2StoragePathSuffix, '/Binaries/\"')",
                "type": "Expression"
              }
            }
          },
          {
            "name": "SetAnalysisStreamInputPath",
            "description": "Set path for control stream that is input to Analysis script",
            "type": "SetVariable",
            "dependsOn": [
              {
                "activity": "RAToLedgerControl",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "userProperties": [],
            "typeProperties": {
              "variableName": "AnalysisInputStreamPath",
              "value": {
                "value": "@concat('\"', pipeline().globalParameters.ADLGen2StorageProtocolPrefix,  'control@', pipeline().globalParameters.ADLGen2StorageAccountName, pipeline().globalParameters.ADLGen2StoragePathSuffix, '/data/Recon/', variables('ControlName'), '/Latest', variables('ControlName'), 'ReconResults.ss\"')",
                "type": "Expression"
              }
            }
          },
          {
            "name": "SetAnalysisOutputRootPath",
            "type": "SetVariable",
            "dependsOn": [
              {
                "activity": "SetAnalysisStreamInputPath",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "userProperties": [],
            "typeProperties": {
              "variableName": "AnalysisOutputRootPath",
              "value": {
                "value": "@concat('\"', pipeline().globalParameters.ADLGen2StorageProtocolPrefix,  'control@', pipeline().globalParameters.ADLGen2StorageAccountName, pipeline().globalParameters.ADLGen2StoragePathSuffix, '/data/Recon/', variables('ControlName'), '/Analysis\"')",
                "type": "Expression"
              }
            }
          },
          {
            "name": "SetDefaultIngestionStartDate",
            "type": "SetVariable",
            "dependsOn": [
              {
                "activity": "SetControlLatencyRootPath",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "userProperties": [],
            "typeProperties": {
              "variableName": "IngestionStartDate",
              "value": {
                "value": "@formatDateTime(addToTime(pipeline().parameters.RunDate, int(pipeline().parameters.ExtractionBackDays),'Day'), 'MM/dd/yyyy')",
                "type": "Expression"
              }
            }
          },
          {
            "name": "SetControlLatencyRootPath",
            "description": "Set path for control latency files",
            "type": "SetVariable",
            "dependsOn": [],
            "userProperties": [],
            "typeProperties": {
              "variableName": "ControlLatencyRootPath",
              "value": {
                "value": "@concat('\"', pipeline().globalParameters.ADLGen2StorageProtocolPrefix,  'control@', pipeline().globalParameters.ADLGen2StorageAccountName, pipeline().globalParameters.ADLGen2StoragePathSuffix, '/data/Recon/ControlLatency', '\"')",
                "type": "Expression"
              }
            }
          },
          {
            "name": "LogSOXAnalysisResultsForRAToLedger",
            "description": "Send SOX Analysis results for RA to ledger",
            "type": "AzureFunctionActivity",
            "dependsOn": [
              {
                "activity": "RAToLedgerAnalysis",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "policy": {
              "timeout": "0.00:10:00",
              "retry": 3,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "functionName": "LogReconResult",
              "method": "POST",
              "headers": {},
              "body": {
                "ReconResultUri": "control/data/Recon/RAToLedger/Analysis/SOXAnalysis_RAToLedger.csv"
              }
            },
            "linkedServiceName": {
              "referenceName": "AZLogReconAnalysisLS",
              "type": "LinkedServiceReference"
            }
          },
          {
            "name": "RAToLedgerRecon_RAProcessing",
            "description": "Processing for RA data for recon between RA and Ledger",
            "type": "DataLakeAnalyticsScope",
            "dependsOn": [
              {
                "activity": "SetOutputRootPath",
                "dependencyConditions": [
                  "Succeeded"
                ]
              },
              {
                "activity": "SetDefaultIngestionStartDate",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "policy": {
              "timeout": "0.02:00:00",
              "retry": 3,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "scriptFolderPath": {
                "value": "@variables('ScriptRootPath')",
                "type": "Expression"
              },
              "scriptFileName": "RAToLedgerReconRADeferralProcessing.script",
              "runtimeVersion": {
                "value": "@pipeline().globalParameters.ScopeRunTime",
                "type": "Expression"
              },
              "scriptLinkedService": {
                "referenceName": "AzureDataLakeStorageGen2",
                "type": "LinkedServiceReference"
              },
              "parameters": {
                "INPUTROOTPATH": {
                  "value": "@variables('IngestionRootPath')",
                  "type": "Expression"
                },
                "RAINPUTROOTPATH": {
                  "value": "@variables('IngestionRootPath')",
                  "type": "Expression"
                },
                "COMMONINPUTROOTPATH": {
                  "value": "@variables('CommonRootPath')",
                  "type": "Expression"
                },
                "OUTPUTROOTPATH": {
                  "value": "@variables('ControlOutputRootPath')",
                  "type": "Expression"
                },
                "INGESTIONSTARTDATE": {
                  "value": "@concat('\"', variables('IngestionStartDate'), '\"')",
                  "type": "Expression"
                },
                "RUNDATE": {
                  "value": "@concat('\"', pipeline().parameters.RunDate, '\"')",
                  "type": "Expression"
                },
                "INCLUDETEST": {
                  "value": "@variables('IncludeTest')",
                  "type": "Expression"
                },
                "RESOURCEPATH": {
                  "value": "@variables('BinariesPath')",
                  "type": "Expression"
                },
                "CONTROLLATENCYROOTPATH": {
                  "value": "@variables('ControlLatencyRootPath')",
                  "type": "Expression"
                },
                "CONTROLNAME": {
                  "value": "@variables('ControlName')",
                  "type": "Expression"
                },
                "RESETCACHE": "True"
              }
            },
            "linkedServiceName": {
              "referenceName": "AzureDataLakeAnalytics",
              "type": "LinkedServiceReference"
            }
          },
          {
            "name": "RAToLedgerRecon_LedgerProcessing",
            "description": "Processing for RA data for recon between RA and Ledger",
            "type": "DataLakeAnalyticsScope",
            "dependsOn": [
              {
                "activity": "SetOutputRootPath",
                "dependencyConditions": [
                  "Succeeded"
                ]
              },
              {
                "activity": "SetDefaultIngestionStartDate",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "policy": {
              "timeout": "0.02:00:00",
              "retry": 3,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "scriptFolderPath": {
                "value": "@variables('ScriptRootPath')",
                "type": "Expression"
              },
              "scriptFileName": "RAToLedgerReconLedgerDeferralProcessing.script",
              "runtimeVersion": {
                "value": "@pipeline().globalParameters.ScopeRunTime",
                "type": "Expression"
              },
              "scriptLinkedService": {
                "referenceName": "AzureDataLakeStorageGen2",
                "type": "LinkedServiceReference"
              },
              "parameters": {
                "INPUTROOTPATH": {
                  "value": "@variables('IngestionRootPath')",
                  "type": "Expression"
                },
                "REVRECINPUTROOTPATH": {
                  "value": "@variables('IngestionRootPath')",
                  "type": "Expression"
                },
                "COMMONINPUTROOTPATH": {
                  "value": "@variables('CommonRootPath')",
                  "type": "Expression"
                },
                "OUTPUTROOTPATH": {
                  "value": "@variables('ControlOutputRootPath')",
                  "type": "Expression"
                },
                "INGESTIONSTARTDATE": {
                  "value": "@concat('\"', variables('IngestionStartDate'), '\"')",
                  "type": "Expression"
                },
                "RUNDATE": {
                  "value": "@concat('\"', pipeline().parameters.RunDate, '\"')",
                  "type": "Expression"
                },
                "INCLUDETEST": {
                  "value": "@variables('IncludeTest')",
                  "type": "Expression"
                },
                "RESOURCEPATH": {
                  "value": "@variables('BinariesPath')",
                  "type": "Expression"
                },
                "CONTROLLATENCYROOTPATH": {
                  "value": "@variables('ControlLatencyRootPath')",
                  "type": "Expression"
                },
                "CONTROLNAME": {
                  "value": "@variables('ControlName')",
                  "type": "Expression"
                },
                "RESETCACHE": "True"
              }
            },
            "linkedServiceName": {
              "referenceName": "AzureDataLakeAnalytics",
              "type": "LinkedServiceReference"
            }
          }
        ],
        "concurrency": 1,
        "parameters": {
          "RunDate": {
            "type": "string",
            "defaultValue": "05/26/2020"
          },
          "ExtractionBackDays": {
            "type": "string",
            "defaultValue": "-5"
          }
        },
        "variables": {
          "ScriptRootPath": {
            "type": "String",
            "defaultValue": "resources/Scripts"
          },
          "IngestionRootPath": {
            "type": "String"
          },
          "CommonRootPath": {
            "type": "String"
          },
          "ControlOutputRootPath": {
            "type": "String"
          },
          "IncludeTest": {
            "type": "String",
            "defaultValue": "[parameters('RAToLedger_properties_variables_IncludeTest_defaultValue')]"
          },
          "ControlName": {
            "type": "String",
            "defaultValue": "RAToLedger"
          },
          "Container": {
            "type": "String",
            "defaultValue": "control"
          },
          "ErrorMessage": {
            "type": "String"
          },
          "BinariesPath": {
            "type": "String"
          },
          "IngestionStartDate": {
            "type": "String"
          },
          "AnalysisInputStreamPath": {
            "type": "String"
          },
          "AnalysisOutputRootPath": {
            "type": "String"
          },
          "ControlLatencyRootPath": {
            "type": "String"
          }
        },
        "folder": {
          "name": "Control"
        },
        "annotations": []
      },
      "dependsOn": [
        "[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorageGen2')]",
        "[concat(variables('factoryId'), '/linkedServices/AzureDataLakeAnalytics')]",
        "[concat(variables('factoryId'), '/linkedServices/AZLogReconAnalysisLS')]",
        "[concat(variables('factoryId'), '/linkedServices/AZlogAdfPipelineFuncLS')]"
      ]
    },
    {
      "name": "[concat(parameters('factoryName'), '/RatingToLedger')]",
      "type": "Microsoft.DataFactory/factories/pipelines",
      "apiVersion": "2018-06-01",
      "properties": {
        "description": "Recon control between Rating and Ledger",
        "activities": [
          {
            "name": "RatingToLedgerControl",
            "description": "Control between RatingToLedger",
            "type": "DataLakeAnalyticsScope",
            "dependsOn": [
              {
                "activity": "SetOutputRootPath",
                "dependencyConditions": [
                  "Succeeded"
                ]
              },
              {
                "activity": "SetDefaultIngestionStartDate",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "policy": {
              "timeout": "0.02:00:00",
              "retry": 0,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "scriptFolderPath": {
                "value": "@variables('ScriptRootPath')",
                "type": "Expression"
              },
              "scriptFileName": "RatingToLedgerRecon.script",
              "runtimeVersion": {
                "value": "@pipeline().globalParameters.ScopeRunTime",
                "type": "Expression"
              },
              "scriptLinkedService": {
                "referenceName": "AzureDataLakeStorageGen2",
                "type": "LinkedServiceReference"
              },
              "parameters": {
                "LEDGERINPUTROOTPATH": {
                  "value": "@variables('IngestionRootPath')",
                  "type": "Expression"
                },
                "RATINGINPUTROOTPATH": {
                  "value": "@variables('IngestionRootPath')",
                  "type": "Expression"
                },
                "COMMONINPUTROOTPATH": {
                  "value": "@variables('CommonRootPath')",
                  "type": "Expression"
                },
                "OUTPUTROOTPATH": {
                  "value": "@variables('ControlOutputRootPath')",
                  "type": "Expression"
                },
                "STARTDATE": {
                  "value": "@concat('\"', variables('IngestionStartDate'), '\"')",
                  "type": "Expression"
                },
                "RUNDATE": {
                  "value": "@concat('\"', variables('OffsetedRunDate'), '\"')",
                  "type": "Expression"
                },
                "INCLUDETEST": {
                  "value": "@variables('IncludeTest')",
                  "type": "Expression"
                },
                "RESOURCEPATH": {
                  "value": "@variables('BinariesPath')",
                  "type": "Expression"
                },
                "CONTROLLATENCYROOTPATH": {
                  "value": "@variables('ControlLatencyRootPath')",
                  "type": "Expression"
                },
                "CONTROLNAME": {
                  "value": "@variables('ControlName')",
                  "type": "Expression"
                }
              }
            },
            "linkedServiceName": {
              "referenceName": "AzureDataLakeAnalytics",
              "type": "LinkedServiceReference"
            }
          },
          {
            "name": "RatingToLedgerAnalysis",
            "description": "Analysis script for RatingToLedger",
            "type": "DataLakeAnalyticsScope",
            "dependsOn": [
              {
                "activity": "SetAnalysisOutputRootPath",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "policy": {
              "timeout": "0.01:00:00",
              "retry": 0,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "scriptFolderPath": {
                "value": "@variables('ScriptRootPath')",
                "type": "Expression"
              },
              "scriptFileName": "ReconAnalysis.script",
              "runtimeVersion": {
                "value": "@pipeline().globalParameters.ScopeRunTime",
                "type": "Expression"
              },
              "scriptLinkedService": {
                "referenceName": "AzureDataLakeStorageGen2",
                "type": "LinkedServiceReference"
              },
              "parameters": {
                "CONTROLNAME": {
                  "value": "@variables('ControlName')",
                  "type": "Expression"
                },
                "RECONRESULTSTREAMPATH": {
                  "value": "@variables('AnalysisInputStreamPath')",
                  "type": "Expression"
                },
                "SLAINHOURS": "0",
                "OUTPUTROOTPATH": {
                  "value": "@variables('AnalysisOutputRootPath')",
                  "type": "Expression"
                },
                "ENGINEERINGTHRESHOLD": "100",
                "SOXTHRESHOLD": "1000000",
                "RUNDATE": {
                  "value": "@concat('\"', pipeline().parameters.RunDate, '\"')",
                  "type": "Expression"
                }
              }
            },
            "linkedServiceName": {
              "referenceName": "AzureDataLakeAnalytics",
              "type": "LinkedServiceReference"
            }
          },
          {
            "name": "LogEnggAnalysisResultsForRatingToLedger",
            "description": "Send Engineering Analysis results for RatingToLedger",
            "type": "AzureFunctionActivity",
            "dependsOn": [
              {
                "activity": "RatingToLedgerAnalysis",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "policy": {
              "timeout": "0.00:10:00",
              "retry": 3,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "functionName": "LogReconResult",
              "method": "POST",
              "headers": {},
              "body": {
                "ReconResultUri": "control/data/Recon/RatingToLedger/Analysis/EngineeringAnalysis_RatingToLedger.csv"
              }
            },
            "linkedServiceName": {
              "referenceName": "AZLogReconAnalysisLS",
              "type": "LinkedServiceReference"
            }
          },
          {
            "name": "RatingToLedgerAnalysisLogSuccess",
            "description": "Log success for RatingToLedger analysis",
            "type": "AzureFunctionActivity",
            "dependsOn": [
              {
                "activity": "RatingToLedgerAnalysis",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "policy": {
              "timeout": "0.00:10:00",
              "retry": 3,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "functionName": "LogAdfPipelineStatus",
              "method": "POST",
              "headers": {},
              "body": {
                "value": "{\"Activity\":\"RatingToLedgerAnalysis\", \"Status\":\"Success\", \"DataFactoryName\": \"@{pipeline().DataFactory}\", \"PipelineName\": \"@{pipeline().Pipeline}\", \"TriggeredBy\": \"@{pipeline().TriggerName}\", \"TriggerTime\":\"@{pipeline().TriggerTime}\",\"PipelineRunId\":\"@{pipeline().RunId}\"}",
                "type": "Expression"
              }
            },
            "linkedServiceName": {
              "referenceName": "AZlogAdfPipelineFuncLS",
              "type": "LinkedServiceReference"
            }
          },
          {
            "name": "RatingToLedgerControlLogFailure",
            "description": "Log failure for RatingToLedger",
            "type": "AzureFunctionActivity",
            "dependsOn": [
              {
                "activity": "RatingToLedgerControl",
                "dependencyConditions": [
                  "Failed"
                ]
              }
            ],
            "policy": {
              "timeout": "0.00:10:00",
              "retry": 3,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "functionName": "LogAdfPipelineStatus",
              "method": "POST",
              "headers": {},
              "body": {
                "Activity": "@variables('ControlName')",
                "Status": "Failed",
                "DataFactoryName": "@{pipeline().DataFactory}",
                "PipelineName": "@{pipeline().Pipeline}",
                "TriggeredBy": "@{pipeline().TriggerName}",
                "TriggerTime": "@{pipeline().TriggerTime}",
                "PipelineRunId": "@{pipeline().RunId}",
                "Error": "@{activity('RatingToLedgerControl').error}"
              }
            },
            "linkedServiceName": {
              "referenceName": "AZlogAdfPipelineFuncLS",
              "type": "LinkedServiceReference"
            }
          },
          {
            "name": "RatingToLedgerControlLogSuccess",
            "description": "Log success for RatingToLedger",
            "type": "AzureFunctionActivity",
            "dependsOn": [
              {
                "activity": "RatingToLedgerControl",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "policy": {
              "timeout": "0.00:10:00",
              "retry": 3,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "functionName": "LogAdfPipelineStatus",
              "method": "POST",
              "headers": {},
              "body": {
                "Activity": "@variables('ControlName')",
                "Status": "Success",
                "DataFactoryName": "@{pipeline().DataFactory}",
                "PipelineName": "@{pipeline().Pipeline}",
                "TriggeredBy": "@{pipeline().TriggerName}",
                "TriggerTime": "@{pipeline().TriggerTime}",
                "PipelineRunId": "@{pipeline().RunId}"
              }
            },
            "linkedServiceName": {
              "referenceName": "AZlogAdfPipelineFuncLS",
              "type": "LinkedServiceReference"
            }
          },
          {
            "name": "RatingToLedgerAnalysisLogFailure",
            "description": "log failure for RatingToLedger analysis",
            "type": "AzureFunctionActivity",
            "dependsOn": [
              {
                "activity": "RatingToLedgerAnalysis",
                "dependencyConditions": [
                  "Failed"
                ]
              }
            ],
            "policy": {
              "timeout": "0.00:10:00",
              "retry": 3,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "functionName": "LogAdfPipelineStatus",
              "method": "POST",
              "headers": {},
              "body": {
                "Activity": "RatingToLedgerAnalysis",
                "Status": "Failed",
                "DataFactoryName": "@{pipeline().DataFactory}",
                "PipelineName": "@{pipeline().Pipeline}",
                "TriggeredBy": "@{pipeline().TriggerName}",
                "TriggerTime": "@{pipeline().TriggerTime}",
                "PipelineRunId": "@{pipeline().RunId}",
                "Error": "@{activity('RatingToLedgerAnalysis').error}"
              }
            },
            "linkedServiceName": {
              "referenceName": "AZlogAdfPipelineFuncLS",
              "type": "LinkedServiceReference"
            }
          },
          {
            "name": "SetIngestionRootPath",
            "description": "Set input root path for control",
            "type": "SetVariable",
            "dependsOn": [
              {
                "activity": "SetBinariesPath",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "userProperties": [],
            "typeProperties": {
              "variableName": "IngestionRootPath",
              "value": {
                "value": "@concat('\"', pipeline().globalParameters.ADLGen2StorageProtocolPrefix,  'transformation@', pipeline().globalParameters.ADLGen2StorageAccountName, pipeline().globalParameters.ADLGen2StoragePathSuffix, '/data/Ingestion\"')",
                "type": "Expression"
              }
            }
          },
          {
            "name": "SetOutputRootPath",
            "description": "set output root path for control",
            "type": "SetVariable",
            "dependsOn": [
              {
                "activity": "SetCommonRootPath",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "userProperties": [],
            "typeProperties": {
              "variableName": "ControlOutputRootPath",
              "value": {
                "value": "@concat('\"', pipeline().globalParameters.ADLGen2StorageProtocolPrefix,  'control@', pipeline().globalParameters.ADLGen2StorageAccountName, pipeline().globalParameters.ADLGen2StoragePathSuffix, '/data/Recon/', variables('ControlName'), '\"')",
                "type": "Expression"
              }
            }
          },
          {
            "name": "SetCommonRootPath",
            "description": "set common root path",
            "type": "SetVariable",
            "dependsOn": [
              {
                "activity": "SetIngestionRootPath",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "userProperties": [],
            "typeProperties": {
              "variableName": "CommonRootPath",
              "value": {
                "value": "@concat('\"', pipeline().globalParameters.ADLGen2StorageProtocolPrefix,  'transformation@', pipeline().globalParameters.ADLGen2StorageAccountName, pipeline().globalParameters.ADLGen2StoragePathSuffix, '/data/Ingestion\"')",
                "type": "Expression"
              }
            }
          },
          {
            "name": "SetBinariesPath",
            "description": "Set path for binary reosurces",
            "type": "SetVariable",
            "dependsOn": [],
            "userProperties": [],
            "typeProperties": {
              "variableName": "BinariesPath",
              "value": {
                "value": "@concat('\"', pipeline().globalParameters.ADLGen2StorageProtocolPrefix, 'resources@', \npipeline().globalParameters.ADLGen2StorageAccountName, pipeline().globalParameters.ADLGen2StoragePathSuffix, '/Binaries/\"')",
                "type": "Expression"
              }
            }
          },
          {
            "name": "SetAnalysisStreamInputPath",
            "description": "Set path for control stream that is input to Analysis script",
            "type": "SetVariable",
            "dependsOn": [
              {
                "activity": "RatingToLedgerControl",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "userProperties": [],
            "typeProperties": {
              "variableName": "AnalysisInputStreamPath",
              "value": {
                "value": "@concat('\"', pipeline().globalParameters.ADLGen2StorageProtocolPrefix,  'control@', pipeline().globalParameters.ADLGen2StorageAccountName, pipeline().globalParameters.ADLGen2StoragePathSuffix, '/data/Recon/', variables('ControlName'), '/Latest', variables('ControlName'), 'ReconResults.ss\"')",
                "type": "Expression"
              }
            }
          },
          {
            "name": "SetAnalysisOutputRootPath",
            "type": "SetVariable",
            "dependsOn": [
              {
                "activity": "SetAnalysisStreamInputPath",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "userProperties": [],
            "typeProperties": {
              "variableName": "AnalysisOutputRootPath",
              "value": {
                "value": "@concat('\"', pipeline().globalParameters.ADLGen2StorageProtocolPrefix,  'control@', pipeline().globalParameters.ADLGen2StorageAccountName, pipeline().globalParameters.ADLGen2StoragePathSuffix, '/data/Recon/', variables('ControlName'), '/Analysis\"')",
                "type": "Expression"
              }
            }
          },
          {
            "name": "SetDefaultIngestionStartDate",
            "type": "SetVariable",
            "dependsOn": [
              {
                "activity": "SetControlLatencyRootPath",
                "dependencyConditions": [
                  "Succeeded"
                ]
              },
              {
                "activity": "SetOffsetedRunDate",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "userProperties": [],
            "typeProperties": {
              "variableName": "IngestionStartDate",
              "value": {
                "value": "@formatDateTime(addToTime(variables('OffsetedRunDate'), int(pipeline().parameters.ExtractionBackDays),'Day'), 'MM/dd/yyyy')",
                "type": "Expression"
              }
            }
          },
          {
            "name": "SetControlLatencyRootPath",
            "description": "Set path for control latency files",
            "type": "SetVariable",
            "dependsOn": [],
            "userProperties": [],
            "typeProperties": {
              "variableName": "ControlLatencyRootPath",
              "value": {
                "value": "@concat('\"', pipeline().globalParameters.ADLGen2StorageProtocolPrefix,  'control@', pipeline().globalParameters.ADLGen2StorageAccountName, pipeline().globalParameters.ADLGen2StoragePathSuffix, '/data/Recon/ControlLatency', '\"')",
                "type": "Expression"
              }
            }
          },
          {
            "name": "LogSOXAnalysisResultsForRatingToLedger",
            "description": "Send SOX Analysis results for RatingToLedger",
            "type": "AzureFunctionActivity",
            "dependsOn": [
              {
                "activity": "RatingToLedgerAnalysis",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "policy": {
              "timeout": "0.00:10:00",
              "retry": 3,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "functionName": "LogReconResult",
              "method": "POST",
              "headers": {},
              "body": {
                "ReconResultUri": "control/data/Recon/RatingToLedger/Analysis/SOXAnalysis_RatingToLedger.csv"
              }
            },
            "linkedServiceName": {
              "referenceName": "AZLogReconAnalysisLS",
              "type": "LinkedServiceReference"
            }
          },
          {
            "name": "SetOffsetedRunDate",
            "type": "SetVariable",
            "dependsOn": [],
            "userProperties": [],
            "typeProperties": {
              "variableName": "OffsetedRunDate",
              "value": {
                "value": "@formatDateTime(addToTime(pipeline().parameters.RunDate, -1,'Day'), 'MM/dd/yyyy')",
                "type": "Expression"
              }
            }
          }
        ],
        "concurrency": 1,
        "parameters": {
          "RunDate": {
            "type": "string",
            "defaultValue": "2020-08-04"
          },
          "ExtractionBackDays": {
            "type": "string",
            "defaultValue": "0"
          }
        },
        "variables": {
          "ScriptRootPath": {
            "type": "String",
            "defaultValue": "resources/Scripts"
          },
          "IngestionRootPath": {
            "type": "String"
          },
          "CommonRootPath": {
            "type": "String"
          },
          "ControlOutputRootPath": {
            "type": "String"
          },
          "IncludeTest": {
            "type": "String",
            "defaultValue": "[parameters('RatingToLedger_properties_variables_IncludeTest_defaultValue')]"
          },
          "ControlName": {
            "type": "String",
            "defaultValue": "RatingToLedger"
          },
          "Container": {
            "type": "String",
            "defaultValue": "control"
          },
          "ErrorMessage": {
            "type": "String"
          },
          "BinariesPath": {
            "type": "String"
          },
          "IngestionStartDate": {
            "type": "String"
          },
          "AnalysisInputStreamPath": {
            "type": "String"
          },
          "AnalysisOutputRootPath": {
            "type": "String"
          },
          "ControlLatencyRootPath": {
            "type": "String"
          },
          "OffsetedRunDate": {
            "type": "String"
          }
        },
        "folder": {
          "name": "Control"
        },
        "annotations": []
      },
      "dependsOn": [
        "[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorageGen2')]",
        "[concat(variables('factoryId'), '/linkedServices/AzureDataLakeAnalytics')]",
        "[concat(variables('factoryId'), '/linkedServices/AZLogReconAnalysisLS')]",
        "[concat(variables('factoryId'), '/linkedServices/AZlogAdfPipelineFuncLS')]"
      ]
    },
    {
      "name": "[concat(parameters('factoryName'), '/TimelineToLedger')]",
      "type": "Microsoft.DataFactory/factories/pipelines",
      "apiVersion": "2018-06-01",
      "properties": {
        "description": "Recon control between timeline and ledger",
        "activities": [
          {
            "name": "TimelineToLedgerControl",
            "description": "Control between Timeline and Ledger",
            "type": "DataLakeAnalyticsScope",
            "dependsOn": [
              {
                "activity": "SetOutputRootPath",
                "dependencyConditions": [
                  "Succeeded"
                ]
              },
              {
                "activity": "SetDefaultIngestionStartDate",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "policy": {
              "timeout": "0.02:00:00",
              "retry": 3,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "scriptFolderPath": {
                "value": "@variables('ScriptRootPath')",
                "type": "Expression"
              },
              "scriptFileName": "TimelineToLedgerRecon.script",
              "runtimeVersion": {
                "value": "@pipeline().globalParameters.ScopeRunTime",
                "type": "Expression"
              },
              "scriptLinkedService": {
                "referenceName": "AzureDataLakeStorageGen2",
                "type": "LinkedServiceReference"
              },
              "parameters": {
                "TIMELINEINPUTROOTPATH": {
                  "value": "@variables('TimelineInputRootPath')",
                  "type": "Expression"
                },
                "COMMONINPUTROOTPATH": {
                  "value": "@variables('CommonRootPath')",
                  "type": "Expression"
                },
                "OUTPUTROOTPATH": {
                  "value": "@variables('ControlOutputRootPath')",
                  "type": "Expression"
                },
                "INGESTIONSTARTDATE": {
                  "value": "@concat('\"', variables('IngestionStartDate'), '\"')",
                  "type": "Expression"
                },
                "RUNDATE": {
                  "value": "@concat('\"', pipeline().parameters.RunDate, '\"')",
                  "type": "Expression"
                },
                "INCLUDETEST": {
                  "value": "@variables('IncludeTest')",
                  "type": "Expression"
                },
                "RESOURCEPATH": {
                  "value": "@variables('BinariesPath')",
                  "type": "Expression"
                },
                "CONTROLLATENCYROOTPATH": {
                  "value": "@variables('ControlLatencyRootPath')",
                  "type": "Expression"
                },
                "CONTROLNAME": {
                  "value": "@variables('ControlName')",
                  "type": "Expression"
                },
                "USECACHESTREAM": "false"
              }
            },
            "linkedServiceName": {
              "referenceName": "AzureDataLakeAnalytics",
              "type": "LinkedServiceReference"
            }
          },
          {
            "name": "TimelineToLedgerAnalysis",
            "description": "Analysis script for Timeline to ledger",
            "type": "DataLakeAnalyticsScope",
            "dependsOn": [
              {
                "activity": "SetAnalysisOutputRootPath",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "policy": {
              "timeout": "0.01:00:00",
              "retry": 3,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "scriptFolderPath": {
                "value": "@variables('ScriptRootPath')",
                "type": "Expression"
              },
              "scriptFileName": "ReconAnalysis.script",
              "runtimeVersion": {
                "value": "@pipeline().globalParameters.ScopeRunTime",
                "type": "Expression"
              },
              "scriptLinkedService": {
                "referenceName": "AzureDataLakeStorageGen2",
                "type": "LinkedServiceReference"
              },
              "parameters": {
                "CONTROLNAME": {
                  "value": "@variables('ControlName')",
                  "type": "Expression"
                },
                "RECONRESULTSTREAMPATH": {
                  "value": "@variables('AnalysisInputStreamPath')",
                  "type": "Expression"
                },
                "SLAINHOURS": "24",
                "OUTPUTROOTPATH": {
                  "value": "@variables('AnalysisOutputRootPath')",
                  "type": "Expression"
                },
                "ENGINEERINGTHRESHOLD": "100",
                "SOXTHRESHOLD": "1000000",
                "RUNDATE": {
                  "value": "@concat('\"', pipeline().parameters.RunDate, '\"')",
                  "type": "Expression"
                }
              }
            },
            "linkedServiceName": {
              "referenceName": "AzureDataLakeAnalytics",
              "type": "LinkedServiceReference"
            }
          },
          {
            "name": "LogEnggAnalysisResultsForTimelineToLedger",
            "description": "Send Engineering Analysis results for Timeline to ledger",
            "type": "AzureFunctionActivity",
            "dependsOn": [
              {
                "activity": "TimelineToLedgerAnalysis",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "policy": {
              "timeout": "0.00:10:00",
              "retry": 3,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "functionName": "LogReconResult",
              "method": "POST",
              "headers": {},
              "body": {
                "ReconResultUri": "control/data/Recon/TimelineToLedger/Analysis/EngineeringAnalysis_TimelineToLedger.csv"
              }
            },
            "linkedServiceName": {
              "referenceName": "AZLogReconAnalysisLS",
              "type": "LinkedServiceReference"
            }
          },
          {
            "name": "TimelineToLedgerAnalysisLogSuccess",
            "description": "Log success for Timeline to ledger analysis",
            "type": "AzureFunctionActivity",
            "dependsOn": [
              {
                "activity": "TimelineToLedgerAnalysis",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "policy": {
              "timeout": "0.00:10:00",
              "retry": 3,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "functionName": "LogAdfPipelineStatus",
              "method": "POST",
              "headers": {},
              "body": {
                "value": "{\"Activity\":\"TimelineToLedgerAnalysis\", \"Status\":\"Success\", \"DataFactoryName\": \"@{pipeline().DataFactory}\", \"PipelineName\": \"@{pipeline().Pipeline}\", \"TriggeredBy\": \"@{pipeline().TriggerName}\", \"TriggerTime\":\"@{pipeline().TriggerTime}\"}",
                "type": "Expression"
              }
            },
            "linkedServiceName": {
              "referenceName": "AZlogAdfPipelineFuncLS",
              "type": "LinkedServiceReference"
            }
          },
          {
            "name": "TimelineToLedgerControlLogFailure",
            "description": "Log failure for Timeline to ledger control",
            "type": "AzureFunctionActivity",
            "dependsOn": [
              {
                "activity": "TimelineToLedgerControl",
                "dependencyConditions": [
                  "Failed"
                ]
              }
            ],
            "policy": {
              "timeout": "0.00:10:00",
              "retry": 3,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "functionName": "LogAdfPipelineStatus",
              "method": "POST",
              "headers": {},
              "body": {
                "Activity": "TimelineToLedgerControl",
                "Status": "Failed",
                "DataFactoryName": "@{pipeline().DataFactory}",
                "PipelineName": "@{pipeline().Pipeline}",
                "TriggeredBy": "@{pipeline().TriggerName}",
                "TriggerTime": "@{pipeline().TriggerTime}"
              }
            },
            "linkedServiceName": {
              "referenceName": "AZlogAdfPipelineFuncLS",
              "type": "LinkedServiceReference"
            }
          },
          {
            "name": "TimelineToLedgerControlLogSuccess",
            "description": "Log success for Timeline to ledger control",
            "type": "AzureFunctionActivity",
            "dependsOn": [
              {
                "activity": "TimelineToLedgerControl",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "policy": {
              "timeout": "0.00:10:00",
              "retry": 3,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "functionName": "LogAdfPipelineStatus",
              "method": "POST",
              "headers": {},
              "body": {
                "Activity": "TimelineToLedgerControl",
                "Status": "Success",
                "DataFactoryName": "@{pipeline().DataFactory}",
                "PipelineName": "@{pipeline().Pipeline}",
                "TriggeredBy": "@{pipeline().TriggerName}",
                "TriggerTime": "@{pipeline().TriggerTime}"
              }
            },
            "linkedServiceName": {
              "referenceName": "AZlogAdfPipelineFuncLS",
              "type": "LinkedServiceReference"
            }
          },
          {
            "name": "TimelineToLedgerAnalysisLogFailure",
            "description": "log failure for Timeline to Ledger analysis",
            "type": "AzureFunctionActivity",
            "dependsOn": [
              {
                "activity": "TimelineToLedgerAnalysis",
                "dependencyConditions": [
                  "Failed"
                ]
              }
            ],
            "policy": {
              "timeout": "0.00:10:00",
              "retry": 3,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "functionName": "LogAdfPipelineStatus",
              "method": "POST",
              "headers": {},
              "body": {
                "Activity": "TimelineToLedgerAnalysis",
                "Status": "Failed",
                "DataFactoryName": "@{pipeline().DataFactory}",
                "PipelineName": "@{pipeline().Pipeline}",
                "TriggeredBy": "@{pipeline().TriggerName}",
                "TriggerTime": "@{pipeline().TriggerTime}"
              }
            },
            "linkedServiceName": {
              "referenceName": "AZlogAdfPipelineFuncLS",
              "type": "LinkedServiceReference"
            }
          },
          {
            "name": "SetIngestionRootPath",
            "description": "Set input root path for control",
            "type": "SetVariable",
            "dependsOn": [
              {
                "activity": "SetBinariesPath",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "userProperties": [],
            "typeProperties": {
              "variableName": "IngestionRootPath",
              "value": {
                "value": "@concat('\"', pipeline().globalParameters.ADLGen2StorageProtocolPrefix,  'transformation@', pipeline().globalParameters.ADLGen2StorageAccountName, pipeline().globalParameters.ADLGen2StoragePathSuffix, '/data/Ingestion\"')",
                "type": "Expression"
              }
            }
          },
          {
            "name": "SetOutputRootPath",
            "description": "set output root path for control",
            "type": "SetVariable",
            "dependsOn": [
              {
                "activity": "SetCommonRootPath",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "userProperties": [],
            "typeProperties": {
              "variableName": "ControlOutputRootPath",
              "value": {
                "value": "@concat('\"', pipeline().globalParameters.ADLGen2StorageProtocolPrefix,  'control@', pipeline().globalParameters.ADLGen2StorageAccountName, pipeline().globalParameters.ADLGen2StoragePathSuffix, '/data/Recon/', variables('ControlName'), '\"')",
                "type": "Expression"
              }
            }
          },
          {
            "name": "SetCommonRootPath",
            "description": "set common root path",
            "type": "SetVariable",
            "dependsOn": [
              {
                "activity": "SetTimelineInputRootPath",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "userProperties": [],
            "typeProperties": {
              "variableName": "CommonRootPath",
              "value": {
                "value": "@concat('\"', pipeline().globalParameters.ADLGen2StorageProtocolPrefix,  'transformation@', pipeline().globalParameters.ADLGen2StorageAccountName, pipeline().globalParameters.ADLGen2StoragePathSuffix, '/data/Ingestion\"')",
                "type": "Expression"
              }
            }
          },
          {
            "name": "SetBinariesPath",
            "description": "Set path for binary reosurces",
            "type": "SetVariable",
            "dependsOn": [],
            "userProperties": [],
            "typeProperties": {
              "variableName": "BinariesPath",
              "value": {
                "value": "@concat('\"', pipeline().globalParameters.ADLGen2StorageProtocolPrefix, 'resources@', \npipeline().globalParameters.ADLGen2StorageAccountName, pipeline().globalParameters.ADLGen2StoragePathSuffix, '/Binaries/\"')",
                "type": "Expression"
              }
            }
          },
          {
            "name": "SetAnalysisStreamInputPath",
            "description": "Set path for control stream that is input to Analysis script",
            "type": "SetVariable",
            "dependsOn": [
              {
                "activity": "TimelineToLedgerControl",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "userProperties": [],
            "typeProperties": {
              "variableName": "AnalysisInputStreamPath",
              "value": {
                "value": "@concat('\"', pipeline().globalParameters.ADLGen2StorageProtocolPrefix,  'control@', pipeline().globalParameters.ADLGen2StorageAccountName, pipeline().globalParameters.ADLGen2StoragePathSuffix, '/data/Recon/', variables('ControlName'), '/Latest', variables('ControlName'), 'ReconResults.ss\"')",
                "type": "Expression"
              }
            }
          },
          {
            "name": "SetAnalysisOutputRootPath",
            "type": "SetVariable",
            "dependsOn": [
              {
                "activity": "SetAnalysisStreamInputPath",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "userProperties": [],
            "typeProperties": {
              "variableName": "AnalysisOutputRootPath",
              "value": {
                "value": "@concat('\"', pipeline().globalParameters.ADLGen2StorageProtocolPrefix,  'control@', pipeline().globalParameters.ADLGen2StorageAccountName, pipeline().globalParameters.ADLGen2StoragePathSuffix, '/data/Recon/', variables('ControlName'), '/Analysis\"')",
                "type": "Expression"
              }
            }
          },
          {
            "name": "SetDefaultIngestionStartDate",
            "type": "SetVariable",
            "dependsOn": [
              {
                "activity": "SetControlLatencyRootPath",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "userProperties": [],
            "typeProperties": {
              "variableName": "IngestionStartDate",
              "value": {
                "value": "@formatDateTime(addToTime(pipeline().parameters.RunDate, int(pipeline().parameters.ExtractionBackDays),'Day'), 'MM/dd/yyyy')",
                "type": "Expression"
              }
            }
          },
          {
            "name": "SetControlLatencyRootPath",
            "description": "Set path for control latency files",
            "type": "SetVariable",
            "dependsOn": [],
            "userProperties": [],
            "typeProperties": {
              "variableName": "ControlLatencyRootPath",
              "value": {
                "value": "@concat('\"', pipeline().globalParameters.ADLGen2StorageProtocolPrefix,  'control@', pipeline().globalParameters.ADLGen2StorageAccountName, pipeline().globalParameters.ADLGen2StoragePathSuffix, '/data/Recon/ControlLatency', '\"')",
                "type": "Expression"
              }
            }
          },
          {
            "name": "LogSOXAnalysisResultsForTimelineToTimelineToLedger",
            "description": "Send SOX Analysis results for Timeline to ledger",
            "type": "AzureFunctionActivity",
            "dependsOn": [
              {
                "activity": "TimelineToLedgerAnalysis",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "policy": {
              "timeout": "0.00:10:00",
              "retry": 3,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "functionName": "LogReconResult",
              "method": "POST",
              "headers": {},
              "body": {
                "ReconResultUri": "control/data/Recon/TimelineToLedger/Analysis/SOXAnalysis_TimelineToLedger.csv"
              }
            },
            "linkedServiceName": {
              "referenceName": "AZLogReconAnalysisLS",
              "type": "LinkedServiceReference"
            }
          },
          {
            "name": "SetTimelineInputRootPath",
            "description": "Set input root path for control",
            "type": "SetVariable",
            "dependsOn": [
              {
                "activity": "SetIngestionRootPath",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "userProperties": [],
            "typeProperties": {
              "variableName": "TimelineInputRootPath",
              "value": {
                "value": "@concat('\"',pipeline().globalParameters.ADLGen1StorageProtocolPrefix, variables('PartnerStorageRootPath'),'/local/Timeline/JournalData/Ingestion\"')",
                "type": "Expression"
              }
            }
          }
        ],
        "concurrency": 1,
        "parameters": {
          "RunDate": {
            "type": "string",
            "defaultValue": "05/25/2020"
          },
          "ExtractionBackDays": {
            "type": "string",
            "defaultValue": "-4"
          }
        },
        "variables": {
          "ScriptRootPath": {
            "type": "String",
            "defaultValue": "resources/Scripts"
          },
          "IngestionRootPath": {
            "type": "String"
          },
          "CommonRootPath": {
            "type": "String"
          },
          "ControlOutputRootPath": {
            "type": "String"
          },
          "IncludeTest": {
            "type": "String",
            "defaultValue": "[parameters('TimelineToLedger_properties_variables_IncludeTest_defaultValue')]"
          },
          "ControlName": {
            "type": "String",
            "defaultValue": "TimelineToLedger"
          },
          "Container": {
            "type": "String",
            "defaultValue": "control"
          },
          "ErrorMessage": {
            "type": "String"
          },
          "BinariesPath": {
            "type": "String"
          },
          "IngestionStartDate": {
            "type": "String"
          },
          "AnalysisInputStreamPath": {
            "type": "String"
          },
          "AnalysisOutputRootPath": {
            "type": "String"
          },
          "ControlLatencyRootPath": {
            "type": "String"
          },
          "TimelineInputRootPath": {
            "type": "String"
          },
          "PartnerStorageRootPath": {
            "type": "String",
            "defaultValue": "[parameters('TimelineToLedger_properties_variables_PartnerStorageRootPath_defaultValue')]"
          }
        },
        "folder": {
          "name": "Control"
        },
        "annotations": []
      },
      "dependsOn": [
        "[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorageGen2')]",
        "[concat(variables('factoryId'), '/linkedServices/AzureDataLakeAnalytics')]",
        "[concat(variables('factoryId'), '/linkedServices/AZLogReconAnalysisLS')]",
        "[concat(variables('factoryId'), '/linkedServices/AZlogAdfPipelineFuncLS')]"
      ]
    },
    {
      "name": "[concat(parameters('factoryName'), '/Transform-Rating')]",
      "type": "Microsoft.DataFactory/factories/pipelines",
      "apiVersion": "2018-06-01",
      "properties": {
        "activities": [
          {
            "name": "Check RPCC Metadata",
            "type": "Validation",
            "dependsOn": [
              {
                "activity": "SetBinariesPath",
                "dependencyConditions": [
                  "Succeeded"
                ]
              },
              {
                "activity": "SetOutputRootPath",
                "dependencyConditions": [
                  "Succeeded"
                ]
              },
              {
                "activity": "SetIngestionPathForLedger",
                "dependencyConditions": [
                  "Succeeded"
                ]
              },
              {
                "activity": "SetRunAccountingDateTime",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "userProperties": [],
            "typeProperties": {
              "dataset": {
                "referenceName": "TsvGen1DataSet",
                "type": "DatasetReference",
                "parameters": {
                  "Directory": {
                    "value": "local/CommerceUsageProcessing/Stream1/SharedData/Azure/v20180331/MetadataInternal/RatingPeriodCumulativeConsumptionOutput/@{formatDateTime(pipeline().parameters.RunTime, 'yyyy/MM/dd/HH')}",
                    "type": "Expression"
                  },
                  "FileName": {
                    "value": "RatingPeriodCumulativeConsumptionOutput_@{formatDateTime(pipeline().parameters.RunTime, 'yyyy_MM_dd_HH')}_00_00.tsv",
                    "type": "Expression"
                  }
                }
              },
              "timeout": "00:01:00",
              "sleep": 10
            }
          },
          {
            "name": "Set Rpcc Exist",
            "type": "SetVariable",
            "dependsOn": [
              {
                "activity": "Check RPCC Metadata",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "userProperties": [],
            "typeProperties": {
              "variableName": "rpccExists",
              "value": true
            }
          },
          {
            "name": "Check RPCCI Metadata",
            "type": "Validation",
            "dependsOn": [
              {
                "activity": "SetBinariesPath",
                "dependencyConditions": [
                  "Succeeded"
                ]
              },
              {
                "activity": "SetOutputRootPath",
                "dependencyConditions": [
                  "Succeeded"
                ]
              },
              {
                "activity": "SetIngestionPathForLedger",
                "dependencyConditions": [
                  "Succeeded"
                ]
              },
              {
                "activity": "SetRunAccountingDateTime",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "userProperties": [],
            "typeProperties": {
              "dataset": {
                "referenceName": "TsvGen1DataSet",
                "type": "DatasetReference",
                "parameters": {
                  "Directory": {
                    "value": "local/CommerceUsageProcessing/Stream1/SharedData/Azure/v20180331/MetadataInternal/RatingPeriodCumulativeConsumptionInstructionOutput/@{formatDateTime(pipeline().parameters.RunTime, 'yyyy/MM/dd/HH')}",
                    "type": "Expression"
                  },
                  "FileName": {
                    "value": "RatingPeriodCumulativeConsumptionInstructionOutput_@{formatDateTime(pipeline().parameters.RunTime, 'yyyy_MM_dd_HH')}_00_00.tsv",
                    "type": "Expression"
                  }
                }
              },
              "timeout": "00:01:00",
              "sleep": 10
            }
          },
          {
            "name": "Set Rpcci Exist",
            "type": "SetVariable",
            "dependsOn": [
              {
                "activity": "Check RPCCI Metadata",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "userProperties": [],
            "typeProperties": {
              "variableName": "rpcciExists",
              "value": true
            }
          },
          {
            "name": "If metadata streams exist",
            "type": "IfCondition",
            "dependsOn": [
              {
                "activity": "Set Rpcc Exist",
                "dependencyConditions": [
                  "Succeeded"
                ]
              },
              {
                "activity": "Set Rpcci Exist",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "userProperties": [],
            "typeProperties": {
              "expression": {
                "value": "@and(variables('rpccExists'), variables('rpcciExists'))",
                "type": "Expression"
              },
              "ifFalseActivities": [
                {
                  "name": "Rating Ingestion Failed",
                  "description": "Copy Invoice Summary Data Log Failure",
                  "type": "AzureFunctionActivity",
                  "dependsOn": [],
                  "policy": {
                    "timeout": "0.00:10:00",
                    "retry": 3,
                    "retryIntervalInSeconds": 30,
                    "secureOutput": false,
                    "secureInput": false
                  },
                  "userProperties": [],
                  "typeProperties": {
                    "functionName": "LogAdfPipelineStatus",
                    "method": "POST",
                    "headers": {},
                    "body": {
                      "Activity": "RatingIngest",
                      "Status": "Failed",
                      "DataFactoryName": "@{pipeline().DataFactory}",
                      "PipelineName": "@{pipeline().Pipeline}",
                      "Error": "Stream does not exist",
                      "TriggeredBy": "@{pipeline().TriggerName}",
                      "TriggerTime": "@{pipeline().TriggerTime}"
                    }
                  },
                  "linkedServiceName": {
                    "referenceName": "AZlogAdfPipelineFuncLS",
                    "type": "LinkedServiceReference"
                  }
                }
              ],
              "ifTrueActivities": [
                {
                  "name": "Ingest Rating",
                  "description": "Ingest RPCC and RPCCI",
                  "type": "DataLakeAnalyticsScope",
                  "dependsOn": [],
                  "policy": {
                    "timeout": "04:00:00",
                    "retry": 0,
                    "retryIntervalInSeconds": 30,
                    "secureOutput": false,
                    "secureInput": false
                  },
                  "userProperties": [],
                  "typeProperties": {
                    "scriptFolderPath": {
                      "value": "@variables('ScriptRootPath')",
                      "type": "Expression"
                    },
                    "scriptFileName": "IngestRating20180331.script",
                    "runtimeVersion": {
                      "value": "@pipeline().globalParameters.ScopeRunTime",
                      "type": "Expression"
                    },
                    "scriptLinkedService": {
                      "referenceName": "AzureDataLakeStorageGen2",
                      "type": "LinkedServiceReference"
                    },
                    "parameters": {
                      "INGESTIONPATH": {
                        "value": "@variables('IngestionPath')",
                        "type": "Expression"
                      },
                      "JOBOUTPUTPATH": {
                        "value": "@variables('OutputRootPath')",
                        "type": "Expression"
                      },
                      "RUNACCOUNTINGDATETIME": {
                        "value": "@concat('\"', variables('RunAccountingDate'), '\"')",
                        "type": "Expression"
                      },
                      "RESOURCEPATH": {
                        "value": "@variables('BinariesPath')",
                        "type": "Expression"
                      }
                    },
                    "nebulaArguments": "-on ScopeOutputFileSet -on ScopeInputFileSet -on ScopeNewUdoModel -on EnableParquetUdos"
                  },
                  "linkedServiceName": {
                    "referenceName": "AzureDataLakeAnalytics",
                    "type": "LinkedServiceReference"
                  }
                }
              ]
            }
          },
          {
            "name": "SetOutputRootPath",
            "description": "Set full path for output",
            "type": "SetVariable",
            "dependsOn": [],
            "userProperties": [],
            "typeProperties": {
              "variableName": "OutputRootPath",
              "value": {
                "value": "@concat('\"', pipeline().globalParameters.ADLGen2StorageProtocolPrefix, 'transformation@', \npipeline().globalParameters.ADLGen2StorageAccountName, pipeline().globalParameters.ADLGen2StoragePathSuffix, '/data/Ingestion\"')",
                "type": "Expression"
              }
            }
          },
          {
            "name": "SetBinariesPath",
            "description": "Set path for binary reosurces",
            "type": "SetVariable",
            "dependsOn": [],
            "userProperties": [],
            "typeProperties": {
              "variableName": "BinariesPath",
              "value": {
                "value": "@concat('\"', pipeline().globalParameters.ADLGen2StorageProtocolPrefix, 'resources@', \npipeline().globalParameters.ADLGen2StorageAccountName, pipeline().globalParameters.ADLGen2StoragePathSuffix, '/Binaries/\"')",
                "type": "Expression"
              }
            }
          },
          {
            "name": "SetIngestionPathForLedger",
            "description": "Set ingestion root path for ledger",
            "type": "SetVariable",
            "dependsOn": [],
            "userProperties": [],
            "typeProperties": {
              "variableName": "IngestionPath",
              "value": {
                "value": "@concat('\"', pipeline().globalParameters.ADLGen1StorageProtocolPrefix, pipeline().globalParameters.RatingDataStorageAccount, pipeline().globalParameters.ADLGen1StoragePathSuffix, '\"')",
                "type": "Expression"
              }
            }
          },
          {
            "name": "SetRunAccountingDateTime",
            "description": "Set run date time",
            "type": "SetVariable",
            "dependsOn": [],
            "userProperties": [],
            "typeProperties": {
              "variableName": "RunAccountingDate",
              "value": {
                "value": "@formatDateTime(pipeline().parameters.RunTime,'MM/dd/yyyy HH:mm:ss')",
                "type": "Expression"
              }
            }
          },
          {
            "name": "Execute Rating Stream RPCC Validation",
            "type": "ExecutePipeline",
            "dependsOn": [
              {
                "activity": "If metadata streams exist",
                "dependencyConditions": [
                  "Completed"
                ]
              }
            ],
            "userProperties": [],
            "typeProperties": {
              "pipeline": {
                "referenceName": "MonitorCsvStream",
                "type": "PipelineReference"
              },
              "waitOnCompletion": true,
              "parameters": {
                "Directory": {
                  "value": "@concat('data/Ingestion/Output/Rating20180331/',formatDateTime(pipeline().parameters.RunTime, 'yyyy/MM/dd'))",
                  "type": "Expression"
                },
                "File": {
                  "value": "@concat('Rpcc_',formatDateTime(pipeline().parameters.RunTime, 'yyyy_MM_dd_HH'), '.csv')",
                  "type": "Expression"
                }
              }
            }
          },
          {
            "name": "Execute Rating Stream RPCCI Validation",
            "type": "ExecutePipeline",
            "dependsOn": [
              {
                "activity": "If metadata streams exist",
                "dependencyConditions": [
                  "Completed"
                ]
              }
            ],
            "userProperties": [],
            "typeProperties": {
              "pipeline": {
                "referenceName": "MonitorCsvStream",
                "type": "PipelineReference"
              },
              "waitOnCompletion": true,
              "parameters": {
                "Directory": {
                  "value": "@concat('data/Ingestion/Output/Rating20180331/',formatDateTime(pipeline().parameters.RunTime, 'yyyy/MM/dd'))",
                  "type": "Expression"
                },
                "File": {
                  "value": "@concat('Rpcci_',formatDateTime(pipeline().parameters.RunTime, 'yyyy_MM_dd_HH'), '.csv')",
                  "type": "Expression"
                }
              }
            }
          },
          {
            "name": "Execute RPCCI Stream Validation In case of Failure",
            "type": "ExecutePipeline",
            "dependsOn": [
              {
                "activity": "Check RPCCI Metadata",
                "dependencyConditions": [
                  "Failed"
                ]
              }
            ],
            "userProperties": [],
            "typeProperties": {
              "pipeline": {
                "referenceName": "MonitorCsvStream",
                "type": "PipelineReference"
              },
              "waitOnCompletion": true,
              "parameters": {
                "Directory": {
                  "value": "@concat('data/Ingestion/Output/Rating20180331/',formatDateTime(pipeline().parameters.RunTime, 'yyyy/MM/dd'))",
                  "type": "Expression"
                },
                "File": {
                  "value": "@concat('Rpcci_',formatDateTime(pipeline().parameters.RunTime, 'yyyy_MM_dd_HH'), '.csv')",
                  "type": "Expression"
                }
              }
            }
          },
          {
            "name": "Execute RPCC Stream Validation In case of Failure",
            "type": "ExecutePipeline",
            "dependsOn": [
              {
                "activity": "Check RPCC Metadata",
                "dependencyConditions": [
                  "Failed"
                ]
              }
            ],
            "userProperties": [],
            "typeProperties": {
              "pipeline": {
                "referenceName": "MonitorCsvStream",
                "type": "PipelineReference"
              },
              "waitOnCompletion": true,
              "parameters": {
                "Directory": {
                  "value": "@concat('data/Ingestion/Output/Rating20180331/',formatDateTime(pipeline().parameters.RunTime, 'yyyy/MM/dd'))",
                  "type": "Expression"
                },
                "File": {
                  "value": "@concat('Rpcc_',formatDateTime(pipeline().parameters.RunTime, 'yyyy_MM_dd_HH'), '.csv')",
                  "type": "Expression"
                }
              }
            }
          },
          {
            "name": "Log Check RPCC Metadata Failure",
            "description": "Log Check RPCC Metadata Failure",
            "type": "AzureFunctionActivity",
            "dependsOn": [
              {
                "activity": "Check RPCC Metadata",
                "dependencyConditions": [
                  "Failed"
                ]
              }
            ],
            "policy": {
              "timeout": "0.00:10:00",
              "retry": 3,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "functionName": "LogAdfPipelineStatus",
              "method": "POST",
              "headers": {},
              "body": {
                "Activity": "Check RPCC Metadata",
                "Status": "Failed",
                "DataFactoryName": "@{pipeline().DataFactory}",
                "PipelineName": "@{pipeline().Pipeline}",
                "TriggeredBy": "@{pipeline().TriggerName}",
                "TriggerTime": "@{pipeline().TriggerTime}",
                "PipelineRunId": "@{pipeline().RunId}"
              }
            },
            "linkedServiceName": {
              "referenceName": "AZlogAdfPipelineFuncLS",
              "type": "LinkedServiceReference"
            }
          },
          {
            "name": "Log Check RPCCI Metadata Failure",
            "description": "Log Check RPCCI Metadata Failure",
            "type": "AzureFunctionActivity",
            "dependsOn": [
              {
                "activity": "Check RPCCI Metadata",
                "dependencyConditions": [
                  "Failed"
                ]
              }
            ],
            "policy": {
              "timeout": "0.00:10:00",
              "retry": 3,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "functionName": "LogAdfPipelineStatus",
              "method": "POST",
              "headers": {},
              "body": {
                "Activity": "Check RPCCI Metadata",
                "Status": "Failed",
                "DataFactoryName": "@{pipeline().DataFactory}",
                "PipelineName": "@{pipeline().Pipeline}",
                "TriggeredBy": "@{pipeline().TriggerName}",
                "TriggerTime": "@{pipeline().TriggerTime}",
                "PipelineRunId": "@{pipeline().RunId}"
              }
            },
            "linkedServiceName": {
              "referenceName": "AZlogAdfPipelineFuncLS",
              "type": "LinkedServiceReference"
            }
          }
        ],
        "parameters": {
          "RunTime": {
            "type": "string",
            "defaultValue": "2020-07-21T10:00:00"
          }
        },
        "variables": {
          "rpccExists": {
            "type": "Boolean"
          },
          "rpcciExists": {
            "type": "Boolean"
          },
          "ScriptRootPath": {
            "type": "String",
            "defaultValue": "resources/Scripts"
          },
          "OutputRootPath": {
            "type": "String"
          },
          "BinariesPath": {
            "type": "String"
          },
          "IngestionPath": {
            "type": "String"
          },
          "RunAccountingDate": {
            "type": "String"
          }
        },
        "folder": {
          "name": "Transform"
        },
        "annotations": []
      },
      "dependsOn": [
        "[concat(variables('factoryId'), '/datasets/TsvGen1DataSet')]",
        "[concat(variables('factoryId'), '/pipelines/MonitorCsvStream')]",
        "[concat(variables('factoryId'), '/linkedServices/AZlogAdfPipelineFuncLS')]",
        "[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorageGen2')]",
        "[concat(variables('factoryId'), '/linkedServices/AzureDataLakeAnalytics')]"
      ]
    },
    {
      "name": "[concat(parameters('factoryName'), '/Transformation')]",
      "type": "Microsoft.DataFactory/factories/pipelines",
      "apiVersion": "2018-06-01",
      "properties": {
        "description": "Raw data transformation to structured streams",
        "activities": [
          {
            "name": "Switch1",
            "type": "Switch",
            "dependsOn": [
              {
                "activity": "SetBinariesPath",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "userProperties": [],
            "typeProperties": {
              "on": {
                "value": "@pipeline().parameters.ActivityName",
                "type": "Expression"
              },
              "cases": [
                {
                  "value": "Ledger",
                  "activities": [
                    {
                      "name": "Ledger",
                      "description": "Raw To Structured Stream transformation of ledger data",
                      "type": "DataLakeAnalyticsScope",
                      "dependsOn": [
                        {
                          "activity": "SetIngestionPathForLedger",
                          "dependencyConditions": [
                            "Succeeded"
                          ]
                        }
                      ],
                      "policy": {
                        "timeout": "04:00:00",
                        "retry": 3,
                        "retryIntervalInSeconds": 30,
                        "secureOutput": false,
                        "secureInput": false
                      },
                      "userProperties": [],
                      "typeProperties": {
                        "scriptFolderPath": {
                          "value": "@variables('ScriptRootPath')",
                          "type": "Expression"
                        },
                        "scriptFileName": "IngestLedgerV1.script",
                        "runtimeVersion": {
                          "value": "@pipeline().globalParameters.ScopeRunTime",
                          "type": "Expression"
                        },
                        "scriptLinkedService": {
                          "referenceName": "AzureDataLakeStorageGen2",
                          "type": "LinkedServiceReference"
                        },
                        "parameters": {
                          "INGESTIONPATH": {
                            "value": "@variables('IngestionPath')",
                            "type": "Expression"
                          },
                          "JOBOUTPUTPATH": {
                            "value": "@variables('OutputRootPath')",
                            "type": "Expression"
                          },
                          "COMMONTRIGGERFOLDERPATH": {
                            "value": "@variables('TriggerPath')",
                            "type": "Expression"
                          },
                          "RUNACCOUNTINGDATE": {
                            "value": "@concat('\"', variables('RunAccountingDate'), '\"')",
                            "type": "Expression"
                          },
                          "RESOURCEPATH": {
                            "value": "@variables('BinariesPath')",
                            "type": "Expression"
                          }
                        },
                        "nebulaArguments": "-OptimizerTimeoutMsec -1"
                      },
                      "linkedServiceName": {
                        "referenceName": "AzureDataLakeAnalytics",
                        "type": "LinkedServiceReference"
                      }
                    },
                    {
                      "name": "SetIngestionPathForLedger",
                      "description": "Set ingestion root path for ledger",
                      "type": "SetVariable",
                      "dependsOn": [],
                      "userProperties": [],
                      "typeProperties": {
                        "variableName": "IngestionPath",
                        "value": {
                          "value": "@concat('\"', pipeline().globalParameters.ADLGen2StorageProtocolPrefix, 'ledger@', \npipeline().globalParameters.ADLGen2StorageAccountName, pipeline().globalParameters.ADLGen2StoragePathSuffix, '\"')",
                          "type": "Expression"
                        }
                      }
                    },
                    {
                      "name": "SetLedgerSuccess",
                      "description": "Set Job status to success",
                      "type": "SetVariable",
                      "dependsOn": [
                        {
                          "activity": "Ledger",
                          "dependencyConditions": [
                            "Succeeded"
                          ]
                        }
                      ],
                      "userProperties": [],
                      "typeProperties": {
                        "variableName": "JobStatus",
                        "value": "Success"
                      }
                    },
                    {
                      "name": "SetLedgerFailed",
                      "description": "Set Job status to Failed",
                      "type": "SetVariable",
                      "dependsOn": [
                        {
                          "activity": "Ledger",
                          "dependencyConditions": [
                            "Failed"
                          ]
                        }
                      ],
                      "userProperties": [],
                      "typeProperties": {
                        "variableName": "JobStatus",
                        "value": "Failed"
                      }
                    }
                  ]
                },
                {
                  "value": "ChargeAggregator",
                  "activities": [
                    {
                      "name": "TransformChargeAggregator",
                      "description": "Raw To Structured Stream transformation of charge aggregator data",
                      "type": "DataLakeAnalyticsScope",
                      "dependsOn": [
                        {
                          "activity": "SetIngestionPathForChargeAggregator",
                          "dependencyConditions": [
                            "Succeeded"
                          ]
                        }
                      ],
                      "policy": {
                        "timeout": "04:00:00",
                        "retry": 3,
                        "retryIntervalInSeconds": 30,
                        "secureOutput": false,
                        "secureInput": false
                      },
                      "userProperties": [],
                      "typeProperties": {
                        "scriptFolderPath": {
                          "value": "@variables('ScriptRootPath')",
                          "type": "Expression"
                        },
                        "scriptFileName": "IngestChargeAggregator20200331.script",
                        "runtimeVersion": {
                          "value": "@pipeline().globalParameters.ScopeRunTime",
                          "type": "Expression"
                        },
                        "scriptLinkedService": {
                          "referenceName": "AzureDataLakeStorageGen2",
                          "type": "LinkedServiceReference"
                        },
                        "parameters": {
                          "INGESTIONPATH": {
                            "value": "@variables('IngestionPath')",
                            "type": "Expression"
                          },
                          "JOBOUTPUTPATH": {
                            "value": "@variables('OutputRootPath')",
                            "type": "Expression"
                          },
                          "COMMONTRIGGERFOLDERPATH": {
                            "value": "@variables('TriggerPath')",
                            "type": "Expression"
                          },
                          "RUNACCOUNTINGDATE": {
                            "value": "@concat('\"', variables('RunAccountingDate'), '\"')",
                            "type": "Expression"
                          },
                          "RESOURCEPATH": {
                            "value": "@variables('BinariesPath')",
                            "type": "Expression"
                          }
                        }
                      },
                      "linkedServiceName": {
                        "referenceName": "AzureDataLakeAnalytics",
                        "type": "LinkedServiceReference"
                      }
                    },
                    {
                      "name": "SetIngestionPathForChargeAggregator",
                      "description": "Set ingestion root path for charge aggregator",
                      "type": "SetVariable",
                      "dependsOn": [],
                      "userProperties": [],
                      "typeProperties": {
                        "variableName": "IngestionPath",
                        "value": {
                          "value": "@concat('\"', pipeline().globalParameters.ADLGen2StorageProtocolPrefix, 'chargeaggregator@', \npipeline().globalParameters.ADLGen2StorageAccountName, pipeline().globalParameters.ADLGen2StoragePathSuffix, variables('TestFolder'), '\"')",
                          "type": "Expression"
                        }
                      }
                    },
                    {
                      "name": "SetCASuccess",
                      "description": "Set Job status to success",
                      "type": "SetVariable",
                      "dependsOn": [
                        {
                          "activity": "TransformChargeAggregator",
                          "dependencyConditions": [
                            "Succeeded"
                          ]
                        }
                      ],
                      "userProperties": [],
                      "typeProperties": {
                        "variableName": "JobStatus",
                        "value": "Success"
                      }
                    },
                    {
                      "name": "SetCAFailed",
                      "description": "Set Job status to Failed",
                      "type": "SetVariable",
                      "dependsOn": [
                        {
                          "activity": "TransformChargeAggregator",
                          "dependencyConditions": [
                            "Failed"
                          ]
                        }
                      ],
                      "userProperties": [],
                      "typeProperties": {
                        "variableName": "JobStatus",
                        "value": "Failed"
                      }
                    }
                  ]
                },
                {
                  "value": "Order",
                  "activities": [
                    {
                      "name": "Order",
                      "description": "Raw To Structured Stream transformation of Order data",
                      "type": "DataLakeAnalyticsScope",
                      "dependsOn": [
                        {
                          "activity": "SetIngestionPathForOrder",
                          "dependencyConditions": [
                            "Succeeded"
                          ]
                        }
                      ],
                      "policy": {
                        "timeout": "04:00:00",
                        "retry": 3,
                        "retryIntervalInSeconds": 30,
                        "secureOutput": false,
                        "secureInput": false
                      },
                      "userProperties": [],
                      "typeProperties": {
                        "scriptFolderPath": {
                          "value": "@variables('ScriptRootPath')",
                          "type": "Expression"
                        },
                        "scriptFileName": "IngestOrdersV1.script",
                        "runtimeVersion": {
                          "value": "@pipeline().globalParameters.ScopeRunTime",
                          "type": "Expression"
                        },
                        "scriptLinkedService": {
                          "referenceName": "AzureDataLakeStorageGen2",
                          "type": "LinkedServiceReference"
                        },
                        "parameters": {
                          "INGESTIONPATH": {
                            "value": "@variables('IngestionPath')",
                            "type": "Expression"
                          },
                          "JOBOUTPUTPATH": {
                            "value": "@variables('OutputRootPath')",
                            "type": "Expression"
                          },
                          "COMMONTRIGGERFOLDERPATH": {
                            "value": "@variables('TriggerPath')",
                            "type": "Expression"
                          },
                          "RUNACCOUNTINGDATE": {
                            "value": "@concat('\"', variables('RunAccountingDate'), '\"')",
                            "type": "Expression"
                          },
                          "RESOURCEPATH": {
                            "value": "@variables('BinariesPath')",
                            "type": "Expression"
                          }
                        }
                      },
                      "linkedServiceName": {
                        "referenceName": "AzureDataLakeAnalytics",
                        "type": "LinkedServiceReference"
                      }
                    },
                    {
                      "name": "SetIngestionPathForOrder",
                      "description": "Set ingestion root path for Order",
                      "type": "SetVariable",
                      "dependsOn": [],
                      "userProperties": [],
                      "typeProperties": {
                        "variableName": "IngestionPath",
                        "value": {
                          "value": "@concat('\"', pipeline().globalParameters.ADLGen2StorageProtocolPrefix, 'order@', \npipeline().globalParameters.ADLGen2StorageAccountName, pipeline().globalParameters.ADLGen2StoragePathSuffix, '\"')",
                          "type": "Expression"
                        }
                      }
                    },
                    {
                      "name": "SetOrderSuccess",
                      "description": "Set Job status to success",
                      "type": "SetVariable",
                      "dependsOn": [
                        {
                          "activity": "Order",
                          "dependencyConditions": [
                            "Succeeded"
                          ]
                        }
                      ],
                      "userProperties": [],
                      "typeProperties": {
                        "variableName": "JobStatus",
                        "value": "Success"
                      }
                    },
                    {
                      "name": "SetOrderFailed",
                      "description": "Set Job status to Failed",
                      "type": "SetVariable",
                      "dependsOn": [
                        {
                          "activity": "Order",
                          "dependencyConditions": [
                            "Failed"
                          ]
                        }
                      ],
                      "userProperties": [],
                      "typeProperties": {
                        "variableName": "JobStatus",
                        "value": "Failed"
                      }
                    }
                  ]
                },
                {
                  "value": "InvoiceDocumentDetail",
                  "activities": [
                    {
                      "name": "InvoiceDocumentDetail",
                      "description": "Raw To Structured Stream transformation of invoice document detail data",
                      "type": "DataLakeAnalyticsScope",
                      "dependsOn": [
                        {
                          "activity": "SetIngestionPathForInvoiceDocDetail",
                          "dependencyConditions": [
                            "Succeeded"
                          ]
                        }
                      ],
                      "policy": {
                        "timeout": "04:00:00",
                        "retry": 3,
                        "retryIntervalInSeconds": 30,
                        "secureOutput": false,
                        "secureInput": false
                      },
                      "userProperties": [],
                      "typeProperties": {
                        "scriptFolderPath": {
                          "value": "@variables('ScriptRootPath')",
                          "type": "Expression"
                        },
                        "scriptFileName": "IngestInvoiceDocDetails20200331.script",
                        "runtimeVersion": {
                          "value": "@pipeline().globalParameters.ScopeRunTime",
                          "type": "Expression"
                        },
                        "scriptLinkedService": {
                          "referenceName": "AzureDataLakeStorageGen2",
                          "type": "LinkedServiceReference"
                        },
                        "parameters": {
                          "INGESTIONPATH": {
                            "value": "@variables('IngestionPath')",
                            "type": "Expression"
                          },
                          "JOBOUTPUTPATH": {
                            "value": "@variables('OutputRootPath')",
                            "type": "Expression"
                          },
                          "COMMONTRIGGERFOLDERPATH": {
                            "value": "@variables('TriggerPath')",
                            "type": "Expression"
                          },
                          "RUNACCOUNTINGDATE": {
                            "value": "@concat('\"', variables('RunAccountingDate'), '\"')",
                            "type": "Expression"
                          },
                          "RESOURCEPATH": {
                            "value": "@variables('BinariesPath')",
                            "type": "Expression"
                          }
                        }
                      },
                      "linkedServiceName": {
                        "referenceName": "AzureDataLakeAnalytics",
                        "type": "LinkedServiceReference"
                      }
                    },
                    {
                      "name": "SetIngestionPathForInvoiceDocDetail",
                      "description": "Set ingestion root path for Invoice Doc Detail",
                      "type": "SetVariable",
                      "dependsOn": [],
                      "userProperties": [],
                      "typeProperties": {
                        "variableName": "IngestionPath",
                        "value": {
                          "value": "@concat('\"', pipeline().globalParameters.ADLGen2StorageProtocolPrefix, 'invoice-lineitemdetails@', \npipeline().globalParameters.ADLGen2StorageAccountName, pipeline().globalParameters.ADLGen2StoragePathSuffix, variables('TestFolder'), '\"')",
                          "type": "Expression"
                        }
                      }
                    },
                    {
                      "name": "SetinvoiceDocDetailSuccess",
                      "description": "Set Job status to success",
                      "type": "SetVariable",
                      "dependsOn": [
                        {
                          "activity": "InvoiceDocumentDetail",
                          "dependencyConditions": [
                            "Succeeded"
                          ]
                        }
                      ],
                      "userProperties": [],
                      "typeProperties": {
                        "variableName": "JobStatus",
                        "value": "Success"
                      }
                    },
                    {
                      "name": "SetInvoiceDocDetailFailed",
                      "description": "Set Job status to Failed",
                      "type": "SetVariable",
                      "dependsOn": [
                        {
                          "activity": "InvoiceDocumentDetail",
                          "dependencyConditions": [
                            "Failed"
                          ]
                        }
                      ],
                      "userProperties": [],
                      "typeProperties": {
                        "variableName": "JobStatus",
                        "value": "Failed"
                      }
                    }
                  ]
                },
                {
                  "value": "InvoiceDocumentSummary",
                  "activities": [
                    {
                      "name": "InvoiceDocSummary",
                      "description": "Raw To Structured Stream transformation of Invoice Document Summary data",
                      "type": "DataLakeAnalyticsScope",
                      "dependsOn": [
                        {
                          "activity": "SetIngestionPathForInvoiceDocSummary",
                          "dependencyConditions": [
                            "Succeeded"
                          ]
                        }
                      ],
                      "policy": {
                        "timeout": "04:00:00",
                        "retry": 3,
                        "retryIntervalInSeconds": 30,
                        "secureOutput": false,
                        "secureInput": false
                      },
                      "userProperties": [],
                      "typeProperties": {
                        "scriptFolderPath": {
                          "value": "@variables('ScriptRootPath')",
                          "type": "Expression"
                        },
                        "scriptFileName": "IngestInvoiceDocSummary20200331.script",
                        "runtimeVersion": {
                          "value": "@pipeline().globalParameters.ScopeRunTime",
                          "type": "Expression"
                        },
                        "scriptLinkedService": {
                          "referenceName": "AzureDataLakeStorageGen2",
                          "type": "LinkedServiceReference"
                        },
                        "parameters": {
                          "INGESTIONPATH": {
                            "value": "@variables('IngestionPath')",
                            "type": "Expression"
                          },
                          "JOBOUTPUTPATH": {
                            "value": "@variables('OutputRootPath')",
                            "type": "Expression"
                          },
                          "COMMONTRIGGERFOLDERPATH": {
                            "value": "@variables('TriggerPath')",
                            "type": "Expression"
                          },
                          "RUNACCOUNTINGDATE": {
                            "value": "@concat('\"', variables('RunAccountingDate'), '\"')",
                            "type": "Expression"
                          },
                          "RESOURCEPATH": {
                            "value": "@variables('BinariesPath')",
                            "type": "Expression"
                          }
                        }
                      },
                      "linkedServiceName": {
                        "referenceName": "AzureDataLakeAnalytics",
                        "type": "LinkedServiceReference"
                      }
                    },
                    {
                      "name": "SetIngestionPathForInvoiceDocSummary",
                      "description": "Set ingestion root path for Invoice Document Summary",
                      "type": "SetVariable",
                      "dependsOn": [],
                      "userProperties": [],
                      "typeProperties": {
                        "variableName": "IngestionPath",
                        "value": {
                          "value": "@concat('\"', pipeline().globalParameters.ADLGen2StorageProtocolPrefix, 'invoice-docsummary@', \npipeline().globalParameters.ADLGen2StorageAccountName, pipeline().globalParameters.ADLGen2StoragePathSuffix, variables('TestFolder'), '\"')",
                          "type": "Expression"
                        }
                      }
                    },
                    {
                      "name": "SetinvoiceDocSummarySuccess",
                      "description": "Set Job status to success",
                      "type": "SetVariable",
                      "dependsOn": [
                        {
                          "activity": "InvoiceDocSummary",
                          "dependencyConditions": [
                            "Succeeded"
                          ]
                        }
                      ],
                      "userProperties": [],
                      "typeProperties": {
                        "variableName": "JobStatus",
                        "value": "Success"
                      }
                    },
                    {
                      "name": "SetInvoiceDocSummaryFailed",
                      "description": "Set Job status to Failed",
                      "type": "SetVariable",
                      "dependsOn": [
                        {
                          "activity": "InvoiceDocSummary",
                          "dependencyConditions": [
                            "Failed"
                          ]
                        }
                      ],
                      "userProperties": [],
                      "typeProperties": {
                        "variableName": "JobStatus",
                        "value": "Failed"
                      }
                    }
                  ]
                },
                {
                  "value": "DeferralConsumable",
                  "activities": [
                    {
                      "name": "DeferralConsumable",
                      "description": "Raw To Structured Stream transformation of Deferral data",
                      "type": "DataLakeAnalyticsScope",
                      "dependsOn": [
                        {
                          "activity": "SetIngestionPathForDeferralConsumable",
                          "dependencyConditions": [
                            "Succeeded"
                          ]
                        }
                      ],
                      "policy": {
                        "timeout": "04:00:00",
                        "retry": 3,
                        "retryIntervalInSeconds": 30,
                        "secureOutput": false,
                        "secureInput": false
                      },
                      "userProperties": [],
                      "typeProperties": {
                        "scriptFolderPath": {
                          "value": "@variables('ScriptRootPath')",
                          "type": "Expression"
                        },
                        "scriptFileName": "IngestionConsumableDeferral20180531.script",
                        "runtimeVersion": {
                          "value": "@pipeline().globalParameters.ScopeRunTime",
                          "type": "Expression"
                        },
                        "scriptLinkedService": {
                          "referenceName": "AzureDataLakeStorageGen2",
                          "type": "LinkedServiceReference"
                        },
                        "parameters": {
                          "INGESTIONPATH": {
                            "value": "@variables('IngestionPath')",
                            "type": "Expression"
                          },
                          "JOBOUTPUTPATH": {
                            "value": "@variables('OutputRootPath')",
                            "type": "Expression"
                          },
                          "COMMONTRIGGERFOLDERPATH": {
                            "value": "@variables('TriggerPath')",
                            "type": "Expression"
                          },
                          "RUNACCOUNTINGDATE": {
                            "value": "@concat('\"', variables('RunAccountingDate'), '\"')",
                            "type": "Expression"
                          },
                          "RESOURCEPATH": {
                            "value": "@variables('BinariesPath')",
                            "type": "Expression"
                          }
                        }
                      },
                      "linkedServiceName": {
                        "referenceName": "AzureDataLakeAnalytics",
                        "type": "LinkedServiceReference"
                      }
                    },
                    {
                      "name": "SetIngestionPathForDeferralConsumable",
                      "description": "Set ingestion root path for Deferral",
                      "type": "SetVariable",
                      "dependsOn": [],
                      "userProperties": [],
                      "typeProperties": {
                        "variableName": "IngestionPath",
                        "value": {
                          "value": "@concat('\"', pipeline().globalParameters.ADLGen2StorageProtocolPrefix, 'deferral@', \npipeline().globalParameters.ADLGen2StorageAccountName, pipeline().globalParameters.ADLGen2StoragePathSuffix, '\"')",
                          "type": "Expression"
                        }
                      }
                    },
                    {
                      "name": "SetDeferralConsumableSuccess",
                      "description": "Set Job status to success",
                      "type": "SetVariable",
                      "dependsOn": [
                        {
                          "activity": "DeferralConsumable",
                          "dependencyConditions": [
                            "Succeeded"
                          ]
                        }
                      ],
                      "userProperties": [],
                      "typeProperties": {
                        "variableName": "JobStatus",
                        "value": "Success"
                      }
                    },
                    {
                      "name": "SetDeferralConsumableFailed",
                      "description": "Set Job status to Failed",
                      "type": "SetVariable",
                      "dependsOn": [
                        {
                          "activity": "DeferralConsumable",
                          "dependencyConditions": [
                            "Failed"
                          ]
                        }
                      ],
                      "userProperties": [],
                      "typeProperties": {
                        "variableName": "JobStatus",
                        "value": "Failed"
                      }
                    }
                  ]
                },
                {
                  "value": "OrderSeatCount",
                  "activities": [
                    {
                      "name": "OrderSeatCount",
                      "description": "Raw To Structured Stream transformation of order data",
                      "type": "DataLakeAnalyticsScope",
                      "dependsOn": [
                        {
                          "activity": "SetIngestionPathForOrderSeatCount",
                          "dependencyConditions": [
                            "Succeeded"
                          ]
                        }
                      ],
                      "policy": {
                        "timeout": "04:00:00",
                        "retry": 3,
                        "retryIntervalInSeconds": 30,
                        "secureOutput": false,
                        "secureInput": false
                      },
                      "userProperties": [],
                      "typeProperties": {
                        "scriptFolderPath": {
                          "value": "@variables('ScriptRootPath')",
                          "type": "Expression"
                        },
                        "scriptFileName": "IngestOrdersSeatCountV1.script",
                        "runtimeVersion": {
                          "value": "@pipeline().globalParameters.ScopeRunTime",
                          "type": "Expression"
                        },
                        "scriptLinkedService": {
                          "referenceName": "AzureDataLakeStorageGen2",
                          "type": "LinkedServiceReference"
                        },
                        "parameters": {
                          "INGESTIONPATH": {
                            "value": "@variables('IngestionPath')",
                            "type": "Expression"
                          },
                          "JOBOUTPUTPATH": {
                            "value": "@variables('OutputRootPath')",
                            "type": "Expression"
                          },
                          "COMMONTRIGGERFOLDERPATH": {
                            "value": "@variables('TriggerPath')",
                            "type": "Expression"
                          },
                          "RUNACCOUNTINGDATE": {
                            "value": "@concat('\"', variables('RunAccountingDate'), '\"')",
                            "type": "Expression"
                          },
                          "RESOURCEPATH": {
                            "value": "@variables('BinariesPath')",
                            "type": "Expression"
                          }
                        },
                        "nebulaArguments": "-OptimizerTimeoutMsec -1"
                      },
                      "linkedServiceName": {
                        "referenceName": "AzureDataLakeAnalytics",
                        "type": "LinkedServiceReference"
                      }
                    },
                    {
                      "name": "SetIngestionPathForOrderSeatCount",
                      "description": "Set ingestion root path for Order Seat Count",
                      "type": "SetVariable",
                      "dependsOn": [],
                      "userProperties": [],
                      "typeProperties": {
                        "variableName": "IngestionPath",
                        "value": {
                          "value": "@concat('\"', pipeline().globalParameters.ADLGen2StorageProtocolPrefix, 'order@', \npipeline().globalParameters.ADLGen2StorageAccountName, pipeline().globalParameters.ADLGen2StoragePathSuffix, '\"')",
                          "type": "Expression"
                        }
                      }
                    },
                    {
                      "name": "SetOrderSeatCountSuccess",
                      "description": "Set Job status to success",
                      "type": "SetVariable",
                      "dependsOn": [
                        {
                          "activity": "OrderSeatCount",
                          "dependencyConditions": [
                            "Succeeded"
                          ]
                        }
                      ],
                      "userProperties": [],
                      "typeProperties": {
                        "variableName": "JobStatus",
                        "value": "Success"
                      }
                    },
                    {
                      "name": "SetOrderSeatCountFailed",
                      "description": "Set Job status to Failed",
                      "type": "SetVariable",
                      "dependsOn": [
                        {
                          "activity": "OrderSeatCount",
                          "dependencyConditions": [
                            "Failed"
                          ]
                        }
                      ],
                      "userProperties": [],
                      "typeProperties": {
                        "variableName": "JobStatus",
                        "value": "Failed"
                      }
                    }
                  ]
                },
                {
                  "value": "DeferralSpendable",
                  "activities": [
                    {
                      "name": "SetIngestionPathForDeferralSpendable",
                      "description": "Set ingestion root path for Deferral",
                      "type": "SetVariable",
                      "dependsOn": [],
                      "userProperties": [],
                      "typeProperties": {
                        "variableName": "IngestionPath",
                        "value": {
                          "value": "@concat('\"', pipeline().globalParameters.ADLGen2StorageProtocolPrefix, 'deferral@', \npipeline().globalParameters.ADLGen2StorageAccountName, pipeline().globalParameters.ADLGen2StoragePathSuffix, '\"')",
                          "type": "Expression"
                        }
                      }
                    },
                    {
                      "name": "DeferralSpendable",
                      "description": "Raw To Structured Stream transformation of Deferral Spendable data",
                      "type": "DataLakeAnalyticsScope",
                      "dependsOn": [
                        {
                          "activity": "SetIngestionPathForDeferralSpendable",
                          "dependencyConditions": [
                            "Succeeded"
                          ]
                        }
                      ],
                      "policy": {
                        "timeout": "04:00:00",
                        "retry": 3,
                        "retryIntervalInSeconds": 30,
                        "secureOutput": false,
                        "secureInput": false
                      },
                      "userProperties": [],
                      "typeProperties": {
                        "scriptFolderPath": {
                          "value": "@variables('ScriptRootPath')",
                          "type": "Expression"
                        },
                        "scriptFileName": "IngestionSpendableDeferral20180531.script",
                        "runtimeVersion": {
                          "value": "@pipeline().globalParameters.ScopeRunTime",
                          "type": "Expression"
                        },
                        "scriptLinkedService": {
                          "referenceName": "AzureDataLakeStorageGen2",
                          "type": "LinkedServiceReference"
                        },
                        "parameters": {
                          "INGESTIONPATH": {
                            "value": "@variables('IngestionPath')",
                            "type": "Expression"
                          },
                          "JOBOUTPUTPATH": {
                            "value": "@variables('OutputRootPath')",
                            "type": "Expression"
                          },
                          "COMMONTRIGGERFOLDERPATH": {
                            "value": "@variables('TriggerPath')",
                            "type": "Expression"
                          },
                          "RUNACCOUNTINGDATE": {
                            "value": "@concat('\"', variables('RunAccountingDate'), '\"')",
                            "type": "Expression"
                          },
                          "RESOURCEPATH": {
                            "value": "@variables('BinariesPath')",
                            "type": "Expression"
                          }
                        }
                      },
                      "linkedServiceName": {
                        "referenceName": "AzureDataLakeAnalytics",
                        "type": "LinkedServiceReference"
                      }
                    },
                    {
                      "name": "SetDeferralSpendableSuccess",
                      "description": "Set Job status to success",
                      "type": "SetVariable",
                      "dependsOn": [
                        {
                          "activity": "DeferralSpendable",
                          "dependencyConditions": [
                            "Succeeded"
                          ]
                        }
                      ],
                      "userProperties": [],
                      "typeProperties": {
                        "variableName": "JobStatus",
                        "value": "Success"
                      }
                    },
                    {
                      "name": "SetDeferralSpendableFailed",
                      "description": "Set Job status to Failed",
                      "type": "SetVariable",
                      "dependsOn": [
                        {
                          "activity": "DeferralSpendable",
                          "dependencyConditions": [
                            "Succeeded"
                          ]
                        }
                      ],
                      "userProperties": [],
                      "typeProperties": {
                        "variableName": "JobStatus",
                        "value": "Failed"
                      }
                    }
                  ]
                }
              ]
            }
          },
          {
            "name": "SetRunAccountingDate",
            "description": "As a result of manual\\scheduled execution set RunAccountingDate to Window Start Time",
            "type": "SetVariable",
            "dependsOn": [],
            "userProperties": [],
            "typeProperties": {
              "variableName": "RunAccountingDate",
              "value": {
                "value": "@formatDateTime(pipeline().parameters.WindowStartTime,'MM/dd/yyyy HH:mm:ss')",
                "type": "Expression"
              }
            }
          },
          {
            "name": "SetOutputRootPath",
            "description": "Set full path for output",
            "type": "SetVariable",
            "dependsOn": [
              {
                "activity": "SetRunAccountingDate",
                "dependencyConditions": [
                  "Succeeded"
                ]
              },
              {
                "activity": "Set Test Folder If Running In Test Mode",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "userProperties": [],
            "typeProperties": {
              "variableName": "OutputRootPath",
              "value": {
                "value": "@concat('\"', pipeline().globalParameters.ADLGen2StorageProtocolPrefix, 'transformation@', \npipeline().globalParameters.ADLGen2StorageAccountName, pipeline().globalParameters.ADLGen2StoragePathSuffix,'/data/Ingestion',variables('TestFolder'),'\"')",
                "type": "Expression"
              }
            }
          },
          {
            "name": "SetTriggerRootPath",
            "description": "Set root path for trigger",
            "type": "SetVariable",
            "dependsOn": [
              {
                "activity": "SetOutputRootPath",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "userProperties": [],
            "typeProperties": {
              "variableName": "TriggerPath",
              "value": {
                "value": "@concat('\"', pipeline().globalParameters.ADLGen2StorageProtocolPrefix, 'transformation@', \npipeline().globalParameters.ADLGen2StorageAccountName, pipeline().globalParameters.ADLGen2StoragePathSuffix, '/data/Ingestion/Trigger\"')",
                "type": "Expression"
              }
            }
          },
          {
            "name": "SetBinariesPath",
            "description": "Set path for binary reosurces",
            "type": "SetVariable",
            "dependsOn": [
              {
                "activity": "SetTriggerRootPath",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "userProperties": [],
            "typeProperties": {
              "variableName": "BinariesPath",
              "value": {
                "value": "@concat('\"', pipeline().globalParameters.ADLGen2StorageProtocolPrefix, 'resources@', \npipeline().globalParameters.ADLGen2StorageAccountName, pipeline().globalParameters.ADLGen2StoragePathSuffix, '/Binaries/\"')",
                "type": "Expression"
              }
            }
          },
          {
            "name": "LogTransformJobStatus",
            "description": "Log message for transform  job",
            "type": "AzureFunctionActivity",
            "dependsOn": [
              {
                "activity": "Switch1",
                "dependencyConditions": [
                  "Completed"
                ]
              }
            ],
            "policy": {
              "timeout": "0.00:10:00",
              "retry": 3,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "functionName": "LogAdfPipelineStatus",
              "method": "POST",
              "headers": {},
              "body": {
                "Activity": "Transform@{pipeline().parameters.ActivityName}",
                "Status": "@{variables('JobStatus')}",
                "DataFactoryName": "@{pipeline().DataFactory}",
                "PipelineName": "@{pipeline().Pipeline}",
                "TriggeredBy": "@{pipeline().TriggerName}",
                "TriggerTime": "@{pipeline().TriggerTime}",
                "RunAccountingDate": "@{variables('RunAccountingDate')}"
              }
            },
            "linkedServiceName": {
              "referenceName": "AZlogAdfPipelineFuncLS",
              "type": "LinkedServiceReference"
            }
          },
          {
            "name": "Set Test Folder If Running In Test Mode",
            "type": "IfCondition",
            "dependsOn": [],
            "userProperties": [],
            "typeProperties": {
              "expression": {
                "value": "@pipeline().parameters.RunInTestMode",
                "type": "Expression"
              },
              "ifTrueActivities": [
                {
                  "name": "Set Test Folder",
                  "description": "",
                  "type": "SetVariable",
                  "dependsOn": [],
                  "userProperties": [],
                  "typeProperties": {
                    "variableName": "TestFolder",
                    "value": {
                      "value": "/test",
                      "type": "Expression"
                    }
                  }
                }
              ]
            }
          }
        ],
        "parameters": {
          "ActivityName": {
            "type": "string"
          },
          "WindowStartTime": {
            "type": "string",
            "defaultValue": "2020-11-02T04:00:00Z"
          },
          "WindowEndTime": {
            "type": "string"
          },
          "RunInTestMode": {
            "type": "bool",
            "defaultValue": false
          }
        },
        "variables": {
          "RunAccountingDate": {
            "type": "String"
          },
          "OutputRootPath": {
            "type": "String"
          },
          "TriggerPath": {
            "type": "String"
          },
          "ScriptRootPath": {
            "type": "String",
            "defaultValue": "resources/Scripts"
          },
          "BinariesPath": {
            "type": "String",
            "defaultValue": "resources"
          },
          "IngestionPath": {
            "type": "String"
          },
          "JobStatus": {
            "type": "String"
          },
          "TestFolder": {
            "type": "String"
          }
        },
        "folder": {
          "name": "Transform"
        },
        "annotations": []
      },
      "dependsOn": [
        "[concat(variables('factoryId'), '/linkedServices/AZlogAdfPipelineFuncLS')]",
        "[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorageGen2')]",
        "[concat(variables('factoryId'), '/linkedServices/AzureDataLakeAnalytics')]"
      ]
    },
    {
      "name": "[concat(parameters('factoryName'), '/Validate-Environment')]",
      "type": "Microsoft.DataFactory/factories/pipelines",
      "apiVersion": "2018-06-01",
      "properties": {
        "description": "This ADF will run a hello world scope task and call Azure function to make sure the environment is in good health",
        "activities": [
          {
            "name": "RunScopeActivity",
            "description": "Run Scope Activity",
            "type": "DataLakeAnalyticsScope",
            "dependsOn": [],
            "policy": {
              "timeout": "0.02:00:00",
              "retry": 1,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "scriptFolderPath": {
                "value": "@variables('ScriptRootPath')",
                "type": "Expression"
              },
              "scriptFileName": {
                "value": "@concat('Validate',pipeline().parameters.Environment, '.script')",
                "type": "Expression"
              },
              "runtimeVersion": {
                "value": "@pipeline().globalParameters.ScopeRunTime",
                "type": "Expression"
              },
              "scriptLinkedService": {
                "referenceName": "AzureDataLakeStorageGen2",
                "type": "LinkedServiceReference"
              }
            },
            "linkedServiceName": {
              "referenceName": "AzureDataLakeAnalytics",
              "type": "LinkedServiceReference"
            }
          },
          {
            "name": "Log validate environment success",
            "description": "Log validate environment success",
            "type": "AzureFunctionActivity",
            "dependsOn": [
              {
                "activity": "RunScopeActivity",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "policy": {
              "timeout": "0.00:10:00",
              "retry": 3,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "functionName": "LogAdfPipelineStatus",
              "method": "POST",
              "headers": {},
              "body": {
                "Activity": "Run Scope for validating environment",
                "Status": "Success",
                "DataFactoryName": "@{pipeline().DataFactory}",
                "PipelineName": "@{pipeline().Pipeline}",
                "TriggeredBy": "@{pipeline().TriggerName}",
                "TriggerTime": "@{pipeline().TriggerTime}",
                "PipelineRunId": "@{pipeline().RunId}"
              }
            },
            "linkedServiceName": {
              "referenceName": "AZlogAdfPipelineFuncLS",
              "type": "LinkedServiceReference"
            }
          },
          {
            "name": "Log validate environment failure",
            "description": "Log validate environment failure",
            "type": "AzureFunctionActivity",
            "dependsOn": [
              {
                "activity": "RunScopeActivity",
                "dependencyConditions": [
                  "Failed"
                ]
              }
            ],
            "policy": {
              "timeout": "0.00:10:00",
              "retry": 3,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "functionName": "LogAdfPipelineStatus",
              "method": "POST",
              "headers": {},
              "body": {
                "Activity": "Run Scope for validating environment",
                "Status": "Failed",
                "DataFactoryName": "@{pipeline().DataFactory}",
                "PipelineName": "@{pipeline().Pipeline}",
                "TriggeredBy": "@{pipeline().TriggerName}",
                "TriggerTime": "@{pipeline().TriggerTime}",
                "PipelineRunId": "@{pipeline().RunId}",
                "Error": "@{activity('RunScopeactivity').error}"
              }
            },
            "linkedServiceName": {
              "referenceName": "AZlogAdfPipelineFuncLS",
              "type": "LinkedServiceReference"
            }
          }
        ],
        "parameters": {
          "Environment": {
            "type": "string",
            "defaultValue": "UsSec"
          }
        },
        "variables": {
          "ScriptRootPath": {
            "type": "String",
            "defaultValue": "test/scripts"
          }
        },
        "folder": {
          "name": "ValidationInProduction"
        },
        "annotations": []
      },
      "dependsOn": [
        "[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorageGen2')]",
        "[concat(variables('factoryId'), '/linkedServices/AzureDataLakeAnalytics')]",
        "[concat(variables('factoryId'), '/linkedServices/AZlogAdfPipelineFuncLS')]"
      ]
    },
    {
      "name": "[concat(parameters('factoryName'), '/CARawDataSet')]",
      "type": "Microsoft.DataFactory/factories/datasets",
      "apiVersion": "2018-06-01",
      "properties": {
        "linkedServiceName": {
          "referenceName": "CARawDataSourceLinkService",
          "type": "LinkedServiceReference"
        },
        "parameters": {
          "container": {
            "type": "string"
          }
        },
        "annotations": [],
        "type": "Binary",
        "typeProperties": {
          "location": {
            "type": "AzureBlobStorageLocation",
            "container": {
              "value": "@dataset().container",
              "type": "Expression"
            }
          }
        }
      },
      "dependsOn": [
        "[concat(variables('factoryId'), '/linkedServices/CARawDataSourceLinkService')]"
      ]
    },
    {
      "name": "[concat(parameters('factoryName'), '/ControlAnalysisOutputDataset')]",
      "type": "Microsoft.DataFactory/factories/datasets",
      "apiVersion": "2018-06-01",
      "properties": {
        "description": "Data set for Control Analysis File",
        "linkedServiceName": {
          "referenceName": "AzureDataLakeStorageGen2",
          "type": "LinkedServiceReference"
        },
        "parameters": {
          "Container": {
            "type": "string"
          },
          "Path": {
            "type": "string"
          },
          "Filename": {
            "type": "string"
          }
        },
        "annotations": [],
        "type": "DelimitedText",
        "typeProperties": {
          "location": {
            "type": "AzureBlobFSLocation",
            "fileName": {
              "value": "@dataset().Filename",
              "type": "Expression"
            },
            "folderPath": {
              "value": "@dataset().Path",
              "type": "Expression"
            },
            "fileSystem": {
              "value": "@dataset().Container",
              "type": "Expression"
            }
          },
          "columnDelimiter": ",",
          "escapeChar": "\\",
          "firstRowAsHeader": false,
          "quoteChar": "\""
        },
        "schema": []
      },
      "dependsOn": [
        "[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorageGen2')]"
      ]
    },
    {
      "name": "[concat(parameters('factoryName'), '/ControlLatencyFile')]",
      "type": "Microsoft.DataFactory/factories/datasets",
      "apiVersion": "2018-06-01",
      "properties": {
        "description": "File generated by control which contains latency information of data.",
        "linkedServiceName": {
          "referenceName": "AzureDataLakeStorageGen2",
          "type": "LinkedServiceReference"
        },
        "annotations": [],
        "type": "DelimitedText",
        "typeProperties": {
          "location": {
            "type": "AzureBlobFSLocation",
            "fileSystem": "control"
          },
          "columnDelimiter": ",",
          "escapeChar": "\\",
          "quoteChar": "\""
        },
        "schema": [
          {
            "type": "String"
          },
          {
            "type": "String"
          },
          {
            "type": "String"
          },
          {
            "type": "String"
          },
          {
            "type": "String"
          },
          {
            "type": "String"
          },
          {
            "type": "String"
          },
          {
            "type": "String"
          },
          {
            "type": "String"
          },
          {
            "type": "String"
          },
          {
            "type": "String"
          },
          {
            "type": "String"
          },
          {
            "type": "String"
          },
          {
            "type": "String"
          },
          {
            "type": "String"
          }
        ]
      },
      "dependsOn": [
        "[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorageGen2')]"
      ]
    },
    {
      "name": "[concat(parameters('factoryName'), '/CrusherBilledDataSet')]",
      "type": "Microsoft.DataFactory/factories/datasets",
      "apiVersion": "2018-06-01",
      "properties": {
        "linkedServiceName": {
          "referenceName": "CrusherDataSourceLinkedService",
          "type": "LinkedServiceReference"
        },
        "parameters": {
          "container": {
            "type": "string"
          }
        },
        "annotations": [],
        "type": "Binary",
        "typeProperties": {
          "location": {
            "type": "AzureBlobStorageLocation",
            "container": {
              "value": "@dataset().container",
              "type": "Expression"
            }
          }
        }
      },
      "dependsOn": [
        "[concat(variables('factoryId'), '/linkedServices/CrusherDataSourceLinkedService')]"
      ]
    },
    {
      "name": "[concat(parameters('factoryName'), '/CrusherInvoiceDataSet')]",
      "type": "Microsoft.DataFactory/factories/datasets",
      "apiVersion": "2018-06-01",
      "properties": {
        "linkedServiceName": {
          "referenceName": "CrusherDataSourceLinkedService",
          "type": "LinkedServiceReference"
        },
        "parameters": {
          "container": {
            "type": "string"
          }
        },
        "annotations": [],
        "type": "Binary",
        "typeProperties": {
          "location": {
            "type": "AzureBlobStorageLocation",
            "container": {
              "value": "@dataset().container",
              "type": "Expression"
            }
          }
        }
      },
      "dependsOn": [
        "[concat(variables('factoryId'), '/linkedServices/CrusherDataSourceLinkedService')]"
      ]
    },
    {
      "name": "[concat(parameters('factoryName'), '/CrusherUnBilledDataSet')]",
      "type": "Microsoft.DataFactory/factories/datasets",
      "apiVersion": "2018-06-01",
      "properties": {
        "linkedServiceName": {
          "referenceName": "CrusherDataSourceLinkedService",
          "type": "LinkedServiceReference"
        },
        "parameters": {
          "container": {
            "type": "string"
          }
        },
        "annotations": [],
        "type": "Binary",
        "typeProperties": {
          "location": {
            "type": "AzureBlobStorageLocation",
            "container": {
              "value": "@dataset().container",
              "type": "Expression"
            }
          }
        }
      },
      "dependsOn": [
        "[concat(variables('factoryId'), '/linkedServices/CrusherDataSourceLinkedService')]"
      ]
    },
    {
      "name": "[concat(parameters('factoryName'), '/CsvDataSet')]",
      "type": "Microsoft.DataFactory/factories/datasets",
      "apiVersion": "2018-06-01",
      "properties": {
        "linkedServiceName": {
          "referenceName": "AzureDataLakeStorageGen2",
          "type": "LinkedServiceReference"
        },
        "parameters": {
          "Container": {
            "type": "string"
          },
          "Directory": {
            "type": "string"
          },
          "File": {
            "type": "string"
          }
        },
        "annotations": [],
        "type": "DelimitedText",
        "typeProperties": {
          "location": {
            "type": "AzureBlobFSLocation",
            "fileName": {
              "value": "@dataset().File",
              "type": "Expression"
            },
            "folderPath": {
              "value": "@dataset().Directory",
              "type": "Expression"
            },
            "fileSystem": {
              "value": "@dataset().Container",
              "type": "Expression"
            }
          },
          "columnDelimiter": ",",
          "escapeChar": "\\",
          "quoteChar": "\""
        },
        "schema": []
      },
      "dependsOn": [
        "[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorageGen2')]"
      ]
    },
    {
      "name": "[concat(parameters('factoryName'), '/InvoiceDocumentSummaryRawDataSet')]",
      "type": "Microsoft.DataFactory/factories/datasets",
      "apiVersion": "2018-06-01",
      "properties": {
        "linkedServiceName": {
          "referenceName": "InvoiceSummaryRawDataLinkService",
          "type": "LinkedServiceReference"
        },
        "parameters": {
          "container": {
            "type": "string"
          }
        },
        "annotations": [],
        "type": "Binary",
        "typeProperties": {
          "location": {
            "type": "AzureBlobStorageLocation",
            "container": {
              "value": "@dataset().container",
              "type": "Expression"
            }
          }
        }
      },
      "dependsOn": [
        "[concat(variables('factoryId'), '/linkedServices/InvoiceSummaryRawDataLinkService')]"
      ]
    },
    {
      "name": "[concat(parameters('factoryName'), '/InvoiceLineItemDetailsRawDataSet')]",
      "type": "Microsoft.DataFactory/factories/datasets",
      "apiVersion": "2018-06-01",
      "properties": {
        "linkedServiceName": {
          "referenceName": "InvoiceLineItemDetailsRawDataLinkService",
          "type": "LinkedServiceReference"
        },
        "parameters": {
          "container": {
            "type": "string",
            "defaultValue": "documentlineitemsint"
          }
        },
        "annotations": [],
        "type": "Binary",
        "typeProperties": {
          "location": {
            "type": "AzureBlobStorageLocation",
            "container": {
              "value": "@dataset().container",
              "type": "Expression"
            }
          }
        }
      },
      "dependsOn": [
        "[concat(variables('factoryId'), '/linkedServices/InvoiceLineItemDetailsRawDataLinkService')]"
      ]
    },
    {
      "name": "[concat(parameters('factoryName'), '/JsonDataSet')]",
      "type": "Microsoft.DataFactory/factories/datasets",
      "apiVersion": "2018-06-01",
      "properties": {
        "linkedServiceName": {
          "referenceName": "AzureDataLakeStorageGen2",
          "type": "LinkedServiceReference"
        },
        "parameters": {
          "Container": {
            "type": "string"
          },
          "Directory": {
            "type": "string"
          },
          "File": {
            "type": "string"
          }
        },
        "annotations": [],
        "type": "Json",
        "typeProperties": {
          "location": {
            "type": "AzureBlobFSLocation",
            "fileName": {
              "value": "@dataset().File",
              "type": "Expression"
            },
            "folderPath": {
              "value": "@dataset().Directory",
              "type": "Expression"
            },
            "fileSystem": {
              "value": "@dataset().Container",
              "type": "Expression"
            }
          }
        },
        "schema": {
          "type": "object",
          "properties": {
            "documentSummary": {
              "type": "object",
              "properties": {
                "documentId": {
                  "type": "string"
                },
                "documentType": {
                  "type": "string"
                },
                "customerId": {
                  "type": "string"
                },
                "billingGroupId": {
                  "type": "string"
                },
                "accountId": {
                  "type": "string"
                },
                "profileId": {
                  "type": "string"
                },
                "customerName": {
                  "type": "string"
                },
                "companyName": {
                  "type": "string"
                },
                "countryCode": {
                  "type": "string"
                },
                "currencyCode": {
                  "type": "string"
                },
                "billingPeriodStartDate": {
                  "type": "string"
                },
                "billingPeriodEndDate": {
                  "type": "string"
                },
                "documentCreatedDatetime": {
                  "type": "string"
                },
                "purchaseOrderNumber": {
                  "type": "string"
                },
                "state": {
                  "type": "string"
                },
                "amount": {
                  "type": "number"
                },
                "paidAmount": {
                  "type": "number"
                },
                "paymentStatus": {
                  "type": "string"
                },
                "paymentDueDate": {
                  "type": "string"
                },
                "displayNumber": {
                  "type": "string"
                },
                "drsReference": {
                  "type": "object",
                  "properties": {
                    "url": {
                      "type": "string"
                    }
                  }
                },
                "billAggregationGroupId": {
                  "type": "string"
                },
                "hasTaxDocument": {
                  "type": "boolean"
                },
                "lineItemSetIds": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "lineItemsCount": {
                  "type": "integer"
                },
                "testHeader": {
                  "type": "object",
                  "properties": {
                    "contact": {
                      "type": "string"
                    },
                    "retention": {
                      "type": "string"
                    },
                    "scenarios": {
                      "type": "string"
                    }
                  }
                },
                "billingGroupDescription": {
                  "type": "string"
                },
                "isBillImmediateDocument": {
                  "type": "boolean"
                },
                "isImmediateSettleDocument": {
                  "type": "boolean"
                },
                "generatedByContract": {
                  "type": "string"
                },
                "isReadOnly": {
                  "type": "boolean"
                },
                "isExternalDocument": {
                  "type": "boolean"
                },
                "taxOffReferences": {
                  "type": "array"
                },
                "taxOffsetLineItemSetIds": {
                  "type": "array"
                },
                "documentReference": {
                  "type": "object",
                  "properties": {
                    "referenceType": {
                      "type": "string"
                    },
                    "referencedDocumentId": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "eventId": {
              "type": "string"
            },
            "eventTimestamp": {
              "type": "string"
            },
            "eventType": {
              "type": "string"
            },
            "customerId": {
              "type": "string"
            },
            "billingGroupId": {
              "type": "string"
            }
          }
        }
      },
      "dependsOn": [
        "[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorageGen2')]"
      ]
    },
    {
      "name": "[concat(parameters('factoryName'), '/LedgerRawDataSet')]",
      "type": "Microsoft.DataFactory/factories/datasets",
      "apiVersion": "2018-06-01",
      "properties": {
        "linkedServiceName": {
          "referenceName": "LedgerRawDataLinkService",
          "type": "LinkedServiceReference"
        },
        "parameters": {
          "container": {
            "type": "string"
          }
        },
        "annotations": [],
        "type": "Binary",
        "typeProperties": {
          "location": {
            "type": "AzureBlobStorageLocation",
            "container": {
              "value": "@dataset().container",
              "type": "Expression"
            }
          }
        }
      },
      "dependsOn": [
        "[concat(variables('factoryId'), '/linkedServices/LedgerRawDataLinkService')]"
      ]
    },
    {
      "name": "[concat(parameters('factoryName'), '/OrderPartnerDataSet')]",
      "type": "Microsoft.DataFactory/factories/datasets",
      "apiVersion": "2018-06-01",
      "properties": {
        "linkedServiceName": {
          "referenceName": "CollectorLinkedService",
          "type": "LinkedServiceReference"
        },
        "parameters": {
          "container": {
            "type": "string",
            "defaultValue": "purchaseorder-2019-12-15"
          }
        },
        "annotations": [],
        "type": "Binary",
        "typeProperties": {
          "location": {
            "type": "AzureBlobStorageLocation",
            "container": {
              "value": "@dataset().container",
              "type": "Expression"
            }
          }
        }
      },
      "dependsOn": [
        "[concat(variables('factoryId'), '/linkedServices/CollectorLinkedService')]"
      ]
    },
    {
      "name": "[concat(parameters('factoryName'), '/RADeferralPartnerDataSet')]",
      "type": "Microsoft.DataFactory/factories/datasets",
      "apiVersion": "2018-06-01",
      "properties": {
        "linkedServiceName": {
          "referenceName": "CollectorLinkedService",
          "type": "LinkedServiceReference"
        },
        "parameters": {
          "container": {
            "type": "string",
            "defaultValue": "pix-consumabledeferral-air"
          }
        },
        "annotations": [],
        "type": "Binary",
        "typeProperties": {
          "location": {
            "type": "AzureBlobStorageLocation",
            "container": {
              "value": "@dataset().container",
              "type": "Expression"
            }
          }
        }
      },
      "dependsOn": [
        "[concat(variables('factoryId'), '/linkedServices/CollectorLinkedService')]"
      ]
    },
    {
      "name": "[concat(parameters('factoryName'), '/RAMonetaryCommitDeferralPartnerDataSet')]",
      "type": "Microsoft.DataFactory/factories/datasets",
      "apiVersion": "2018-06-01",
      "properties": {
        "linkedServiceName": {
          "referenceName": "CollectorLinkedService",
          "type": "LinkedServiceReference"
        },
        "parameters": {
          "container": {
            "type": "string",
            "defaultValue": "pix-mcommitdeferral-air"
          }
        },
        "annotations": [],
        "type": "Binary",
        "typeProperties": {
          "location": {
            "type": "AzureBlobStorageLocation",
            "container": {
              "value": "@dataset().container",
              "type": "Expression"
            }
          }
        }
      },
      "dependsOn": [
        "[concat(variables('factoryId'), '/linkedServices/CollectorLinkedService')]"
      ]
    },
    {
      "name": "[concat(parameters('factoryName'), '/ReconControlSourceRawDataSetGen2')]",
      "type": "Microsoft.DataFactory/factories/datasets",
      "apiVersion": "2018-06-01",
      "properties": {
        "linkedServiceName": {
          "referenceName": "AzureDataLakeStorageGen2",
          "type": "LinkedServiceReference"
        },
        "parameters": {
          "container": {
            "type": "string"
          },
          "path": {
            "type": "string"
          }
        },
        "annotations": [],
        "type": "Binary",
        "typeProperties": {
          "location": {
            "type": "AzureBlobFSLocation",
            "folderPath": {
              "value": "@dataset().path",
              "type": "Expression"
            },
            "fileSystem": {
              "value": "@dataset().container",
              "type": "Expression"
            }
          }
        }
      },
      "dependsOn": [
        "[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorageGen2')]"
      ]
    },
    {
      "name": "[concat(parameters('factoryName'), '/TsvGen1DataSet')]",
      "type": "Microsoft.DataFactory/factories/datasets",
      "apiVersion": "2018-06-01",
      "properties": {
        "linkedServiceName": {
          "referenceName": "RatingAdls",
          "type": "LinkedServiceReference"
        },
        "parameters": {
          "Directory": {
            "type": "string"
          },
          "FileName": {
            "type": "string"
          }
        },
        "annotations": [],
        "type": "DelimitedText",
        "typeProperties": {
          "location": {
            "type": "AzureDataLakeStoreLocation",
            "fileName": {
              "value": "@dataset().FileName",
              "type": "Expression"
            },
            "folderPath": {
              "value": "@dataset().Directory",
              "type": "Expression"
            }
          },
          "columnDelimiter": "\t",
          "escapeChar": "\\",
          "quoteChar": "\""
        },
        "schema": []
      },
      "dependsOn": [
        "[concat(variables('factoryId'), '/linkedServices/RatingAdls')]"
      ]
    },
    {
      "name": "[concat(parameters('factoryName'), '/AZlogAdfPipelineFuncLS')]",
      "type": "Microsoft.DataFactory/factories/linkedServices",
      "apiVersion": "2018-06-01",
      "properties": {
        "annotations": [],
        "type": "AzureFunction",
        "typeProperties": {
          "functionAppUrl": "[parameters('AZlogAdfPipelineFuncLS_properties_typeProperties_functionAppUrl')]",
          "functionKey": {
            "type": "AzureKeyVaultSecret",
            "store": {
              "referenceName": "Secrets",
              "type": "LinkedServiceReference"
            },
            "secretName": "AZFLogAdfPipelineStatusSecret"
          }
        }
      },
      "dependsOn": [
        "[concat(variables('factoryId'), '/linkedServices/Secrets')]"
      ]
    },
    {
      "name": "[concat(parameters('factoryName'), '/AZLogReconAnalysisLS')]",
      "type": "Microsoft.DataFactory/factories/linkedServices",
      "apiVersion": "2018-06-01",
      "properties": {
        "annotations": [],
        "type": "AzureFunction",
        "typeProperties": {
          "functionAppUrl": "[parameters('AZLogReconAnalysisLS_properties_typeProperties_functionAppUrl')]",
          "functionKey": {
            "type": "AzureKeyVaultSecret",
            "store": {
              "referenceName": "Secrets",
              "type": "LinkedServiceReference"
            },
            "secretName": "AZFLogReconResultSecret"
          }
        }
      },
      "dependsOn": [
        "[concat(variables('factoryId'), '/linkedServices/Secrets')]"
      ]
    },
    {
      "name": "[concat(parameters('factoryName'), '/AZlogControlStreamFuncLS')]",
      "type": "Microsoft.DataFactory/factories/linkedServices",
      "apiVersion": "2018-06-01",
      "properties": {
        "annotations": [],
        "type": "AzureFunction",
        "typeProperties": {
          "functionAppUrl": "[parameters('AZlogControlStreamFuncLS_properties_typeProperties_functionAppUrl')]",
          "functionKey": {
            "type": "AzureKeyVaultSecret",
            "store": {
              "referenceName": "Secrets",
              "type": "LinkedServiceReference"
            },
            "secretName": "AZFLogControlStreamStatusSecret"
          }
        }
      },
      "dependsOn": [
        "[concat(variables('factoryId'), '/linkedServices/Secrets')]"
      ]
    },
    {
      "name": "[concat(parameters('factoryName'), '/AzureDataLakeAnalytics')]",
      "type": "Microsoft.DataFactory/factories/linkedServices",
      "apiVersion": "2018-06-01",
      "properties": {
        "description": "Linked Service for Azure Data Lake Analytics",
        "annotations": [],
        "type": "AzureDataLakeAnalytics",
        "typeProperties": {
          "accountName": "[parameters('AzureDataLakeAnalytics_properties_typeProperties_accountName')]",
          "servicePrincipalId": "[parameters('AzureDataLakeAnalytics_properties_typeProperties_servicePrincipalId')]",
          "servicePrincipalKey": {
            "type": "AzureKeyVaultSecret",
            "store": {
              "referenceName": "Secrets",
              "type": "LinkedServiceReference"
            },
            "secretName": "ADLAServicePrincipalKey"
          },
          "tenant": "[parameters('AzureDataLakeAnalytics_properties_typeProperties_tenant')]",
          "subscriptionId": "[parameters('AzureDataLakeAnalytics_properties_typeProperties_subscriptionId')]",
          "resourceGroupName": "[parameters('AzureDataLakeAnalytics_properties_typeProperties_resourceGroupName')]",
          "azureCloudType": "[parameters('AzureDataLakeAnalytics_properties_typeProperties_azureCloudType')]",
          "dataLakeAnalyticsUri": "[parameters('AzureDataLakeAnalytics_properties_typeProperties_dataLakeAnalyticsUri')]"
        }
      },
      "dependsOn": [
        "[concat(variables('factoryId'), '/linkedServices/Secrets')]"
      ]
    },
    {
      "name": "[concat(parameters('factoryName'), '/AzureDataLakeStorageGen2')]",
      "type": "Microsoft.DataFactory/factories/linkedServices",
      "apiVersion": "2018-06-01",
      "properties": {
        "description": "Linked service for ADLS Gen2 account",
        "annotations": [],
        "type": "AzureBlobFS",
        "typeProperties": {
          "url": "[parameters('AzureDataLakeStorageGen2_properties_typeProperties_url')]",
          "tenant": "[parameters('AzureDataLakeStorageGen2_properties_typeProperties_tenant')]",
          "servicePrincipalId": "[parameters('AzureDataLakeStorageGen2_properties_typeProperties_servicePrincipalId')]",
          "servicePrincipalKey": {
            "type": "AzureKeyVaultSecret",
            "store": {
              "referenceName": "Secrets",
              "type": "LinkedServiceReference"
            },
            "secretName": "ADLAServicePrincipalKey"
          }
        }
      },
      "dependsOn": [
        "[concat(variables('factoryId'), '/linkedServices/Secrets')]"
      ]
    },
    {
      "name": "[concat(parameters('factoryName'), '/CARawDataSourceLinkService')]",
      "type": "Microsoft.DataFactory/factories/linkedServices",
      "apiVersion": "2018-06-01",
      "properties": {
        "description": "Linked service to connect to Charge Aggregator Blob storage",
        "annotations": [],
        "type": "AzureBlobStorage",
        "typeProperties": {
          "serviceEndpoint": "[parameters('CARawDataSourceLinkService_properties_typeProperties_serviceEndpoint')]",
          "tenant": "[parameters('CARawDataSourceLinkService_properties_typeProperties_tenant')]",
          "servicePrincipalId": "[parameters('CARawDataSourceLinkService_properties_typeProperties_servicePrincipalId')]",
          "servicePrincipalKey": {
            "type": "AzureKeyVaultSecret",
            "store": {
              "referenceName": "Secrets",
              "type": "LinkedServiceReference"
            },
            "secretName": "CAServicePrincipalKey"
          }
        }
      },
      "dependsOn": [
        "[concat(variables('factoryId'), '/linkedServices/Secrets')]"
      ]
    },
    {
      "name": "[concat(parameters('factoryName'), '/CollectorLinkedService')]",
      "type": "Microsoft.DataFactory/factories/linkedServices",
      "apiVersion": "2018-06-01",
      "properties": {
        "annotations": [],
        "type": "AzureBlobStorage",
        "typeProperties": {
          "serviceEndpoint": "[parameters('CollectorLinkedService_properties_typeProperties_serviceEndpoint')]",
          "tenant": "[parameters('CollectorLinkedService_properties_typeProperties_tenant')]",
          "servicePrincipalId": "[parameters('CollectorLinkedService_properties_typeProperties_servicePrincipalId')]",
          "servicePrincipalKey": {
            "type": "AzureKeyVaultSecret",
            "store": {
              "referenceName": "Secrets",
              "type": "LinkedServiceReference"
            },
            "secretName": "OrderServicePrincipalKey"
          }
        }
      },
      "dependsOn": [
        "[concat(variables('factoryId'), '/linkedServices/Secrets')]"
      ]
    },
    {
      "name": "[concat(parameters('factoryName'), '/CrusherDataSourceLinkedService')]",
      "type": "Microsoft.DataFactory/factories/linkedServices",
      "apiVersion": "2018-06-01",
      "properties": {
        "description": "Linked Service to communicate with Crusher Blob storage",
        "annotations": [],
        "type": "AzureBlobStorage",
        "typeProperties": {
          "serviceEndpoint": "[parameters('CrusherDataSourceLinkedService_properties_typeProperties_serviceEndpoint')]",
          "tenant": "[parameters('CrusherDataSourceLinkedService_properties_typeProperties_tenant')]",
          "servicePrincipalId": "[parameters('CrusherDataSourceLinkedService_properties_typeProperties_servicePrincipalId')]",
          "servicePrincipalKey": {
            "type": "AzureKeyVaultSecret",
            "store": {
              "referenceName": "Secrets",
              "type": "LinkedServiceReference"
            },
            "secretName": "CrusherServicePrincipalKey"
          }
        }
      },
      "dependsOn": [
        "[concat(variables('factoryId'), '/linkedServices/Secrets')]"
      ]
    },
    {
      "name": "[concat(parameters('factoryName'), '/InvoiceLineItemDetailsRawDataLinkService')]",
      "type": "Microsoft.DataFactory/factories/linkedServices",
      "apiVersion": "2018-06-01",
      "properties": {
        "description": "Linked Service to communicate with Invoice++ service storage",
        "annotations": [],
        "type": "AzureBlobStorage",
        "typeProperties": {
          "serviceEndpoint": "[parameters('InvoiceLineItemDetailsRawDataLinkService_properties_typeProperties_serviceEndpoint')]",
          "tenant": "[parameters('InvoiceLineItemDetailsRawDataLinkService_properties_typeProperties_tenant')]",
          "servicePrincipalId": "[parameters('InvoiceLineItemDetailsRawDataLinkService_properties_typeProperties_servicePrincipalId')]",
          "servicePrincipalKey": {
            "type": "AzureKeyVaultSecret",
            "store": {
              "referenceName": "Secrets",
              "type": "LinkedServiceReference"
            },
            "secretName": "InvoicingServicePrincipalKey"
          }
        }
      },
      "dependsOn": [
        "[concat(variables('factoryId'), '/linkedServices/Secrets')]"
      ]
    },
    {
      "name": "[concat(parameters('factoryName'), '/InvoiceSummaryRawDataLinkService')]",
      "type": "Microsoft.DataFactory/factories/linkedServices",
      "apiVersion": "2018-06-01",
      "properties": {
        "annotations": [],
        "type": "AzureBlobStorage",
        "typeProperties": {
          "serviceEndpoint": "[parameters('InvoiceSummaryRawDataLinkService_properties_typeProperties_serviceEndpoint')]",
          "tenant": "[parameters('InvoiceSummaryRawDataLinkService_properties_typeProperties_tenant')]",
          "servicePrincipalId": "[parameters('InvoiceSummaryRawDataLinkService_properties_typeProperties_servicePrincipalId')]",
          "servicePrincipalKey": {
            "type": "AzureKeyVaultSecret",
            "store": {
              "referenceName": "Secrets",
              "type": "LinkedServiceReference"
            },
            "secretName": "InvoicingServicePrincipalKey"
          }
        }
      },
      "dependsOn": [
        "[concat(variables('factoryId'), '/linkedServices/Secrets')]"
      ]
    },
    {
      "name": "[concat(parameters('factoryName'), '/LedgerRawDataLinkService')]",
      "type": "Microsoft.DataFactory/factories/linkedServices",
      "apiVersion": "2018-06-01",
      "properties": {
        "annotations": [],
        "type": "AzureBlobStorage",
        "typeProperties": {
          "serviceEndpoint": "[parameters('LedgerRawDataLinkService_properties_typeProperties_serviceEndpoint')]",
          "tenant": "[parameters('LedgerRawDataLinkService_properties_typeProperties_tenant')]",
          "servicePrincipalId": "[parameters('LedgerRawDataLinkService_properties_typeProperties_servicePrincipalId')]",
          "servicePrincipalKey": {
            "type": "AzureKeyVaultSecret",
            "store": {
              "referenceName": "Secrets",
              "type": "LinkedServiceReference"
            },
            "secretName": "LedgerServicePrincipalKey"
          }
        }
      },
      "dependsOn": [
        "[concat(variables('factoryId'), '/linkedServices/Secrets')]"
      ]
    },
    {
      "name": "[concat(parameters('factoryName'), '/OrderRawDataSourceLinkedService')]",
      "type": "Microsoft.DataFactory/factories/linkedServices",
      "apiVersion": "2018-06-01",
      "properties": {
        "annotations": [],
        "type": "AzureBlobStorage",
        "typeProperties": {
          "serviceEndpoint": "[parameters('OrderRawDataSourceLinkedService_properties_typeProperties_serviceEndpoint')]",
          "tenant": "[parameters('OrderRawDataSourceLinkedService_properties_typeProperties_tenant')]",
          "servicePrincipalId": "[parameters('OrderRawDataSourceLinkedService_properties_typeProperties_servicePrincipalId')]",
          "servicePrincipalKey": {
            "type": "AzureKeyVaultSecret",
            "store": {
              "referenceName": "Secrets",
              "type": "LinkedServiceReference"
            },
            "secretName": "OrderServicePrincipalKey"
          }
        }
      },
      "dependsOn": [
        "[concat(variables('factoryId'), '/linkedServices/Secrets')]"
      ]
    },
    {
      "name": "[concat(parameters('factoryName'), '/RatingAdls')]",
      "type": "Microsoft.DataFactory/factories/linkedServices",
      "apiVersion": "2018-06-01",
      "properties": {
        "annotations": [],
        "type": "AzureDataLakeStore",
        "typeProperties": {
          "dataLakeStoreUri": "[parameters('RatingAdls_properties_typeProperties_dataLakeStoreUri')]",
          "servicePrincipalId": "[parameters('RatingAdls_properties_typeProperties_servicePrincipalId')]",
          "servicePrincipalKey": {
            "type": "AzureKeyVaultSecret",
            "store": {
              "referenceName": "Secrets",
              "type": "LinkedServiceReference"
            },
            "secretName": "ADLAServicePrincipalKey"
          },
          "tenant": "[parameters('RatingAdls_properties_typeProperties_tenant')]",
          "subscriptionId": "[parameters('RatingAdls_properties_typeProperties_subscriptionId')]",
          "resourceGroupName": "[parameters('RatingAdls_properties_typeProperties_resourceGroupName')]"
        }
      },
      "dependsOn": [
        "[concat(variables('factoryId'), '/linkedServices/Secrets')]"
      ]
    },
    {
      "name": "[concat(parameters('factoryName'), '/Secrets')]",
      "type": "Microsoft.DataFactory/factories/linkedServices",
      "apiVersion": "2018-06-01",
      "properties": {
        "description": "Key vault linked service to access keys",
        "annotations": [],
        "type": "AzureKeyVault",
        "typeProperties": {
          "baseUrl": "[parameters('Secrets_properties_typeProperties_baseUrl')]"
        }
      },
      "dependsOn": []
    },
    {
      "name": "[concat(parameters('factoryName'), '/Monitor-CAToInvoice-Pipeline')]",
      "type": "Microsoft.DataFactory/factories/triggers",
      "apiVersion": "2018-06-01",
      "properties": {
        "annotations": [],
        "runtimeState": "Stopped",
        "pipelines": [
          {
            "pipelineReference": {
              "referenceName": "LogLastControlRunTimestamp",
              "type": "PipelineReference"
            },
            "parameters": {
              "ControlName": "[parameters('Monitor-CAToInvoice-Pipeline_properties_LogLastControlRunTimestamp_parameters_ControlName')]"
            }
          }
        ],
        "type": "ScheduleTrigger",
        "typeProperties": {
          "recurrence": {
            "frequency": "Hour",
            "interval": 2,
            "startTime": "2020-07-31T16:00:00Z",
            "timeZone": "UTC"
          }
        }
      },
      "dependsOn": [
        "[concat(variables('factoryId'), '/pipelines/LogLastControlRunTimestamp')]"
      ]
    },
    {
      "name": "[concat(parameters('factoryName'), '/Monitor-CAToLedger-Pipeline')]",
      "type": "Microsoft.DataFactory/factories/triggers",
      "apiVersion": "2018-06-01",
      "properties": {
        "annotations": [],
        "runtimeState": "Stopped",
        "pipelines": [
          {
            "pipelineReference": {
              "referenceName": "LogLastControlRunTimestamp",
              "type": "PipelineReference"
            },
            "parameters": {
              "ControlName": "[parameters('Monitor-CAToLedger-Pipeline_properties_LogLastControlRunTimestamp_parameters_ControlName')]"
            }
          }
        ],
        "type": "ScheduleTrigger",
        "typeProperties": {
          "recurrence": {
            "frequency": "Hour",
            "interval": 2,
            "startTime": "2020-07-31T16:00:00Z",
            "timeZone": "UTC"
          }
        }
      },
      "dependsOn": [
        "[concat(variables('factoryId'), '/pipelines/LogLastControlRunTimestamp')]"
      ]
    },
    {
      "name": "[concat(parameters('factoryName'), '/Monitor-InvoiceToCrusher-Pipeline')]",
      "type": "Microsoft.DataFactory/factories/triggers",
      "apiVersion": "2018-06-01",
      "properties": {
        "annotations": [],
        "runtimeState": "Stopped",
        "pipelines": [
          {
            "pipelineReference": {
              "referenceName": "LogLastControlRunTimestamp",
              "type": "PipelineReference"
            },
            "parameters": {
              "ControlName": "[parameters('Monitor-InvoiceToCrusher-Pipeline_properties_LogLastControlRunTimestamp_parameters_ControlName')]"
            }
          }
        ],
        "type": "ScheduleTrigger",
        "typeProperties": {
          "recurrence": {
            "frequency": "Hour",
            "interval": 2,
            "startTime": "2020-07-31T16:00:00Z",
            "timeZone": "UTC"
          }
        }
      },
      "dependsOn": [
        "[concat(variables('factoryId'), '/pipelines/LogLastControlRunTimestamp')]"
      ]
    },
    {
      "name": "[concat(parameters('factoryName'), '/Monitor-InvoiceToInvoice-Pipeline')]",
      "type": "Microsoft.DataFactory/factories/triggers",
      "apiVersion": "2018-06-01",
      "properties": {
        "annotations": [],
        "runtimeState": "Stopped",
        "pipelines": [
          {
            "pipelineReference": {
              "referenceName": "LogLastControlRunTimestamp",
              "type": "PipelineReference"
            },
            "parameters": {
              "ControlName": "[parameters('Monitor-InvoiceToInvoice-Pipeline_properties_LogLastControlRunTimestamp_parameters_ControlName')]"
            }
          }
        ],
        "type": "ScheduleTrigger",
        "typeProperties": {
          "recurrence": {
            "frequency": "Hour",
            "interval": 2,
            "startTime": "2020-07-31T16:00:00Z",
            "timeZone": "UTC"
          }
        }
      },
      "dependsOn": [
        "[concat(variables('factoryId'), '/pipelines/LogLastControlRunTimestamp')]"
      ]
    },
    {
      "name": "[concat(parameters('factoryName'), '/Monitor-LedgerToCrusher-Pipeline')]",
      "type": "Microsoft.DataFactory/factories/triggers",
      "apiVersion": "2018-06-01",
      "properties": {
        "annotations": [],
        "runtimeState": "Stopped",
        "pipelines": [
          {
            "pipelineReference": {
              "referenceName": "LogLastControlRunTimestamp",
              "type": "PipelineReference"
            },
            "parameters": {
              "ControlName": "[parameters('Monitor-LedgerToCrusher-Pipeline_properties_LogLastControlRunTimestamp_parameters_ControlName')]"
            }
          }
        ],
        "type": "ScheduleTrigger",
        "typeProperties": {
          "recurrence": {
            "frequency": "Hour",
            "interval": 2,
            "startTime": "2020-07-31T16:00:00Z",
            "timeZone": "UTC"
          }
        }
      },
      "dependsOn": [
        "[concat(variables('factoryId'), '/pipelines/LogLastControlRunTimestamp')]"
      ]
    },
    {
      "name": "[concat(parameters('factoryName'), '/Monitor-LedgerToCrusherUnbilled-Pipeline')]",
      "type": "Microsoft.DataFactory/factories/triggers",
      "apiVersion": "2018-06-01",
      "properties": {
        "annotations": [],
        "runtimeState": "Stopped",
        "pipelines": [
          {
            "pipelineReference": {
              "referenceName": "LogLastControlRunTimestamp",
              "type": "PipelineReference"
            },
            "parameters": {
              "ControlName": "[parameters('Monitor-LedgerToCrusherUnbilled-Pipeline_properties_LogLastControlRunTimestamp_parameters_ControlName')]"
            }
          }
        ],
        "type": "ScheduleTrigger",
        "typeProperties": {
          "recurrence": {
            "frequency": "Hour",
            "interval": 2,
            "startTime": "2020-07-31T16:00:00Z",
            "timeZone": "UTC"
          }
        }
      },
      "dependsOn": [
        "[concat(variables('factoryId'), '/pipelines/LogLastControlRunTimestamp')]"
      ]
    },
    {
      "name": "[concat(parameters('factoryName'), '/Monitor-OrderToCA-Pipeline')]",
      "type": "Microsoft.DataFactory/factories/triggers",
      "apiVersion": "2018-06-01",
      "properties": {
        "annotations": [],
        "runtimeState": "Stopped",
        "pipelines": [
          {
            "pipelineReference": {
              "referenceName": "LogLastControlRunTimestamp",
              "type": "PipelineReference"
            },
            "parameters": {
              "ControlName": "[parameters('Monitor-OrderToCA-Pipeline_properties_LogLastControlRunTimestamp_parameters_ControlName')]"
            }
          }
        ],
        "type": "ScheduleTrigger",
        "typeProperties": {
          "recurrence": {
            "frequency": "Hour",
            "interval": 2,
            "startTime": "2020-07-31T16:00:00Z",
            "timeZone": "UTC"
          }
        }
      },
      "dependsOn": [
        "[concat(variables('factoryId'), '/pipelines/LogLastControlRunTimestamp')]"
      ]
    },
    {
      "name": "[concat(parameters('factoryName'), '/Monitor-RAToLedger-Pipeline')]",
      "type": "Microsoft.DataFactory/factories/triggers",
      "apiVersion": "2018-06-01",
      "properties": {
        "annotations": [],
        "runtimeState": "Stopped",
        "pipelines": [
          {
            "pipelineReference": {
              "referenceName": "LogLastControlRunTimestamp",
              "type": "PipelineReference"
            },
            "parameters": {
              "ControlName": "[parameters('Monitor-RAToLedger-Pipeline_properties_LogLastControlRunTimestamp_parameters_ControlName')]"
            }
          }
        ],
        "type": "ScheduleTrigger",
        "typeProperties": {
          "recurrence": {
            "frequency": "Hour",
            "interval": 2,
            "startTime": "2020-07-31T16:00:00Z",
            "timeZone": "UTC"
          }
        }
      },
      "dependsOn": [
        "[concat(variables('factoryId'), '/pipelines/LogLastControlRunTimestamp')]"
      ]
    },
    {
      "name": "[concat(parameters('factoryName'), '/Monitor-RatingToLedger-Pipeline')]",
      "type": "Microsoft.DataFactory/factories/triggers",
      "apiVersion": "2018-06-01",
      "properties": {
        "annotations": [],
        "runtimeState": "Stopped",
        "pipelines": [
          {
            "pipelineReference": {
              "referenceName": "LogLastControlRunTimestamp",
              "type": "PipelineReference"
            },
            "parameters": {
              "ControlName": "[parameters('Monitor-RatingToLedger-Pipeline_properties_LogLastControlRunTimestamp_parameters_ControlName')]"
            }
          }
        ],
        "type": "ScheduleTrigger",
        "typeProperties": {
          "recurrence": {
            "frequency": "Hour",
            "interval": 2,
            "startTime": "2020-07-31T16:00:00Z",
            "timeZone": "UTC"
          }
        }
      },
      "dependsOn": [
        "[concat(variables('factoryId'), '/pipelines/LogLastControlRunTimestamp')]"
      ]
    },
    {
      "name": "[concat(parameters('factoryName'), '/Monitor-TimelineToLedger-Pipeline')]",
      "type": "Microsoft.DataFactory/factories/triggers",
      "apiVersion": "2018-06-01",
      "properties": {
        "annotations": [],
        "runtimeState": "Stopped",
        "pipelines": [
          {
            "pipelineReference": {
              "referenceName": "LogLastControlRunTimestamp",
              "type": "PipelineReference"
            },
            "parameters": {
              "ControlName": "[parameters('Monitor-TimelineToLedger-Pipeline_properties_LogLastControlRunTimestamp_parameters_ControlName')]"
            }
          }
        ],
        "type": "ScheduleTrigger",
        "typeProperties": {
          "recurrence": {
            "frequency": "Hour",
            "interval": 2,
            "startTime": "2020-07-31T16:00:00Z",
            "timeZone": "UTC"
          }
        }
      },
      "dependsOn": [
        "[concat(variables('factoryId'), '/pipelines/LogLastControlRunTimestamp')]"
      ]
    },
    {
      "name": "[concat(parameters('factoryName'), '/Trigger-Control-CAToInvoice')]",
      "type": "Microsoft.DataFactory/factories/triggers",
      "apiVersion": "2018-06-01",
      "properties": {
        "description": "CA To invoice  control scheduling",
        "annotations": [],
        "runtimeState": "Stopped",
        "pipeline": {
          "pipelineReference": {
            "referenceName": "CAToInvoice",
            "type": "PipelineReference"
          },
          "parameters": {
            "RunDate": "[parameters('Trigger-Control-CAToInvoice_properties_pipeline_parameters_RunDate')]"
          }
        },
        "type": "TumblingWindowTrigger",
        "typeProperties": {
          "frequency": "Hour",
          "interval": 24,
          "startTime": "2020-11-04T06:00:00.000Z",
          "delay": "00:00:00",
          "maxConcurrency": 1,
          "retryPolicy": {
            "intervalInSeconds": 30
          },
          "dependsOn": []
        }
      },
      "dependsOn": [
        "[concat(variables('factoryId'), '/pipelines/CAToInvoice')]"
      ]
    },
    {
      "name": "[concat(parameters('factoryName'), '/Trigger-Control-CAToLedger')]",
      "type": "Microsoft.DataFactory/factories/triggers",
      "apiVersion": "2018-06-01",
      "properties": {
        "description": "Trigger-Control-CAToLedger",
        "annotations": [],
        "runtimeState": "Stopped",
        "pipeline": {
          "pipelineReference": {
            "referenceName": "CAToLedger",
            "type": "PipelineReference"
          },
          "parameters": {
            "RunDate": "[parameters('Trigger-Control-CAToLedger_properties_pipeline_parameters_RunDate')]"
          }
        },
        "type": "TumblingWindowTrigger",
        "typeProperties": {
          "frequency": "Hour",
          "interval": 24,
          "startTime": "2020-11-04T06:00:00.000Z",
          "delay": "00:00:00",
          "maxConcurrency": 1,
          "retryPolicy": {
            "intervalInSeconds": 30
          },
          "dependsOn": []
        }
      },
      "dependsOn": [
        "[concat(variables('factoryId'), '/pipelines/CAToLedger')]"
      ]
    },
    {
      "name": "[concat(parameters('factoryName'), '/Trigger-Control-InvoiceToCrusher')]",
      "type": "Microsoft.DataFactory/factories/triggers",
      "apiVersion": "2018-06-01",
      "properties": {
        "description": "Trigger-Control-InvoiceToCrusher",
        "annotations": [],
        "runtimeState": "Stopped",
        "pipeline": {
          "pipelineReference": {
            "referenceName": "InvoiceToCrusher",
            "type": "PipelineReference"
          },
          "parameters": {
            "RunDate": "[parameters('Trigger-Control-InvoiceToCrusher_properties_pipeline_parameters_RunDate')]"
          }
        },
        "type": "TumblingWindowTrigger",
        "typeProperties": {
          "frequency": "Hour",
          "interval": 24,
          "startTime": "2020-11-04T06:00:00.000Z",
          "delay": "00:00:00",
          "maxConcurrency": 1,
          "retryPolicy": {
            "intervalInSeconds": 30
          },
          "dependsOn": []
        }
      },
      "dependsOn": [
        "[concat(variables('factoryId'), '/pipelines/InvoiceToCrusher')]"
      ]
    },
    {
      "name": "[concat(parameters('factoryName'), '/Trigger-Control-InvoiceToInvoice')]",
      "type": "Microsoft.DataFactory/factories/triggers",
      "apiVersion": "2018-06-01",
      "properties": {
        "description": "Invoice To Invoice control scheduling",
        "annotations": [],
        "runtimeState": "Stopped",
        "pipeline": {
          "pipelineReference": {
            "referenceName": "InvoiceToInvoice",
            "type": "PipelineReference"
          },
          "parameters": {
            "RunDate": "[parameters('Trigger-Control-InvoiceToInvoice_properties_pipeline_parameters_RunDate')]"
          }
        },
        "type": "TumblingWindowTrigger",
        "typeProperties": {
          "frequency": "Hour",
          "interval": 24,
          "startTime": "2020-11-04T06:00:00.000Z",
          "delay": "00:00:00",
          "maxConcurrency": 1,
          "retryPolicy": {
            "intervalInSeconds": 30
          },
          "dependsOn": []
        }
      },
      "dependsOn": [
        "[concat(variables('factoryId'), '/pipelines/InvoiceToInvoice')]"
      ]
    },
    {
      "name": "[concat(parameters('factoryName'), '/Trigger-Control-LedgerToCrusher')]",
      "type": "Microsoft.DataFactory/factories/triggers",
      "apiVersion": "2018-06-01",
      "properties": {
        "description": "Trigger-Control-LedgerToCrusher",
        "annotations": [],
        "runtimeState": "Stopped",
        "pipeline": {
          "pipelineReference": {
            "referenceName": "LedgerToCrusher",
            "type": "PipelineReference"
          },
          "parameters": {
            "RunDate": "[parameters('Trigger-Control-LedgerToCrusher_properties_pipeline_parameters_RunDate')]"
          }
        },
        "type": "TumblingWindowTrigger",
        "typeProperties": {
          "frequency": "Hour",
          "interval": 24,
          "startTime": "2020-11-04T06:00:00.000Z",
          "delay": "00:00:00",
          "maxConcurrency": 1,
          "retryPolicy": {
            "intervalInSeconds": 30
          },
          "dependsOn": []
        }
      },
      "dependsOn": [
        "[concat(variables('factoryId'), '/pipelines/LedgerToCrusher')]"
      ]
    },
    {
      "name": "[concat(parameters('factoryName'), '/Trigger-Control-LedgerToCrusherUnbilled')]",
      "type": "Microsoft.DataFactory/factories/triggers",
      "apiVersion": "2018-06-01",
      "properties": {
        "description": "Trigger-Control-LedgerToCrusherUnbilled",
        "annotations": [],
        "runtimeState": "Stopped",
        "pipeline": {
          "pipelineReference": {
            "referenceName": "LedgerToCrusherUnbilled",
            "type": "PipelineReference"
          },
          "parameters": {
            "RunDate": "[parameters('Trigger-Control-LedgerToCrusherUnbilled_properties_pipeline_parameters_RunDate')]"
          }
        },
        "type": "TumblingWindowTrigger",
        "typeProperties": {
          "frequency": "Hour",
          "interval": 24,
          "startTime": "2020-11-04T06:00:00.000Z",
          "delay": "00:00:00",
          "maxConcurrency": 1,
          "retryPolicy": {
            "intervalInSeconds": 30
          },
          "dependsOn": []
        }
      },
      "dependsOn": [
        "[concat(variables('factoryId'), '/pipelines/LedgerToCrusherUnbilled')]"
      ]
    },
    {
      "name": "[concat(parameters('factoryName'), '/Trigger-Control-OrderToCA')]",
      "type": "Microsoft.DataFactory/factories/triggers",
      "apiVersion": "2018-06-01",
      "properties": {
        "description": "Trigger-Control-OrderToCA",
        "annotations": [],
        "runtimeState": "Stopped",
        "pipeline": {
          "pipelineReference": {
            "referenceName": "OrderToChargeAggregator",
            "type": "PipelineReference"
          },
          "parameters": {
            "RunDate": "[parameters('Trigger-Control-OrderToCA_properties_pipeline_parameters_RunDate')]"
          }
        },
        "type": "TumblingWindowTrigger",
        "typeProperties": {
          "frequency": "Hour",
          "interval": 24,
          "startTime": "2020-11-04T06:00:00.000Z",
          "delay": "00:00:00",
          "maxConcurrency": 1,
          "retryPolicy": {
            "intervalInSeconds": 30
          },
          "dependsOn": []
        }
      },
      "dependsOn": [
        "[concat(variables('factoryId'), '/pipelines/OrderToChargeAggregator')]"
      ]
    },
    {
      "name": "[concat(parameters('factoryName'), '/Trigger-Control-RAToLedger')]",
      "type": "Microsoft.DataFactory/factories/triggers",
      "apiVersion": "2018-06-01",
      "properties": {
        "description": "Trigger-Control-RAToLedger",
        "annotations": [],
        "runtimeState": "Stopped",
        "pipeline": {
          "pipelineReference": {
            "referenceName": "RAToLedger",
            "type": "PipelineReference"
          },
          "parameters": {
            "RunDate": "[parameters('Trigger-Control-RAToLedger_properties_pipeline_parameters_RunDate')]"
          }
        },
        "type": "TumblingWindowTrigger",
        "typeProperties": {
          "frequency": "Hour",
          "interval": 24,
          "startTime": "2020-11-04T06:00:00.000Z",
          "delay": "00:00:00",
          "maxConcurrency": 1,
          "retryPolicy": {
            "intervalInSeconds": 30
          },
          "dependsOn": []
        }
      },
      "dependsOn": [
        "[concat(variables('factoryId'), '/pipelines/RAToLedger')]"
      ]
    },
    {
      "name": "[concat(parameters('factoryName'), '/Trigger-Control-RatingToLedger')]",
      "type": "Microsoft.DataFactory/factories/triggers",
      "apiVersion": "2018-06-01",
      "properties": {
        "description": "Trigger-Control-RatingToLedger",
        "annotations": [],
        "runtimeState": "Stopped",
        "pipeline": {
          "pipelineReference": {
            "referenceName": "RatingToLedger",
            "type": "PipelineReference"
          },
          "parameters": {
            "RunDate": "[parameters('Trigger-Control-RatingToLedger_properties_pipeline_parameters_RunDate')]"
          }
        },
        "type": "TumblingWindowTrigger",
        "typeProperties": {
          "frequency": "Hour",
          "interval": 24,
          "startTime": "2020-11-04T06:00:00.000Z",
          "delay": "00:00:00",
          "maxConcurrency": 1,
          "retryPolicy": {
            "intervalInSeconds": 30
          },
          "dependsOn": []
        }
      },
      "dependsOn": [
        "[concat(variables('factoryId'), '/pipelines/RatingToLedger')]"
      ]
    },
    {
      "name": "[concat(parameters('factoryName'), '/Trigger-Control-TimelineToLedger')]",
      "type": "Microsoft.DataFactory/factories/triggers",
      "apiVersion": "2018-06-01",
      "properties": {
        "description": "Trigger-Control-TimelineToLedger",
        "annotations": [],
        "runtimeState": "Stopped",
        "pipeline": {
          "pipelineReference": {
            "referenceName": "TimelineToLedger",
            "type": "PipelineReference"
          },
          "parameters": {
            "RunDate": "[parameters('Trigger-Control-TimelineToLedger_properties_pipeline_parameters_RunDate')]"
          }
        },
        "type": "TumblingWindowTrigger",
        "typeProperties": {
          "frequency": "Hour",
          "interval": 24,
          "startTime": "2020-11-04T06:00:00.000Z",
          "delay": "00:00:00",
          "maxConcurrency": 1,
          "retryPolicy": {
            "intervalInSeconds": 30
          },
          "dependsOn": []
        }
      },
      "dependsOn": [
        "[concat(variables('factoryId'), '/pipelines/TimelineToLedger')]"
      ]
    },
    {
      "name": "[concat(parameters('factoryName'), '/Trigger-Copy-ChargeAggregator')]",
      "type": "Microsoft.DataFactory/factories/triggers",
      "apiVersion": "2018-06-01",
      "properties": {
        "description": "Trigger-Copy-ChargeAggregator",
        "annotations": [],
        "runtimeState": "Stopped",
        "pipeline": {
          "pipelineReference": {
            "referenceName": "Copy CA Raw Json Data",
            "type": "PipelineReference"
          },
          "parameters": {
            "WindowStartTime": "[parameters('Trigger-Copy-ChargeAggregator_properties_pipeline_parameters_WindowStartTime')]"
          }
        },
        "type": "TumblingWindowTrigger",
        "typeProperties": {
          "frequency": "Hour",
          "interval": 1,
          "startTime": "2020-11-04T00:00:00.000Z",
          "delay": "02:00:00",
          "maxConcurrency": 10,
          "retryPolicy": {
            "count": 1,
            "intervalInSeconds": 30
          },
          "dependsOn": []
        }
      },
      "dependsOn": [
        "[concat(variables('factoryId'), '/pipelines/Copy CA Raw Json Data')]"
      ]
    },
    {
      "name": "[concat(parameters('factoryName'), '/Trigger-Copy-CrusherBilledLedger')]",
      "type": "Microsoft.DataFactory/factories/triggers",
      "apiVersion": "2018-06-01",
      "properties": {
        "description": "Trigger-Copy-CrusherBilledLedger",
        "annotations": [],
        "runtimeState": "Stopped",
        "pipeline": {
          "pipelineReference": {
            "referenceName": "Copy Crusher Billed-Ledger Data",
            "type": "PipelineReference"
          },
          "parameters": {
            "WindowStartTime": "[parameters('Trigger-Copy-CrusherBilledLedger_properties_pipeline_parameters_WindowStartTime')]"
          }
        },
        "type": "TumblingWindowTrigger",
        "typeProperties": {
          "frequency": "Hour",
          "interval": 24,
          "startTime": "2020-11-04T00:00:00.000Z",
          "delay": "02:00:00",
          "maxConcurrency": 10,
          "retryPolicy": {
            "count": 1,
            "intervalInSeconds": 30
          },
          "dependsOn": []
        }
      },
      "dependsOn": [
        "[concat(variables('factoryId'), '/pipelines/Copy Crusher Billed-Ledger Data')]"
      ]
    },
    {
      "name": "[concat(parameters('factoryName'), '/Trigger-Copy-CrusherInvoice')]",
      "type": "Microsoft.DataFactory/factories/triggers",
      "apiVersion": "2018-06-01",
      "properties": {
        "description": "Trigger-Copy-CrusherInvoice",
        "annotations": [],
        "runtimeState": "Stopped",
        "pipeline": {
          "pipelineReference": {
            "referenceName": "Copy Crusher Invoice Data",
            "type": "PipelineReference"
          },
          "parameters": {
            "WindowStartTime": "[parameters('Trigger-Copy-CrusherInvoice_properties_pipeline_parameters_WindowStartTime')]"
          }
        },
        "type": "TumblingWindowTrigger",
        "typeProperties": {
          "frequency": "Hour",
          "interval": 24,
          "startTime": "2020-11-04T00:00:00.000Z",
          "delay": "02:00:00",
          "maxConcurrency": 10,
          "retryPolicy": {
            "count": 1,
            "intervalInSeconds": 30
          },
          "dependsOn": []
        }
      },
      "dependsOn": [
        "[concat(variables('factoryId'), '/pipelines/Copy Crusher Invoice Data')]"
      ]
    },
    {
      "name": "[concat(parameters('factoryName'), '/Trigger-Copy-CrusherUnBilledLedger')]",
      "type": "Microsoft.DataFactory/factories/triggers",
      "apiVersion": "2018-06-01",
      "properties": {
        "description": "Trigger-Copy-CrusherUnBilledLedger",
        "annotations": [],
        "runtimeState": "Stopped",
        "pipeline": {
          "pipelineReference": {
            "referenceName": "Copy Crusher UnBilled-Ledger Data",
            "type": "PipelineReference"
          },
          "parameters": {
            "WindowStartTime": "[parameters('Trigger-Copy-CrusherUnBilledLedger_properties_pipeline_parameters_WindowStartTime')]"
          }
        },
        "type": "TumblingWindowTrigger",
        "typeProperties": {
          "frequency": "Hour",
          "interval": 24,
          "startTime": "2020-11-04T00:00:00.000Z",
          "delay": "02:00:00",
          "maxConcurrency": 10,
          "retryPolicy": {
            "count": 1,
            "intervalInSeconds": 30
          },
          "dependsOn": []
        }
      },
      "dependsOn": [
        "[concat(variables('factoryId'), '/pipelines/Copy Crusher UnBilled-Ledger Data')]"
      ]
    },
    {
      "name": "[concat(parameters('factoryName'), '/Trigger-Copy-InvoiceDocumentDetails')]",
      "type": "Microsoft.DataFactory/factories/triggers",
      "apiVersion": "2018-06-01",
      "properties": {
        "annotations": [],
        "runtimeState": "Stopped",
        "pipeline": {
          "pipelineReference": {
            "referenceName": "Copy Invoice Document Details Raw Json Data",
            "type": "PipelineReference"
          },
          "parameters": {
            "WindowStartTime": "[parameters('Trigger-Copy-InvoiceDocumentDetails_properties_pipeline_parameters_WindowStartTime')]"
          }
        },
        "type": "TumblingWindowTrigger",
        "typeProperties": {
          "frequency": "Hour",
          "interval": 1,
          "startTime": "2020-11-04T00:00:00.000Z",
          "delay": "02:00:00",
          "maxConcurrency": 10,
          "retryPolicy": {
            "count": 1,
            "intervalInSeconds": 30
          },
          "dependsOn": []
        }
      },
      "dependsOn": [
        "[concat(variables('factoryId'), '/pipelines/Copy Invoice Document Details Raw Json Data')]"
      ]
    },
    {
      "name": "[concat(parameters('factoryName'), '/Trigger-Copy-InvoiceDocumentSummary')]",
      "type": "Microsoft.DataFactory/factories/triggers",
      "apiVersion": "2018-06-01",
      "properties": {
        "description": "Trigger-Copy-InvoiceDocumentSummary",
        "annotations": [],
        "runtimeState": "Stopped",
        "pipeline": {
          "pipelineReference": {
            "referenceName": "Copy Invoice Summary Raw Json Data",
            "type": "PipelineReference"
          },
          "parameters": {
            "WindowStartTime": "[parameters('Trigger-Copy-InvoiceDocumentSummary_properties_pipeline_parameters_WindowStartTime')]"
          }
        },
        "type": "TumblingWindowTrigger",
        "typeProperties": {
          "frequency": "Hour",
          "interval": 1,
          "startTime": "2020-11-04T00:00:00.000Z",
          "delay": "02:00:00",
          "maxConcurrency": 10,
          "retryPolicy": {
            "count": 1,
            "intervalInSeconds": 30
          },
          "dependsOn": []
        }
      },
      "dependsOn": [
        "[concat(variables('factoryId'), '/pipelines/Copy Invoice Summary Raw Json Data')]"
      ]
    },
    {
      "name": "[concat(parameters('factoryName'), '/Trigger-Copy-Ledger')]",
      "type": "Microsoft.DataFactory/factories/triggers",
      "apiVersion": "2018-06-01",
      "properties": {
        "description": "Trigger-Copy-Ledger",
        "annotations": [],
        "runtimeState": "Stopped",
        "pipeline": {
          "pipelineReference": {
            "referenceName": "Copy Ledger Raw Json data",
            "type": "PipelineReference"
          },
          "parameters": {
            "WindowStartTime": "[parameters('Trigger-Copy-Ledger_properties_pipeline_parameters_WindowStartTime')]"
          }
        },
        "type": "TumblingWindowTrigger",
        "typeProperties": {
          "frequency": "Hour",
          "interval": 1,
          "startTime": "2020-11-04T00:00:00.000Z",
          "delay": "02:00:00",
          "maxConcurrency": 10,
          "retryPolicy": {
            "count": 1,
            "intervalInSeconds": 30
          },
          "dependsOn": []
        }
      },
      "dependsOn": [
        "[concat(variables('factoryId'), '/pipelines/Copy Ledger Raw Json data')]"
      ]
    },
    {
      "name": "[concat(parameters('factoryName'), '/Trigger-Copy-Order')]",
      "type": "Microsoft.DataFactory/factories/triggers",
      "apiVersion": "2018-06-01",
      "properties": {
        "description": "Trigger-Copy-Order",
        "annotations": [],
        "runtimeState": "Stopped",
        "pipeline": {
          "pipelineReference": {
            "referenceName": "Copy Order Raw Json Data",
            "type": "PipelineReference"
          },
          "parameters": {
            "WindowStartTime": "[parameters('Trigger-Copy-Order_properties_pipeline_parameters_WindowStartTime')]"
          }
        },
        "type": "TumblingWindowTrigger",
        "typeProperties": {
          "frequency": "Hour",
          "interval": 1,
          "startTime": "2020-11-04T00:00:00.000Z",
          "delay": "02:00:00",
          "maxConcurrency": 10,
          "retryPolicy": {
            "count": 1,
            "intervalInSeconds": 30
          },
          "dependsOn": []
        }
      },
      "dependsOn": [
        "[concat(variables('factoryId'), '/pipelines/Copy Order Raw Json Data')]"
      ]
    },
    {
      "name": "[concat(parameters('factoryName'), '/Trigger-Copy-RADeferral')]",
      "type": "Microsoft.DataFactory/factories/triggers",
      "apiVersion": "2018-06-01",
      "properties": {
        "description": "Trigger-Copy-RADeferral",
        "annotations": [],
        "runtimeState": "Stopped",
        "pipeline": {
          "pipelineReference": {
            "referenceName": "Copy RA Deferral Raw Json Data",
            "type": "PipelineReference"
          },
          "parameters": {
            "WindowStartTime": "[parameters('Trigger-Copy-RADeferral_properties_pipeline_parameters_WindowStartTime')]"
          }
        },
        "type": "TumblingWindowTrigger",
        "typeProperties": {
          "frequency": "Hour",
          "interval": 1,
          "startTime": "2020-11-04T00:00:00.000Z",
          "delay": "02:00:00",
          "maxConcurrency": 10,
          "retryPolicy": {
            "intervalInSeconds": 30
          },
          "dependsOn": []
        }
      },
      "dependsOn": [
        "[concat(variables('factoryId'), '/pipelines/Copy RA Deferral Raw Json Data')]"
      ]
    },
    {
      "name": "[concat(parameters('factoryName'), '/Trigger-Copy-RAMonetaryCommitDeferral')]",
      "type": "Microsoft.DataFactory/factories/triggers",
      "apiVersion": "2018-06-01",
      "properties": {
        "description": "Trigger-Copy-RAMonetaryCommitDeferral",
        "annotations": [],
        "runtimeState": "Stopped",
        "pipeline": {
          "pipelineReference": {
            "referenceName": "Copy RA MCommit Deferral Raw Json Data",
            "type": "PipelineReference"
          },
          "parameters": {
            "WindowStartTime": "[parameters('Trigger-Copy-RAMonetaryCommitDeferral_properties_pipeline_parameters_WindowStartTime')]"
          }
        },
        "type": "TumblingWindowTrigger",
        "typeProperties": {
          "frequency": "Hour",
          "interval": 1,
          "startTime": "2020-11-04T00:00:00.000Z",
          "delay": "02:00:00",
          "maxConcurrency": 10,
          "retryPolicy": {
            "count": 1,
            "intervalInSeconds": 30
          },
          "dependsOn": []
        }
      },
      "dependsOn": [
        "[concat(variables('factoryId'), '/pipelines/Copy RA MCommit Deferral Raw Json Data')]"
      ]
    },
    {
      "name": "[concat(parameters('factoryName'), '/Trigger-Report-DeferralBalance')]",
      "type": "Microsoft.DataFactory/factories/triggers",
      "apiVersion": "2018-06-01",
      "properties": {
        "description": "Trigger-Report-DeferralBalance",
        "annotations": [],
        "runtimeState": "Stopped",
        "pipeline": {
          "pipelineReference": {
            "referenceName": "Deferral Balance Report",
            "type": "PipelineReference"
          },
          "parameters": {}
        },
        "type": "TumblingWindowTrigger",
        "typeProperties": {
          "frequency": "Hour",
          "interval": 24,
          "startTime": "2020-11-04T06:00:00.000Z",
          "delay": "00:00:00",
          "maxConcurrency": 1,
          "retryPolicy": {
            "count": 1,
            "intervalInSeconds": 30
          },
          "dependsOn": []
        }
      },
      "dependsOn": [
        "[concat(variables('factoryId'), '/pipelines/Deferral Balance Report')]"
      ]
    },
    {
      "name": "[concat(parameters('factoryName'), '/Trigger-Report-DeosSeatReport')]",
      "type": "Microsoft.DataFactory/factories/triggers",
      "apiVersion": "2018-06-01",
      "properties": {
        "annotations": [],
        "runtimeState": "Stopped",
        "pipeline": {
          "pipelineReference": {
            "referenceName": "DEOS Seat Report",
            "type": "PipelineReference"
          },
          "parameters": {}
        },
        "type": "TumblingWindowTrigger",
        "typeProperties": {
          "frequency": "Hour",
          "interval": 24,
          "startTime": "2020-11-04T06:00:00.000Z",
          "delay": "00:00:00",
          "maxConcurrency": 1,
          "retryPolicy": {
            "count": 1,
            "intervalInSeconds": 30
          },
          "dependsOn": []
        }
      },
      "dependsOn": [
        "[concat(variables('factoryId'), '/pipelines/DEOS Seat Report')]"
      ]
    },
    {
      "name": "[concat(parameters('factoryName'), '/Trigger-Transform-ChargeAggregator')]",
      "type": "Microsoft.DataFactory/factories/triggers",
      "apiVersion": "2018-06-01",
      "properties": {
        "description": "Transform raw CA data to structured streams",
        "annotations": [],
        "runtimeState": "Stopped",
        "pipeline": {
          "pipelineReference": {
            "referenceName": "Transformation",
            "type": "PipelineReference"
          },
          "parameters": {
            "ActivityName": "[parameters('Trigger-Transform-ChargeAggregator_properties_pipeline_parameters_ActivityName')]",
            "WindowStartTime": "[parameters('Trigger-Transform-ChargeAggregator_properties_pipeline_parameters_WindowStartTime')]"
          }
        },
        "type": "TumblingWindowTrigger",
        "typeProperties": {
          "frequency": "Hour",
          "interval": 24,
          "startTime": "2020-11-04T04:00:00.000Z",
          "delay": "00:00:00",
          "maxConcurrency": 10,
          "retryPolicy": {
            "intervalInSeconds": 30
          },
          "dependsOn": []
        }
      },
      "dependsOn": [
        "[concat(variables('factoryId'), '/pipelines/Transformation')]"
      ]
    },
    {
      "name": "[concat(parameters('factoryName'), '/Trigger-Transform-DeferralConsumable')]",
      "type": "Microsoft.DataFactory/factories/triggers",
      "apiVersion": "2018-06-01",
      "properties": {
        "description": "Trigger-Transform-DeferralConsumable",
        "annotations": [],
        "runtimeState": "Stopped",
        "pipeline": {
          "pipelineReference": {
            "referenceName": "Transformation",
            "type": "PipelineReference"
          },
          "parameters": {
            "ActivityName": "[parameters('Trigger-Transform-DeferralConsumable_properties_pipeline_parameters_ActivityName')]",
            "WindowStartTime": "[parameters('Trigger-Transform-DeferralConsumable_properties_pipeline_parameters_WindowStartTime')]"
          }
        },
        "type": "TumblingWindowTrigger",
        "typeProperties": {
          "frequency": "Hour",
          "interval": 24,
          "startTime": "2020-11-04T04:00:00.000Z",
          "delay": "00:00:00",
          "maxConcurrency": 10,
          "retryPolicy": {
            "count": 1,
            "intervalInSeconds": 30
          },
          "dependsOn": []
        }
      },
      "dependsOn": [
        "[concat(variables('factoryId'), '/pipelines/Transformation')]"
      ]
    },
    {
      "name": "[concat(parameters('factoryName'), '/Trigger-Transform-DeferralSpendable')]",
      "type": "Microsoft.DataFactory/factories/triggers",
      "apiVersion": "2018-06-01",
      "properties": {
        "description": "Trigger-Transform-DeferralSpendable",
        "annotations": [],
        "runtimeState": "Stopped",
        "pipeline": {
          "pipelineReference": {
            "referenceName": "Transformation",
            "type": "PipelineReference"
          },
          "parameters": {
            "ActivityName": "[parameters('Trigger-Transform-DeferralSpendable_properties_pipeline_parameters_ActivityName')]",
            "WindowStartTime": "[parameters('Trigger-Transform-DeferralSpendable_properties_pipeline_parameters_WindowStartTime')]"
          }
        },
        "type": "TumblingWindowTrigger",
        "typeProperties": {
          "frequency": "Hour",
          "interval": 24,
          "startTime": "2020-11-04T04:00:00.000Z",
          "delay": "00:00:00",
          "maxConcurrency": 10,
          "retryPolicy": {
            "count": 1,
            "intervalInSeconds": 30
          },
          "dependsOn": []
        }
      },
      "dependsOn": [
        "[concat(variables('factoryId'), '/pipelines/Transformation')]"
      ]
    },
    {
      "name": "[concat(parameters('factoryName'), '/Trigger-Transform-InvoiceDocumentDetail')]",
      "type": "Microsoft.DataFactory/factories/triggers",
      "apiVersion": "2018-06-01",
      "properties": {
        "description": "Trigger to transform Invoice Document Detail",
        "annotations": [],
        "runtimeState": "Stopped",
        "pipeline": {
          "pipelineReference": {
            "referenceName": "Transformation",
            "type": "PipelineReference"
          },
          "parameters": {
            "ActivityName": "[parameters('Trigger-Transform-InvoiceDocumentDetail_properties_pipeline_parameters_ActivityName')]",
            "WindowStartTime": "[parameters('Trigger-Transform-InvoiceDocumentDetail_properties_pipeline_parameters_WindowStartTime')]"
          }
        },
        "type": "TumblingWindowTrigger",
        "typeProperties": {
          "frequency": "Hour",
          "interval": 24,
          "startTime": "2020-11-04T04:00:00.000Z",
          "delay": "00:00:00",
          "maxConcurrency": 10,
          "retryPolicy": {
            "intervalInSeconds": 30
          },
          "dependsOn": []
        }
      },
      "dependsOn": [
        "[concat(variables('factoryId'), '/pipelines/Transformation')]"
      ]
    },
    {
      "name": "[concat(parameters('factoryName'), '/Trigger-Transform-InvoiceDocumentSummary')]",
      "type": "Microsoft.DataFactory/factories/triggers",
      "apiVersion": "2018-06-01",
      "properties": {
        "description": "Trigger to Transform Invoice Document Summary",
        "annotations": [],
        "runtimeState": "Stopped",
        "pipeline": {
          "pipelineReference": {
            "referenceName": "Transformation",
            "type": "PipelineReference"
          },
          "parameters": {
            "ActivityName": "[parameters('Trigger-Transform-InvoiceDocumentSummary_properties_pipeline_parameters_ActivityName')]",
            "WindowStartTime": "[parameters('Trigger-Transform-InvoiceDocumentSummary_properties_pipeline_parameters_WindowStartTime')]"
          }
        },
        "type": "TumblingWindowTrigger",
        "typeProperties": {
          "frequency": "Hour",
          "interval": 24,
          "startTime": "2020-11-04T04:00:00.000Z",
          "delay": "00:00:00",
          "maxConcurrency": 10,
          "retryPolicy": {
            "intervalInSeconds": 30
          },
          "dependsOn": []
        }
      },
      "dependsOn": [
        "[concat(variables('factoryId'), '/pipelines/Transformation')]"
      ]
    },
    {
      "name": "[concat(parameters('factoryName'), '/Trigger-Transform-Ledger')]",
      "type": "Microsoft.DataFactory/factories/triggers",
      "apiVersion": "2018-06-01",
      "properties": {
        "description": "Trigger-Transform-Ledger",
        "annotations": [],
        "runtimeState": "Stopped",
        "pipeline": {
          "pipelineReference": {
            "referenceName": "Transformation",
            "type": "PipelineReference"
          },
          "parameters": {
            "ActivityName": "[parameters('Trigger-Transform-Ledger_properties_pipeline_parameters_ActivityName')]",
            "WindowStartTime": "[parameters('Trigger-Transform-Ledger_properties_pipeline_parameters_WindowStartTime')]"
          }
        },
        "type": "TumblingWindowTrigger",
        "typeProperties": {
          "frequency": "Hour",
          "interval": 24,
          "startTime": "2020-11-04T04:00:00.000Z",
          "delay": "00:00:00",
          "maxConcurrency": 10,
          "retryPolicy": {
            "intervalInSeconds": 30
          },
          "dependsOn": []
        }
      },
      "dependsOn": [
        "[concat(variables('factoryId'), '/pipelines/Transformation')]"
      ]
    },
    {
      "name": "[concat(parameters('factoryName'), '/Trigger-Transform-Order')]",
      "type": "Microsoft.DataFactory/factories/triggers",
      "apiVersion": "2018-06-01",
      "properties": {
        "description": "Trigger-Transform-Order",
        "annotations": [],
        "runtimeState": "Stopped",
        "pipeline": {
          "pipelineReference": {
            "referenceName": "Transformation",
            "type": "PipelineReference"
          },
          "parameters": {
            "ActivityName": "[parameters('Trigger-Transform-Order_properties_pipeline_parameters_ActivityName')]",
            "WindowStartTime": "[parameters('Trigger-Transform-Order_properties_pipeline_parameters_WindowStartTime')]"
          }
        },
        "type": "TumblingWindowTrigger",
        "typeProperties": {
          "frequency": "Hour",
          "interval": 24,
          "startTime": "2020-11-04T04:00:00.000Z",
          "delay": "00:00:00",
          "maxConcurrency": 10,
          "retryPolicy": {
            "count": 1,
            "intervalInSeconds": 30
          },
          "dependsOn": []
        }
      },
      "dependsOn": [
        "[concat(variables('factoryId'), '/pipelines/Transformation')]"
      ]
    },
    {
      "name": "[concat(parameters('factoryName'), '/Trigger-Transform-OrderSeatCount')]",
      "type": "Microsoft.DataFactory/factories/triggers",
      "apiVersion": "2018-06-01",
      "properties": {
        "description": "Trigger-Transform-OrderSeatCount",
        "annotations": [],
        "runtimeState": "Stopped",
        "pipeline": {
          "pipelineReference": {
            "referenceName": "Transformation",
            "type": "PipelineReference"
          },
          "parameters": {
            "ActivityName": "[parameters('Trigger-Transform-OrderSeatCount_properties_pipeline_parameters_ActivityName')]",
            "WindowStartTime": "[parameters('Trigger-Transform-OrderSeatCount_properties_pipeline_parameters_WindowStartTime')]"
          }
        },
        "type": "TumblingWindowTrigger",
        "typeProperties": {
          "frequency": "Hour",
          "interval": 24,
          "startTime": "2020-11-04T04:00:00.000Z",
          "delay": "00:00:00",
          "maxConcurrency": 10,
          "retryPolicy": {
            "count": 1,
            "intervalInSeconds": 30
          },
          "dependsOn": []
        }
      },
      "dependsOn": [
        "[concat(variables('factoryId'), '/pipelines/Transformation')]"
      ]
    },
    {
      "name": "[concat(parameters('factoryName'), '/Trigger-Transform-Rating')]",
      "type": "Microsoft.DataFactory/factories/triggers",
      "apiVersion": "2018-06-01",
      "properties": {
        "description": "Trigger to Transform Rating",
        "annotations": [],
        "runtimeState": "Stopped",
        "pipeline": {
          "pipelineReference": {
            "referenceName": "Transform-Rating",
            "type": "PipelineReference"
          },
          "parameters": {
            "RunTime": "[parameters('Trigger-Transform-Rating_properties_pipeline_parameters_RunTime')]"
          }
        },
        "type": "TumblingWindowTrigger",
        "typeProperties": {
          "frequency": "Hour",
          "interval": 1,
          "startTime": "2020-11-04T00:00:00.000Z",
          "delay": "02:00:00",
          "maxConcurrency": 10,
          "retryPolicy": {
            "intervalInSeconds": 30
          },
          "dependsOn": []
        }
      },
      "dependsOn": [
        "[concat(variables('factoryId'), '/pipelines/Transform-Rating')]"
      ]
    }
  ]
}